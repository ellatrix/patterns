{"version":3,"sources":["@wordpress/rich-text/src/remove-format.js"],"names":["normaliseFormats","removeFormat","value","formatType","startIndex","start","endIndex","end","formats","activeFormats","newFormats","slice","format","find","type","newFormat","filterFormats","i","filter","index","length"],"mappings":"AAAA;AACA;AACA;AAEA,SAASA,gBAAT,QAAiC,qBAAjC;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,CACNC,KADM,EAENC,UAFM,EAKL;AAAA,MAFDC,UAEC,uEAFYF,KAAK,CAACG,KAElB;AAAA,MADDC,QACC,uEADUJ,KAAK,CAACK,GAChB;AACD,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAA6BP,KAAnC;AACA,QAAMQ,UAAU,GAAGF,OAAO,CAACG,KAAR,EAAnB,CAFC,CAID;AACA;;AACA,MAAKP,UAAU,KAAKE,QAApB,EAA+B;AAAA;;AAC9B,UAAMM,MAAM,4BAAGF,UAAU,CAAEN,UAAF,CAAb,0DAAG,sBAA0BS,IAA1B,CACd;AAAA,UAAE;AAAEC,QAAAA;AAAF,OAAF;AAAA,aAAgBA,IAAI,KAAKX,UAAzB;AAAA,KADc,CAAf;;AAIA,QAAKS,MAAL,EAAc;AACb,uCACCF,UAAU,CAAEN,UAAF,CADX,mDACC,uBAA0BS,IAA1B,CACGE,SAAF,IAAiBA,SAAS,KAAKH,MADhC,CADD,EAIE;AAAA;;AACDI,QAAAA,aAAa,CAAEN,UAAF,EAAcN,UAAd,EAA0BD,UAA1B,CAAb;AACAC,QAAAA,UAAU;AACV;;AAEDE,MAAAA,QAAQ;;AAER,qCACCI,UAAU,CAAEJ,QAAF,CADX,iDACC,qBAAwBO,IAAxB,CACGE,SAAF,IAAiBA,SAAS,KAAKH,MADhC,CADD,EAIE;AAAA;;AACDI,QAAAA,aAAa,CAAEN,UAAF,EAAcJ,QAAd,EAAwBH,UAAxB,CAAb;AACAG,QAAAA,QAAQ;AACR;AACD;AACD,GA1BD,MA0BO;AACN,SAAM,IAAIW,CAAC,GAAGb,UAAd,EAA0Ba,CAAC,GAAGX,QAA9B,EAAwCW,CAAC,EAAzC,EAA8C;AAC7C,UAAKP,UAAU,CAAEO,CAAF,CAAf,EAAuB;AACtBD,QAAAA,aAAa,CAAEN,UAAF,EAAcO,CAAd,EAAiBd,UAAjB,CAAb;AACA;AACD;AACD;;AAED,SAAOH,gBAAgB,CAAE,EACxB,GAAGE,KADqB;AAExBM,IAAAA,OAAO,EAAEE,UAFe;AAGxBD,IAAAA,aAAa,EACZ,CAAAA,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAES,MAAf,CAAuB;AAAA,UAAE;AAAEJ,QAAAA;AAAF,OAAF;AAAA,aAAgBA,IAAI,KAAKX,UAAzB;AAAA,KAAvB,MAAgE;AAJzC,GAAF,CAAvB;AAMA;;AAED,SAASa,aAAT,CAAwBR,OAAxB,EAAiCW,KAAjC,EAAwChB,UAAxC,EAAqD;AACpD,QAAMO,UAAU,GAAGF,OAAO,CAAEW,KAAF,CAAP,CAAiBD,MAAjB,CAClB;AAAA,QAAE;AAAEJ,MAAAA;AAAF,KAAF;AAAA,WAAgBA,IAAI,KAAKX,UAAzB;AAAA,GADkB,CAAnB;;AAIA,MAAKO,UAAU,CAACU,MAAhB,EAAyB;AACxBZ,IAAAA,OAAO,CAAEW,KAAF,CAAP,GAAmBT,UAAnB;AACA,GAFD,MAEO;AACN,WAAOF,OAAO,CAAEW,KAAF,CAAd;AACA;AACD","sourcesContent":["/**\n * Internal dependencies\n */\n\nimport { normaliseFormats } from './normalise-formats';\n\n/** @typedef {import('./create').RichTextValue} RichTextValue */\n\n/**\n * Remove any format object from a Rich Text value by type from the given\n * `startIndex` to the given `endIndex`. Indices are retrieved from the\n * selection if none are provided.\n *\n * @param {RichTextValue} value        Value to modify.\n * @param {string}        formatType   Format type to remove.\n * @param {number}        [startIndex] Start index.\n * @param {number}        [endIndex]   End index.\n *\n * @return {RichTextValue} A new value with the format applied.\n */\nexport function removeFormat(\n\tvalue,\n\tformatType,\n\tstartIndex = value.start,\n\tendIndex = value.end\n) {\n\tconst { formats, activeFormats } = value;\n\tconst newFormats = formats.slice();\n\n\t// If the selection is collapsed, expand start and end to the edges of the\n\t// format.\n\tif ( startIndex === endIndex ) {\n\t\tconst format = newFormats[ startIndex ]?.find(\n\t\t\t( { type } ) => type === formatType\n\t\t);\n\n\t\tif ( format ) {\n\t\t\twhile (\n\t\t\t\tnewFormats[ startIndex ]?.find(\n\t\t\t\t\t( newFormat ) => newFormat === format\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tfilterFormats( newFormats, startIndex, formatType );\n\t\t\t\tstartIndex--;\n\t\t\t}\n\n\t\t\tendIndex++;\n\n\t\t\twhile (\n\t\t\t\tnewFormats[ endIndex ]?.find(\n\t\t\t\t\t( newFormat ) => newFormat === format\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tfilterFormats( newFormats, endIndex, formatType );\n\t\t\t\tendIndex++;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor ( let i = startIndex; i < endIndex; i++ ) {\n\t\t\tif ( newFormats[ i ] ) {\n\t\t\t\tfilterFormats( newFormats, i, formatType );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn normaliseFormats( {\n\t\t...value,\n\t\tformats: newFormats,\n\t\tactiveFormats:\n\t\t\tactiveFormats?.filter( ( { type } ) => type !== formatType ) || [],\n\t} );\n}\n\nfunction filterFormats( formats, index, formatType ) {\n\tconst newFormats = formats[ index ].filter(\n\t\t( { type } ) => type !== formatType\n\t);\n\n\tif ( newFormats.length ) {\n\t\tformats[ index ] = newFormats;\n\t} else {\n\t\tdelete formats[ index ];\n\t}\n}\n"]}
{"version":3,"sources":["@wordpress/rich-text/src/component/index.js"],"names":["useRef","useLayoutEffect","useReducer","useMergeRefs","useRefEffect","useRegistry","create","apply","toHTMLString","useDefaultStyle","useBoundaryStyle","useCopyHandler","useFormatBoundaries","useSelectObject","useInputAndSelection","useSelectionChangeCompat","useDelete","useRichText","value","selectionStart","selectionEnd","placeholder","preserveWhiteSpace","onSelectionChange","onChange","__unstableMultilineTag","multilineTag","__unstableDisableFormats","disableFormats","__unstableIsSelected","isSelected","__unstableDependencies","__unstableAfterParse","__unstableBeforeSerialize","__unstableAddInvisibleFormats","registry","forceRender","ref","createRecord","ownerDocument","defaultView","current","selection","getSelection","range","rangeCount","getRangeAt","element","multilineWrapperTags","undefined","__unstableIsEditableTree","applyRecord","newRecord","domOnly","prepareEditableTree","__unstableDomOnly","_value","record","setRecordFromProps","html","formats","Array","length","replacements","start","end","hadSelectionUpdate","hasRelevantInitFormat","type","handleChangesUponInit","handleChange","text","batch","__unstableFormats","__unstableText","applyFromProps","didMount","activeElement","focus","mergedRefs","getValue","__experimentalRichText"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useRef, useLayoutEffect, useReducer } from '@wordpress/element';\nimport { useMergeRefs, useRefEffect } from '@wordpress/compose';\nimport { useRegistry } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { create } from '../create';\nimport { apply } from '../to-dom';\nimport { toHTMLString } from '../to-html-string';\nimport { useDefaultStyle } from './use-default-style';\nimport { useBoundaryStyle } from './use-boundary-style';\nimport { useCopyHandler } from './use-copy-handler';\nimport { useFormatBoundaries } from './use-format-boundaries';\nimport { useSelectObject } from './use-select-object';\nimport { useInputAndSelection } from './use-input-and-selection';\nimport { useSelectionChangeCompat } from './use-selection-change-compat';\nimport { useDelete } from './use-delete';\n\nexport function useRichText( {\n\tvalue = '',\n\tselectionStart,\n\tselectionEnd,\n\tplaceholder,\n\tpreserveWhiteSpace,\n\tonSelectionChange,\n\tonChange,\n\t__unstableMultilineTag: multilineTag,\n\t__unstableDisableFormats: disableFormats,\n\t__unstableIsSelected: isSelected,\n\t__unstableDependencies = [],\n\t__unstableAfterParse,\n\t__unstableBeforeSerialize,\n\t__unstableAddInvisibleFormats,\n} ) {\n\tconst registry = useRegistry();\n\tconst [ , forceRender ] = useReducer( () => ( {} ) );\n\tconst ref = useRef();\n\n\tfunction createRecord() {\n\t\tconst {\n\t\t\townerDocument: { defaultView },\n\t\t} = ref.current;\n\t\tconst selection = defaultView.getSelection();\n\t\tconst range =\n\t\t\tselection.rangeCount > 0 ? selection.getRangeAt( 0 ) : null;\n\n\t\treturn create( {\n\t\t\telement: ref.current,\n\t\t\trange,\n\t\t\tmultilineTag,\n\t\t\tmultilineWrapperTags:\n\t\t\t\tmultilineTag === 'li' ? [ 'ul', 'ol' ] : undefined,\n\t\t\t__unstableIsEditableTree: true,\n\t\t\tpreserveWhiteSpace,\n\t\t} );\n\t}\n\n\tfunction applyRecord( newRecord, { domOnly } = {} ) {\n\t\tapply( {\n\t\t\tvalue: newRecord,\n\t\t\tcurrent: ref.current,\n\t\t\tmultilineTag,\n\t\t\tmultilineWrapperTags:\n\t\t\t\tmultilineTag === 'li' ? [ 'ul', 'ol' ] : undefined,\n\t\t\tprepareEditableTree: __unstableAddInvisibleFormats,\n\t\t\t__unstableDomOnly: domOnly,\n\t\t\tplaceholder,\n\t\t} );\n\t}\n\n\t// Internal values are updated synchronously, unlike props and state.\n\tconst _value = useRef( value );\n\tconst record = useRef();\n\n\tfunction setRecordFromProps() {\n\t\t_value.current = value;\n\t\trecord.current = create( {\n\t\t\thtml: value,\n\t\t\tmultilineTag,\n\t\t\tmultilineWrapperTags:\n\t\t\t\tmultilineTag === 'li' ? [ 'ul', 'ol' ] : undefined,\n\t\t\tpreserveWhiteSpace,\n\t\t} );\n\t\tif ( disableFormats ) {\n\t\t\trecord.current.formats = Array( value.length );\n\t\t\trecord.current.replacements = Array( value.length );\n\t\t}\n\t\tif ( __unstableAfterParse ) {\n\t\t\trecord.current.formats = __unstableAfterParse( record.current );\n\t\t}\n\t\trecord.current.start = selectionStart;\n\t\trecord.current.end = selectionEnd;\n\t}\n\n\tconst hadSelectionUpdate = useRef( false );\n\n\tif ( ! record.current ) {\n\t\tsetRecordFromProps();\n\t\t// Sometimes formats are added programmatically and we need to make\n\t\t// sure it's persisted to the block store / markup. If these formats\n\t\t// are not applied, they could cause inconsistencies between the data\n\t\t// in the visual editor and the frontend. Right now, it's only relevant\n\t\t// to the `core/text-color` format, which is applied at runtime in\n\t\t// certain circunstances. See the `__unstableFilterAttributeValue`\n\t\t// function in `packages/format-library/src/text-color/index.js`.\n\t\t// @todo find a less-hacky way of solving this.\n\n\t\tconst hasRelevantInitFormat =\n\t\t\trecord.current?.formats[ 0 ]?.[ 0 ]?.type === 'core/text-color';\n\n\t\tif ( hasRelevantInitFormat ) {\n\t\t\thandleChangesUponInit( record.current );\n\t\t}\n\t} else if (\n\t\tselectionStart !== record.current.start ||\n\t\tselectionEnd !== record.current.end\n\t) {\n\t\thadSelectionUpdate.current = isSelected;\n\t\trecord.current = {\n\t\t\t...record.current,\n\t\t\tstart: selectionStart,\n\t\t\tend: selectionEnd,\n\t\t};\n\t}\n\n\t/**\n\t * Sync the value to global state. The node tree and selection will also be\n\t * updated if differences are found.\n\t *\n\t * @param {Object} newRecord The record to sync and apply.\n\t */\n\tfunction handleChange( newRecord ) {\n\t\trecord.current = newRecord;\n\t\tapplyRecord( newRecord );\n\n\t\tif ( disableFormats ) {\n\t\t\t_value.current = newRecord.text;\n\t\t} else {\n\t\t\t_value.current = toHTMLString( {\n\t\t\t\tvalue: __unstableBeforeSerialize\n\t\t\t\t\t? {\n\t\t\t\t\t\t\t...newRecord,\n\t\t\t\t\t\t\tformats: __unstableBeforeSerialize( newRecord ),\n\t\t\t\t\t  }\n\t\t\t\t\t: newRecord,\n\t\t\t\tmultilineTag,\n\t\t\t\tpreserveWhiteSpace,\n\t\t\t} );\n\t\t}\n\n\t\tconst { start, end, formats, text } = newRecord;\n\n\t\t// Selection must be updated first, so it is recorded in history when\n\t\t// the content change happens.\n\t\t// We batch both calls to only attempt to rerender once.\n\t\tregistry.batch( () => {\n\t\t\tonSelectionChange( start, end );\n\t\t\tonChange( _value.current, {\n\t\t\t\t__unstableFormats: formats,\n\t\t\t\t__unstableText: text,\n\t\t\t} );\n\t\t} );\n\t\tforceRender();\n\t}\n\n\tfunction handleChangesUponInit( newRecord ) {\n\t\trecord.current = newRecord;\n\n\t\t_value.current = toHTMLString( {\n\t\t\tvalue: __unstableBeforeSerialize\n\t\t\t\t? {\n\t\t\t\t\t\t...newRecord,\n\t\t\t\t\t\tformats: __unstableBeforeSerialize( newRecord ),\n\t\t\t\t  }\n\t\t\t\t: newRecord,\n\t\t\tmultilineTag,\n\t\t\tpreserveWhiteSpace,\n\t\t} );\n\n\t\tconst { formats, text } = newRecord;\n\n\t\tregistry.batch( () => {\n\t\t\tonChange( _value.current, {\n\t\t\t\t__unstableFormats: formats,\n\t\t\t\t__unstableText: text,\n\t\t\t} );\n\t\t} );\n\t\tforceRender();\n\t}\n\n\tfunction applyFromProps() {\n\t\tsetRecordFromProps();\n\t\tapplyRecord( record.current );\n\t}\n\n\tconst didMount = useRef( false );\n\n\t// Value updates must happen synchonously to avoid overwriting newer values.\n\tuseLayoutEffect( () => {\n\t\tif ( didMount.current && value !== _value.current ) {\n\t\t\tapplyFromProps();\n\t\t\tforceRender();\n\t\t}\n\t}, [ value ] );\n\n\t// Value updates must happen synchonously to avoid overwriting newer values.\n\tuseLayoutEffect( () => {\n\t\tif ( ! hadSelectionUpdate.current ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( ref.current.ownerDocument.activeElement !== ref.current ) {\n\t\t\tref.current.focus();\n\t\t}\n\n\t\tapplyFromProps();\n\t\thadSelectionUpdate.current = false;\n\t}, [ hadSelectionUpdate.current ] );\n\n\tconst mergedRefs = useMergeRefs( [\n\t\tref,\n\t\tuseDefaultStyle(),\n\t\tuseBoundaryStyle( { record } ),\n\t\tuseCopyHandler( { record, multilineTag, preserveWhiteSpace } ),\n\t\tuseSelectObject(),\n\t\tuseFormatBoundaries( { record, applyRecord } ),\n\t\tuseDelete( {\n\t\t\tcreateRecord,\n\t\t\thandleChange,\n\t\t\tmultilineTag,\n\t\t} ),\n\t\tuseInputAndSelection( {\n\t\t\trecord,\n\t\t\tapplyRecord,\n\t\t\tcreateRecord,\n\t\t\thandleChange,\n\t\t\tisSelected,\n\t\t\tonSelectionChange,\n\t\t} ),\n\t\tuseSelectionChangeCompat(),\n\t\tuseRefEffect( () => {\n\t\t\tapplyFromProps();\n\t\t\tdidMount.current = true;\n\t\t}, [ placeholder, ...__unstableDependencies ] ),\n\t] );\n\n\treturn {\n\t\tvalue: record.current,\n\t\t// A function to get the most recent value so event handlers in\n\t\t// useRichText implementations have access to it. For example when\n\t\t// listening to input events, we internally update the state, but this\n\t\t// state is not yet available to the input event handler because React\n\t\t// may re-render asynchronously.\n\t\tgetValue: () => record.current,\n\t\tonChange: handleChange,\n\t\tref: mergedRefs,\n\t};\n}\n\nexport default function __experimentalRichText() {}\n"]}
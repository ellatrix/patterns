{"version":3,"sources":["@wordpress/rich-text/src/update-formats.js"],"names":["updateFormats","value","start","end","formats","min","Math","max","formatsBefore","formatsAfter","activeFormats","map","format","index","length"],"mappings":";;;;;;;AAIA;;AAJA;AACA;AACA;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,aAAT,OAAyD;AAAA,MAAjC;AAAEC,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,GAAhB;AAAqBC,IAAAA;AAArB,GAAiC;AAC/D;AACA,QAAMC,GAAG,GAAGC,IAAI,CAACD,GAAL,CAAUH,KAAV,EAAiBC,GAAjB,CAAZ;AACA,QAAMI,GAAG,GAAGD,IAAI,CAACC,GAAL,CAAUL,KAAV,EAAiBC,GAAjB,CAAZ;AACA,QAAMK,aAAa,GAAGP,KAAK,CAACG,OAAN,CAAeC,GAAG,GAAG,CAArB,KAA4B,EAAlD;AACA,QAAMI,YAAY,GAAGR,KAAK,CAACG,OAAN,CAAeG,GAAf,KAAwB,EAA7C,CAL+D,CAO/D;AACA;;AACAN,EAAAA,KAAK,CAACS,aAAN,GAAsBN,OAAO,CAACO,GAAR,CAAa,CAAEC,MAAF,EAAUC,KAAV,KAAqB;AACvD,QAAKL,aAAa,CAAEK,KAAF,CAAlB,EAA8B;AAC7B,UAAK,kCAAeD,MAAf,EAAuBJ,aAAa,CAAEK,KAAF,CAApC,CAAL,EAAuD;AACtD,eAAOL,aAAa,CAAEK,KAAF,CAApB;AACA;AACD,KAJD,MAIO,IAAKJ,YAAY,CAAEI,KAAF,CAAjB,EAA6B;AACnC,UAAK,kCAAeD,MAAf,EAAuBH,YAAY,CAAEI,KAAF,CAAnC,CAAL,EAAsD;AACrD,eAAOJ,YAAY,CAAEI,KAAF,CAAnB;AACA;AACD;;AAED,WAAOD,MAAP;AACA,GAZqB,CAAtB;;AAcA,SAAQ,EAAET,GAAF,IAASD,KAAjB,EAAyB;AACxB,QAAKD,KAAK,CAACS,aAAN,CAAoBI,MAApB,GAA6B,CAAlC,EAAsC;AACrCb,MAAAA,KAAK,CAACG,OAAN,CAAeD,GAAf,IAAuBF,KAAK,CAACS,aAA7B;AACA,KAFD,MAEO;AACN,aAAOT,KAAK,CAACG,OAAN,CAAeD,GAAf,CAAP;AACA;AACD;;AAED,SAAOF,KAAP;AACA","sourcesContent":["/**\n * Internal dependencies\n */\n\nimport { isFormatEqual } from './is-format-equal';\n\n/** @typedef {import('./create').RichTextValue} RichTextValue */\n\n/**\n * Efficiently updates all the formats from `start` (including) until `end`\n * (excluding) with the active formats. Mutates `value`.\n *\n * @param {Object}        $1         Named paramentes.\n * @param {RichTextValue} $1.value   Value te update.\n * @param {number}        $1.start   Index to update from.\n * @param {number}        $1.end     Index to update until.\n * @param {Array}         $1.formats Replacement formats.\n *\n * @return {RichTextValue} Mutated value.\n */\nexport function updateFormats( { value, start, end, formats } ) {\n\t// Start and end may be switched in case of delete.\n\tconst min = Math.min( start, end );\n\tconst max = Math.max( start, end );\n\tconst formatsBefore = value.formats[ min - 1 ] || [];\n\tconst formatsAfter = value.formats[ max ] || [];\n\n\t// First, fix the references. If any format right before or after are\n\t// equal, the replacement format should use the same reference.\n\tvalue.activeFormats = formats.map( ( format, index ) => {\n\t\tif ( formatsBefore[ index ] ) {\n\t\t\tif ( isFormatEqual( format, formatsBefore[ index ] ) ) {\n\t\t\t\treturn formatsBefore[ index ];\n\t\t\t}\n\t\t} else if ( formatsAfter[ index ] ) {\n\t\t\tif ( isFormatEqual( format, formatsAfter[ index ] ) ) {\n\t\t\t\treturn formatsAfter[ index ];\n\t\t\t}\n\t\t}\n\n\t\treturn format;\n\t} );\n\n\twhile ( --end >= start ) {\n\t\tif ( value.activeFormats.length > 0 ) {\n\t\t\tvalue.formats[ end ] = value.activeFormats;\n\t\t} else {\n\t\t\tdelete value.formats[ end ];\n\t\t}\n\t}\n\n\treturn value;\n}\n"]}
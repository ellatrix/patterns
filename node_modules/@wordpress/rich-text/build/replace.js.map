{"version":3,"sources":["@wordpress/rich-text/src/replace.js"],"names":["replace","pattern","replacement","formats","replacements","text","start","end","match","rest","offset","length","newText","newFormats","newReplacements","Array","fill","slice","concat"],"mappings":";;;;;;;AAIA;;AAJA;AACA;AACA;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,OAAT,OAENC,OAFM,EAGNC,WAHM,EAIL;AAAA,MAHD;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,YAAX;AAAyBC,IAAAA,IAAzB;AAA+BC,IAAAA,KAA/B;AAAsCC,IAAAA;AAAtC,GAGC;AACDF,EAAAA,IAAI,GAAGA,IAAI,CAACL,OAAL,CAAcC,OAAd,EAAuB,UAAEO,KAAF,EAAsB;AAAA,sCAAVC,IAAU;AAAVA,MAAAA,IAAU;AAAA;;AACnD,UAAMC,MAAM,GAAGD,IAAI,CAAEA,IAAI,CAACE,MAAL,GAAc,CAAhB,CAAnB;AACA,QAAIC,OAAO,GAAGV,WAAd;AACA,QAAIW,UAAJ;AACA,QAAIC,eAAJ;;AAEA,QAAK,OAAOF,OAAP,KAAmB,UAAxB,EAAqC;AACpCA,MAAAA,OAAO,GAAGV,WAAW,CAAEM,KAAF,EAAS,GAAGC,IAAZ,CAArB;AACA;;AAED,QAAK,OAAOG,OAAP,KAAmB,QAAxB,EAAmC;AAClCC,MAAAA,UAAU,GAAGD,OAAO,CAACT,OAArB;AACAW,MAAAA,eAAe,GAAGF,OAAO,CAACR,YAA1B;AACAQ,MAAAA,OAAO,GAAGA,OAAO,CAACP,IAAlB;AACA,KAJD,MAIO;AACNQ,MAAAA,UAAU,GAAGE,KAAK,CAAEH,OAAO,CAACD,MAAV,CAAlB;AACAG,MAAAA,eAAe,GAAGC,KAAK,CAAEH,OAAO,CAACD,MAAV,CAAvB;;AAEA,UAAKR,OAAO,CAAEO,MAAF,CAAZ,EAAyB;AACxBG,QAAAA,UAAU,GAAGA,UAAU,CAACG,IAAX,CAAiBb,OAAO,CAAEO,MAAF,CAAxB,CAAb;AACA;AACD;;AAEDP,IAAAA,OAAO,GAAGA,OAAO,CACfc,KADQ,CACD,CADC,EACEP,MADF,EAERQ,MAFQ,CAEAL,UAFA,EAEYV,OAAO,CAACc,KAAR,CAAeP,MAAM,GAAGF,KAAK,CAACG,MAA9B,CAFZ,CAAV;AAGAP,IAAAA,YAAY,GAAGA,YAAY,CACzBa,KADa,CACN,CADM,EACHP,MADG,EAEbQ,MAFa,CAGbJ,eAHa,EAIbV,YAAY,CAACa,KAAb,CAAoBP,MAAM,GAAGF,KAAK,CAACG,MAAnC,CAJa,CAAf;;AAOA,QAAKL,KAAL,EAAa;AACZA,MAAAA,KAAK,GAAGC,GAAG,GAAGG,MAAM,GAAGE,OAAO,CAACD,MAA/B;AACA;;AAED,WAAOC,OAAP;AACA,GAtCM,CAAP;AAwCA,SAAO,wCAAkB;AAAET,IAAAA,OAAF;AAAWC,IAAAA,YAAX;AAAyBC,IAAAA,IAAzB;AAA+BC,IAAAA,KAA/B;AAAsCC,IAAAA;AAAtC,GAAlB,CAAP;AACA","sourcesContent":["/**\n * Internal dependencies\n */\n\nimport { normaliseFormats } from './normalise-formats';\n\n/** @typedef {import('./create').RichTextValue} RichTextValue */\n\n/**\n * Search a Rich Text value and replace the match(es) with `replacement`. This\n * is similar to `String.prototype.replace`.\n *\n * @param {RichTextValue}   value       The value to modify.\n * @param {RegExp|string}   pattern     A RegExp object or literal. Can also be\n *                                      a string. It is treated as a verbatim\n *                                      string and is not interpreted as a\n *                                      regular expression. Only the first\n *                                      occurrence will be replaced.\n * @param {Function|string} replacement The match or matches are replaced with\n *                                      the specified or the value returned by\n *                                      the specified function.\n *\n * @return {RichTextValue} A new value with replacements applied.\n */\nexport function replace(\n\t{ formats, replacements, text, start, end },\n\tpattern,\n\treplacement\n) {\n\ttext = text.replace( pattern, ( match, ...rest ) => {\n\t\tconst offset = rest[ rest.length - 2 ];\n\t\tlet newText = replacement;\n\t\tlet newFormats;\n\t\tlet newReplacements;\n\n\t\tif ( typeof newText === 'function' ) {\n\t\t\tnewText = replacement( match, ...rest );\n\t\t}\n\n\t\tif ( typeof newText === 'object' ) {\n\t\t\tnewFormats = newText.formats;\n\t\t\tnewReplacements = newText.replacements;\n\t\t\tnewText = newText.text;\n\t\t} else {\n\t\t\tnewFormats = Array( newText.length );\n\t\t\tnewReplacements = Array( newText.length );\n\n\t\t\tif ( formats[ offset ] ) {\n\t\t\t\tnewFormats = newFormats.fill( formats[ offset ] );\n\t\t\t}\n\t\t}\n\n\t\tformats = formats\n\t\t\t.slice( 0, offset )\n\t\t\t.concat( newFormats, formats.slice( offset + match.length ) );\n\t\treplacements = replacements\n\t\t\t.slice( 0, offset )\n\t\t\t.concat(\n\t\t\t\tnewReplacements,\n\t\t\t\treplacements.slice( offset + match.length )\n\t\t\t);\n\n\t\tif ( start ) {\n\t\t\tstart = end = offset + newText.length;\n\t\t}\n\n\t\treturn newText;\n\t} );\n\n\treturn normaliseFormats( { formats, replacements, text, start, end } );\n}\n"]}
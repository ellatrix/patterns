{"version":3,"sources":["@wordpress/rich-text/src/component/use-anchor.js"],"names":["useAnchor","editableContentElement","value","settings","tagName","className","name","activeFormat","undefined","ownerDocument","defaultView","selection","getSelection","rangeCount","selectionWithinEditableContentElement","contains","anchorNode","range","getRangeAt","startContainer","getBoundingClientRect","element","nextElementSibling","nodeType","ELEMENT_NODE","parentNode","closest","start","end"],"mappings":";;;;;;;AAGA;;AAKA;;AARA;AACA;AACA;;AAGA;AACA;AACA;;AAGA;;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,SAAT,OAAuE;AAAA,MAAnD;AAAEC,IAAAA,sBAAF;AAA0BC,IAAAA,KAA1B;AAAiCC,IAAAA,QAAQ,GAAG;AAA5C,GAAmD;AAC7E,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,SAAX;AAAsBC,IAAAA;AAAtB,MAA+BH,QAArC;AACA,QAAMI,YAAY,GAAGD,IAAI,GAAG,sCAAiBJ,KAAjB,EAAwBI,IAAxB,CAAH,GAAoCE,SAA7D;AAEA,SAAO,sBAAS,MAAM;AACrB,QAAK,CAAEP,sBAAP,EAAgC;AAChC,UAAM;AACLQ,MAAAA,aAAa,EAAE;AAAEC,QAAAA;AAAF;AADV,QAEFT,sBAFJ;AAGA,UAAMU,SAAS,GAAGD,WAAW,CAACE,YAAZ,EAAlB;;AAEA,QAAK,CAAED,SAAS,CAACE,UAAjB,EAA8B;AAC7B;AACA;;AAED,UAAMC,qCAAqC,GAC1Cb,sBAD0C,aAC1CA,sBAD0C,uBAC1CA,sBAAsB,CAAEc,QAAxB,CAAkCJ,SAAlC,aAAkCA,SAAlC,uBAAkCA,SAAS,CAAEK,UAA7C,CADD;AAGA,UAAMC,KAAK,GAAGN,SAAS,CAACO,UAAV,CAAsB,CAAtB,CAAd;;AAEA,QAAK,CAAEX,YAAP,EAAsB;AACrB,aAAO;AACNE,QAAAA,aAAa,EAAEQ,KAAK,CAACE,cAAN,CAAqBV,aAD9B;;AAENW,QAAAA,qBAAqB,GAAG;AACvB,iBAAON,qCAAqC,GACzCG,KAAK,CAACG,qBAAN,EADyC,GAEzCnB,sBAAsB,CAACmB,qBAAvB,EAFH;AAGA;;AANK,OAAP;AAQA;;AAED,QAAIC,OAAO,GAAGJ,KAAK,CAACE,cAApB,CA3BqB,CA6BrB;;AACAE,IAAAA,OAAO,GAAGA,OAAO,CAACC,kBAAR,IAA8BD,OAAxC;;AAEA,WAAQA,OAAO,CAACE,QAAR,KAAqBF,OAAO,CAACG,YAArC,EAAoD;AACnDH,MAAAA,OAAO,GAAGA,OAAO,CAACI,UAAlB;AACA;;AAED,WAAOJ,OAAO,CAACK,OAAR,CACNtB,OAAO,IAAKC,SAAS,GAAG,MAAMA,SAAT,GAAqB,EAAnC,CADD,CAAP;AAGA,GAvCM,EAuCJ,CACFJ,sBADE,EAEFM,YAFE,EAGFL,KAAK,CAACyB,KAHJ,EAIFzB,KAAK,CAAC0B,GAJJ,EAKFxB,OALE,EAMFC,SANE,CAvCI,CAAP;AA+CA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useMemo } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport { getActiveFormat } from '../get-active-format';\n\n/** @typedef {import('../register-format-type').RichTextFormatType} RichTextFormatType */\n/** @typedef {import('../create').RichTextValue} RichTextValue */\n\n/**\n * @typedef {Object} VirtualAnchorElement\n * @property {Function} getBoundingClientRect A function returning a DOMRect\n * @property {Document} ownerDocument         The element's ownerDocument\n */\n\n/**\n * This hook, to be used in a format type's Edit component, returns the active\n * element that is formatted, or a virtual element for the selection range if\n * no format is active. The returned value is meant to be used for positioning\n * UI, e.g. by passing it to the `Popover` component via the `anchor` prop.\n *\n * @param {Object}             $1                        Named parameters.\n * @param {HTMLElement|null}   $1.editableContentElement The element containing\n *                                                       the editable content.\n * @param {RichTextValue}      $1.value                  Value to check for selection.\n * @param {RichTextFormatType} $1.settings               The format type's settings.\n * @return {Element|VirtualAnchorElement|undefined|null} The active element or selection range.\n */\nexport function useAnchor( { editableContentElement, value, settings = {} } ) {\n\tconst { tagName, className, name } = settings;\n\tconst activeFormat = name ? getActiveFormat( value, name ) : undefined;\n\n\treturn useMemo( () => {\n\t\tif ( ! editableContentElement ) return;\n\t\tconst {\n\t\t\townerDocument: { defaultView },\n\t\t} = editableContentElement;\n\t\tconst selection = defaultView.getSelection();\n\n\t\tif ( ! selection.rangeCount ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selectionWithinEditableContentElement =\n\t\t\teditableContentElement?.contains( selection?.anchorNode );\n\n\t\tconst range = selection.getRangeAt( 0 );\n\n\t\tif ( ! activeFormat ) {\n\t\t\treturn {\n\t\t\t\townerDocument: range.startContainer.ownerDocument,\n\t\t\t\tgetBoundingClientRect() {\n\t\t\t\t\treturn selectionWithinEditableContentElement\n\t\t\t\t\t\t? range.getBoundingClientRect()\n\t\t\t\t\t\t: editableContentElement.getBoundingClientRect();\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tlet element = range.startContainer;\n\n\t\t// If the caret is right before the element, select the next element.\n\t\telement = element.nextElementSibling || element;\n\n\t\twhile ( element.nodeType !== element.ELEMENT_NODE ) {\n\t\t\telement = element.parentNode;\n\t\t}\n\n\t\treturn element.closest(\n\t\t\ttagName + ( className ? '.' + className : '' )\n\t\t);\n\t}, [\n\t\teditableContentElement,\n\t\tactiveFormat,\n\t\tvalue.start,\n\t\tvalue.end,\n\t\ttagName,\n\t\tclassName,\n\t] );\n}\n"]}
import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { store as blocksStore } from '@wordpress/blocks';
import { useMemo, useCallback } from '@wordpress/element';
import { __ } from '@wordpress/i18n';
import { SelectControl } from '@wordpress/components';
import { useSelect } from '@wordpress/data';
/**
 * Internal dependencies
 */

import { store as blockEditorStore } from '../../store';
import { getDefaultStyle } from '../block-styles/utils';
export default function DefaultStylePicker(_ref) {
  let {
    blockName
  } = _ref;
  const {
    preferredStyle,
    onUpdatePreferredStyleVariations,
    styles
  } = useSelect(select => {
    var _preferredStyleVariat, _preferredStyleVariat2;

    const settings = select(blockEditorStore).getSettings();
    const preferredStyleVariations = settings.__experimentalPreferredStyleVariations;
    return {
      preferredStyle: preferredStyleVariations === null || preferredStyleVariations === void 0 ? void 0 : (_preferredStyleVariat = preferredStyleVariations.value) === null || _preferredStyleVariat === void 0 ? void 0 : _preferredStyleVariat[blockName],
      onUpdatePreferredStyleVariations: (_preferredStyleVariat2 = preferredStyleVariations === null || preferredStyleVariations === void 0 ? void 0 : preferredStyleVariations.onChange) !== null && _preferredStyleVariat2 !== void 0 ? _preferredStyleVariat2 : null,
      styles: select(blocksStore).getBlockStyles(blockName)
    };
  }, [blockName]);
  const selectOptions = useMemo(() => [{
    label: __('Not set'),
    value: ''
  }, ...styles.map(_ref2 => {
    let {
      label,
      name
    } = _ref2;
    return {
      label,
      value: name
    };
  })], [styles]);
  const defaultStyleName = useMemo(() => {
    var _getDefaultStyle;

    return (_getDefaultStyle = getDefaultStyle(styles)) === null || _getDefaultStyle === void 0 ? void 0 : _getDefaultStyle.name;
  }, [styles]);
  const selectOnChange = useCallback(blockStyle => {
    onUpdatePreferredStyleVariations(blockName, blockStyle);
  }, [blockName, onUpdatePreferredStyleVariations]); // Until the functionality is migrated to global styles,
  // only show the default style picker if a non-default style has already been selected.

  if (!preferredStyle || preferredStyle === defaultStyleName) {
    return null;
  }

  return onUpdatePreferredStyleVariations && createElement("div", {
    className: "default-style-picker__default-switcher"
  }, createElement(SelectControl, {
    __nextHasNoMarginBottom: true,
    options: selectOptions,
    value: preferredStyle || '',
    label: __('Default Style'),
    onChange: selectOnChange
  }));
}
//# sourceMappingURL=index.js.map
import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement, Fragment } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { useResizeObserver, pure, useRefEffect } from '@wordpress/compose';
import { useSelect } from '@wordpress/data';
import { useMemo } from '@wordpress/element';
import { Disabled } from '@wordpress/components';
/**
 * Internal dependencies
 */

import BlockList from '../block-list';
import Iframe from '../iframe';
import EditorStyles from '../editor-styles';
import { __unstablePresetDuotoneFilter as PresetDuotoneFilter } from '../../components/duotone';
import { store } from '../../store'; // This is used to avoid rendering the block list if the sizes change.

let MemoizedBlockList;
const MAX_HEIGHT = 2000;

function ScaledBlockPreview(_ref) {
  let {
    viewportWidth,
    containerWidth,
    minHeight,
    additionalStyles = []
  } = _ref;

  if (!viewportWidth) {
    viewportWidth = containerWidth;
  }

  const [contentResizeListener, {
    height: contentHeight
  }] = useResizeObserver();
  const {
    styles,
    duotone
  } = useSelect(select => {
    var _settings$__experimen, _settings$__experimen2;

    const settings = select(store).getSettings();
    return {
      styles: settings.styles,
      duotone: (_settings$__experimen = settings.__experimentalFeatures) === null || _settings$__experimen === void 0 ? void 0 : (_settings$__experimen2 = _settings$__experimen.color) === null || _settings$__experimen2 === void 0 ? void 0 : _settings$__experimen2.duotone
    };
  }, []); // Avoid scrollbars for pattern previews.

  const editorStyles = useMemo(() => {
    if (styles) {
      return [...styles, {
        css: 'body{height:auto;overflow:hidden;border:none;padding:0;}',
        __unstableType: 'presets'
      }, ...additionalStyles];
    }

    return styles;
  }, [styles, additionalStyles]);
  const svgFilters = useMemo(() => {
    var _duotone$default, _duotone$theme;

    return [...((_duotone$default = duotone === null || duotone === void 0 ? void 0 : duotone.default) !== null && _duotone$default !== void 0 ? _duotone$default : []), ...((_duotone$theme = duotone === null || duotone === void 0 ? void 0 : duotone.theme) !== null && _duotone$theme !== void 0 ? _duotone$theme : [])];
  }, [duotone]); // Initialize on render instead of module top level, to avoid circular dependency issues.

  MemoizedBlockList = MemoizedBlockList || pure(BlockList);
  const scale = containerWidth / viewportWidth;
  return createElement(Disabled, {
    className: "block-editor-block-preview__content",
    style: {
      transform: `scale(${scale})`,
      height: contentHeight * scale,
      maxHeight: contentHeight > MAX_HEIGHT ? MAX_HEIGHT * scale : undefined,
      minHeight
    }
  }, createElement(Iframe, {
    head: createElement(EditorStyles, {
      styles: editorStyles
    }),
    contentRef: useRefEffect(bodyElement => {
      const {
        ownerDocument: {
          documentElement
        }
      } = bodyElement;
      documentElement.classList.add('block-editor-block-preview__content-iframe');
      documentElement.style.position = 'absolute';
      documentElement.style.width = '100%'; // Necessary for contentResizeListener to work.

      bodyElement.style.boxSizing = 'border-box';
      bodyElement.style.position = 'absolute';
      bodyElement.style.width = '100%';
    }, []),
    "aria-hidden": true,
    tabIndex: -1,
    style: {
      position: 'absolute',
      width: viewportWidth,
      height: contentHeight,
      pointerEvents: 'none',
      // This is a catch-all max-height for patterns.
      // See: https://github.com/WordPress/gutenberg/pull/38175.
      maxHeight: MAX_HEIGHT,
      minHeight: scale !== 0 && scale < 1 && minHeight ? minHeight / scale : minHeight
    }
  }, contentResizeListener,
  /* Filters need to be rendered before children to avoid Safari rendering issues. */
  svgFilters.map(preset => createElement(PresetDuotoneFilter, {
    preset: preset,
    key: preset.slug
  })), createElement(MemoizedBlockList, {
    renderAppender: false
  })));
}

export default function AutoBlockPreview(props) {
  const [containerResizeListener, {
    width: containerWidth
  }] = useResizeObserver();
  return createElement(Fragment, null, createElement("div", {
    style: {
      position: 'relative',
      width: '100%',
      height: 0
    }
  }, containerResizeListener), createElement("div", {
    className: "block-editor-block-preview__container"
  }, !!containerWidth && createElement(ScaledBlockPreview, _extends({}, props, {
    containerWidth: containerWidth
  }))));
}
//# sourceMappingURL=auto.js.map
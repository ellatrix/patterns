import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { __ } from '@wordpress/i18n';
import { MenuItem } from '@wordpress/components';
import { getBlockType, hasBlockSupport } from '@wordpress/blocks';
import { withSelect, withDispatch } from '@wordpress/data';
import { compose } from '@wordpress/compose';
/**
 * Internal dependencies
 */

import { store as blockEditorStore } from '../../store';

const noop = () => {};

export function BlockModeToggle(_ref) {
  let {
    blockType,
    mode,
    onToggleMode,
    small = false,
    isCodeEditingEnabled = true
  } = _ref;

  if (!blockType || !hasBlockSupport(blockType, 'html', true) || !isCodeEditingEnabled) {
    return null;
  }

  const label = mode === 'visual' ? __('Edit as HTML') : __('Edit visually');
  return createElement(MenuItem, {
    onClick: onToggleMode
  }, !small && label);
}
export default compose([withSelect((select, _ref2) => {
  let {
    clientId
  } = _ref2;
  const {
    getBlock,
    getBlockMode,
    getSettings
  } = select(blockEditorStore);
  const block = getBlock(clientId);
  const isCodeEditingEnabled = getSettings().codeEditingEnabled;
  return {
    mode: getBlockMode(clientId),
    blockType: block ? getBlockType(block.name) : null,
    isCodeEditingEnabled
  };
}), withDispatch((dispatch, _ref3) => {
  let {
    onToggle = noop,
    clientId
  } = _ref3;
  return {
    onToggleMode() {
      dispatch(blockEditorStore).toggleBlockMode(clientId);
      onToggle();
    }

  };
})])(BlockModeToggle);
//# sourceMappingURL=block-mode-toggle.js.map
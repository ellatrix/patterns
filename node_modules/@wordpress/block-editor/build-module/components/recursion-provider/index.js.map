{"version":3,"sources":["@wordpress/block-editor/src/components/recursion-provider/index.js"],"names":["createContext","useContext","useMemo","useBlockEditContext","RenderedRefsContext","addToBlockType","renderedBlocks","blockName","uniqueId","result","Set","add","RecursionProvider","children","previouslyRenderedBlocks","name","newRenderedBlocks","useHasRecursion","Boolean","has"],"mappings":";;AAAA;AACA;AACA;AACA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,OAApC,QAAmD,oBAAnD;AAEA;AACA;AACA;;AACA,SAASC,mBAAT,QAAoC,uBAApC;AAEA,MAAMC,mBAAmB,GAAGJ,aAAa,CAAE,EAAF,CAAzC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASK,cAAT,CAAyBC,cAAzB,EAAyCC,SAAzC,EAAoDC,QAApD,EAA+D;AAC9D,QAAMC,MAAM,GAAG,EACd,GAAGH,cADW;AAEd,KAAEC,SAAF,GAAeD,cAAc,CAAEC,SAAF,CAAd,GACZ,IAAIG,GAAJ,CAASJ,cAAc,CAAEC,SAAF,CAAvB,CADY,GAEZ,IAAIG,GAAJ;AAJW,GAAf;AAMAD,EAAAA,MAAM,CAAEF,SAAF,CAAN,CAAoBI,GAApB,CAAyBH,QAAzB;AAEA,SAAOC,MAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASG,iBAAT,OAAqE;AAAA,MAAzC;AAAEC,IAAAA,QAAF;AAAYL,IAAAA,QAAZ;AAAsBD,IAAAA,SAAS,GAAG;AAAlC,GAAyC;AAC3E,QAAMO,wBAAwB,GAAGb,UAAU,CAAEG,mBAAF,CAA3C;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAWZ,mBAAmB,EAApC;AAEAI,EAAAA,SAAS,GAAGA,SAAS,IAAIQ,IAAzB;AAEA,QAAMC,iBAAiB,GAAGd,OAAO,CAChC,MAAMG,cAAc,CAAES,wBAAF,EAA4BP,SAA5B,EAAuCC,QAAvC,CADY,EAEhC,CAAEM,wBAAF,EAA4BP,SAA5B,EAAuCC,QAAvC,CAFgC,CAAjC;AAKA,SACC,cAAC,mBAAD,CAAqB,QAArB;AAA8B,IAAA,KAAK,EAAGQ;AAAtC,KACGH,QADH,CADD;AAKA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,eAAT,CAA0BT,QAA1B,EAAqD;AAAA;;AAAA,MAAjBD,SAAiB,uEAAL,EAAK;AAC3D,QAAMO,wBAAwB,GAAGb,UAAU,CAAEG,mBAAF,CAA3C;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAWZ,mBAAmB,EAApC;AACAI,EAAAA,SAAS,GAAGA,SAAS,IAAIQ,IAAzB;AACA,SAAOG,OAAO,0BAAEJ,wBAAwB,CAAEP,SAAF,CAA1B,0DAAE,sBAAuCY,GAAvC,CAA4CX,QAA5C,CAAF,CAAd;AACA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { createContext, useContext, useMemo } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport { useBlockEditContext } from '../block-edit/context';\n\nconst RenderedRefsContext = createContext( {} );\n\n/**\n * Immutably adds an unique identifier to a set scoped for a given block type.\n *\n * @param {Object} renderedBlocks Rendered blocks grouped by block name\n * @param {string} blockName      Name of the block.\n * @param {*}      uniqueId       Any value that acts as a unique identifier for a block instance.\n *\n * @return {Object} The list of rendered blocks grouped by block name.\n */\nfunction addToBlockType( renderedBlocks, blockName, uniqueId ) {\n\tconst result = {\n\t\t...renderedBlocks,\n\t\t[ blockName ]: renderedBlocks[ blockName ]\n\t\t\t? new Set( renderedBlocks[ blockName ] )\n\t\t\t: new Set(),\n\t};\n\tresult[ blockName ].add( uniqueId );\n\n\treturn result;\n}\n\n/**\n * A React context provider for use with the `useHasRecursion` hook to prevent recursive\n * renders.\n *\n * Wrap block content with this provider and provide the same `uniqueId` prop as used\n * with `useHasRecursion`.\n *\n * @param {Object}      props\n * @param {*}           props.uniqueId  Any value that acts as a unique identifier for a block instance.\n * @param {string}      props.blockName Optional block name.\n * @param {JSX.Element} props.children  React children.\n *\n * @return {JSX.Element} A React element.\n */\nexport function RecursionProvider( { children, uniqueId, blockName = '' } ) {\n\tconst previouslyRenderedBlocks = useContext( RenderedRefsContext );\n\tconst { name } = useBlockEditContext();\n\n\tblockName = blockName || name;\n\n\tconst newRenderedBlocks = useMemo(\n\t\t() => addToBlockType( previouslyRenderedBlocks, blockName, uniqueId ),\n\t\t[ previouslyRenderedBlocks, blockName, uniqueId ]\n\t);\n\n\treturn (\n\t\t<RenderedRefsContext.Provider value={ newRenderedBlocks }>\n\t\t\t{ children }\n\t\t</RenderedRefsContext.Provider>\n\t);\n}\n\n/**\n * A React hook for keeping track of blocks previously rendered up in the block\n * tree. Blocks susceptible to recursion can use this hook in their `Edit`\n * function to prevent said recursion.\n *\n * Use this with the `RecursionProvider` component, using the same `uniqueId` value\n * for both the hook and the provider.\n *\n * @param {*}      uniqueId  Any value that acts as a unique identifier for a block instance.\n * @param {string} blockName Optional block name.\n *\n * @return {boolean} A boolean describing whether the provided id has already been rendered.\n */\nexport function useHasRecursion( uniqueId, blockName = '' ) {\n\tconst previouslyRenderedBlocks = useContext( RenderedRefsContext );\n\tconst { name } = useBlockEditContext();\n\tblockName = blockName || name;\n\treturn Boolean( previouslyRenderedBlocks[ blockName ]?.has( uniqueId ) );\n}\n"]}
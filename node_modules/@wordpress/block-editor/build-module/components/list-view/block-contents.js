import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { useSelect } from '@wordpress/data';
import { forwardRef } from '@wordpress/element';
/**
 * Internal dependencies
 */

import ListViewBlockSelectButton from './block-select-button';
import BlockDraggable from '../block-draggable';
import { store as blockEditorStore } from '../../store';
const ListViewBlockContents = forwardRef((_ref, ref) => {
  let {
    onClick,
    onToggleExpanded,
    block,
    isSelected,
    position,
    siblingBlockCount,
    level,
    isExpanded,
    selectedClientIds,
    ...props
  } = _ref;
  const {
    clientId
  } = block;
  const {
    blockMovingClientId,
    selectedBlockInBlockEditor
  } = useSelect(select => {
    const {
      hasBlockMovingClientId,
      getSelectedBlockClientId
    } = select(blockEditorStore);
    return {
      blockMovingClientId: hasBlockMovingClientId(),
      selectedBlockInBlockEditor: getSelectedBlockClientId()
    };
  }, [clientId]);
  const isBlockMoveTarget = blockMovingClientId && selectedBlockInBlockEditor === clientId;
  const className = classnames('block-editor-list-view-block-contents', {
    'is-dropping-before': isBlockMoveTarget
  }); // Only include all selected blocks if the currently clicked on block
  // is one of the selected blocks. This ensures that if a user attempts
  // to drag a block that isn't part of the selection, they're still able
  // to drag it and rearrange its position.

  const draggableClientIds = selectedClientIds.includes(clientId) ? selectedClientIds : [clientId];
  return createElement(BlockDraggable, {
    clientIds: draggableClientIds
  }, _ref2 => {
    let {
      draggable,
      onDragStart,
      onDragEnd
    } = _ref2;
    return createElement(ListViewBlockSelectButton, _extends({
      ref: ref,
      className: className,
      block: block,
      onClick: onClick,
      onToggleExpanded: onToggleExpanded,
      isSelected: isSelected,
      position: position,
      siblingBlockCount: siblingBlockCount,
      level: level,
      draggable: draggable,
      onDragStart: onDragStart,
      onDragEnd: onDragEnd,
      isExpanded: isExpanded
    }, props));
  });
});
export default ListViewBlockContents;
//# sourceMappingURL=block-contents.js.map
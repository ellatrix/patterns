import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { createContext, useContext, useMemo } from '@wordpress/element';
/**
 * Internal dependencies
 */

import useSaveImage from './use-save-image';
import useTransformImage from './use-transform-image';
const ImageEditingContext = createContext({});
export const useImageEditingContext = () => useContext(ImageEditingContext);
export default function ImageEditingProvider(_ref) {
  let {
    id,
    url,
    naturalWidth,
    naturalHeight,
    onFinishEditing,
    onSaveImage,
    children
  } = _ref;
  const transformImage = useTransformImage({
    url,
    naturalWidth,
    naturalHeight
  });
  const saveImage = useSaveImage({
    id,
    url,
    onSaveImage,
    onFinishEditing,
    ...transformImage
  });
  const providerValue = useMemo(() => ({ ...transformImage,
    ...saveImage
  }), [transformImage, saveImage]);
  return createElement(ImageEditingContext.Provider, {
    value: providerValue
  }, children);
}
//# sourceMappingURL=context.js.map
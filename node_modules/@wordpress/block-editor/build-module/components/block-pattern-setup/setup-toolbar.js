import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { __ } from '@wordpress/i18n';
import { Button } from '@wordpress/components';
import { chevronRight, chevronLeft, grid, stretchFullWidth } from '@wordpress/icons';
/**
 * Internal dependencies
 */

import { VIEWMODES } from './constants';

const Actions = _ref => {
  let {
    onBlockPatternSelect
  } = _ref;
  return createElement("div", {
    className: "block-editor-block-pattern-setup__actions"
  }, createElement(Button, {
    variant: "primary",
    onClick: onBlockPatternSelect
  }, __('Choose')));
};

const CarouselNavigation = _ref2 => {
  let {
    handlePrevious,
    handleNext,
    activeSlide,
    totalSlides
  } = _ref2;
  return createElement("div", {
    className: "block-editor-block-pattern-setup__navigation"
  }, createElement(Button, {
    icon: chevronLeft,
    label: __('Previous pattern'),
    onClick: handlePrevious,
    disabled: activeSlide === 0
  }), createElement(Button, {
    icon: chevronRight,
    label: __('Next pattern'),
    onClick: handleNext,
    disabled: activeSlide === totalSlides - 1
  }));
};

const SetupToolbar = _ref3 => {
  let {
    viewMode,
    setViewMode,
    handlePrevious,
    handleNext,
    activeSlide,
    totalSlides,
    onBlockPatternSelect
  } = _ref3;
  const isCarouselView = viewMode === VIEWMODES.carousel;
  const displayControls = createElement("div", {
    className: "block-editor-block-pattern-setup__display-controls"
  }, createElement(Button, {
    icon: stretchFullWidth,
    label: __('Carousel view'),
    onClick: () => setViewMode(VIEWMODES.carousel),
    isPressed: isCarouselView
  }), createElement(Button, {
    icon: grid,
    label: __('Grid view'),
    onClick: () => setViewMode(VIEWMODES.grid),
    isPressed: viewMode === VIEWMODES.grid
  }));
  return createElement("div", {
    className: "block-editor-block-pattern-setup__toolbar"
  }, isCarouselView && createElement(CarouselNavigation, {
    handlePrevious: handlePrevious,
    handleNext: handleNext,
    activeSlide: activeSlide,
    totalSlides: totalSlides
  }), displayControls, isCarouselView && createElement(Actions, {
    onBlockPatternSelect: onBlockPatternSelect
  }));
};

export default SetupToolbar;
//# sourceMappingURL=setup-toolbar.js.map
import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { createContext, useContext } from '@wordpress/element';
/**
 * Internal dependencies
 */

import { getLayoutType } from '../../layouts';
import useSetting from '../use-setting';
export const defaultLayout = {
  type: 'default'
};
const Layout = createContext(defaultLayout);
/**
 * Allows to define the layout.
 */

export const LayoutProvider = Layout.Provider;
/**
 * React hook used to retrieve the layout config.
 */

export function useLayout() {
  return useContext(Layout);
}
export function LayoutStyle(_ref) {
  let {
    layout = {},
    css,
    ...props
  } = _ref;
  const layoutType = getLayoutType(layout.type);
  const blockGapSupport = useSetting('spacing.blockGap');
  const hasBlockGapSupport = blockGapSupport !== null;

  if (layoutType) {
    var _layoutType$getLayout;

    if (css) {
      return createElement("style", null, css);
    }

    const layoutStyle = (_layoutType$getLayout = layoutType.getLayoutStyle) === null || _layoutType$getLayout === void 0 ? void 0 : _layoutType$getLayout.call(layoutType, {
      hasBlockGapSupport,
      layout,
      ...props
    });

    if (layoutStyle) {
      return createElement("style", null, layoutStyle);
    }
  }

  return null;
}
//# sourceMappingURL=layout.js.map
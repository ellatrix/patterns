import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { TouchableWithoutFeedback } from 'react-native';
/**
 * WordPress dependencies
 */

import { __, sprintf } from '@wordpress/i18n';
import { useSelect, useDispatch } from '@wordpress/data';
import { createBlock } from '@wordpress/blocks';
/**
 * Internal dependencies
 */

import Warning from '../warning';
import { store as blockEditorStore } from '../../store';
export default function BlockInvalidWarning(_ref) {
  let {
    blockTitle,
    icon,
    clientId
  } = _ref;
  const accessibilityLabel = sprintf(
  /* translators: accessibility text for blocks with invalid content. %d: localized block title */
  __('%s block. This block has invalid content'), blockTitle);

  const selector = select => {
    const {
      getBlock
    } = select(blockEditorStore);
    const block = getBlock(clientId);
    return {
      block
    };
  };

  const {
    block
  } = useSelect(selector, [clientId]);
  const {
    replaceBlock
  } = useDispatch(blockEditorStore);

  const recoverBlock = _ref2 => {
    let {
      name,
      attributes,
      innerBlocks
    } = _ref2;
    return createBlock(name, attributes, innerBlocks);
  };

  const attemptBlockRecovery = () => {
    replaceBlock(block.clientId, recoverBlock(block));
  };

  return createElement(TouchableWithoutFeedback, {
    onPress: attemptBlockRecovery,
    accessible: true,
    accessibilityRole: 'button'
  }, createElement(Warning, {
    title: blockTitle // eslint-disable-next-line @wordpress/i18n-no-collapsible-whitespace
    ,
    message: __('Problem displaying block. \nTap to attempt block recovery.'),
    icon: icon,
    accessibilityLabel: accessibilityLabel
  }));
}
//# sourceMappingURL=block-invalid-warning.native.js.map
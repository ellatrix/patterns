{"version":3,"sources":["@wordpress/block-editor/src/components/block-list/grid-item.native.js"],"names":["View","styles","Grid","props","numOfColumns","children","tileCount","index","maxWidth","lastTile","lastRow","Math","floor","row","rowLength","width","gridItem"],"mappings":";;AAAA;AACA;AACA;AACA,SAASA,IAAT,QAAqB,cAArB;AAEA;AACA;AACA;;AACA,OAAOC,MAAP,MAAmB,wBAAnB;;AAEA,SAASC,IAAT,CAAeC,KAAf,EAAuB;AACtB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA,QAAhB;AAA0BC,IAAAA,SAA1B;AAAqCC,IAAAA,KAArC;AAA4CC,IAAAA;AAA5C,MAAyDL,KAA/D;AACA,QAAMM,QAAQ,GAAGH,SAAS,GAAG,CAA7B;AACA,QAAMI,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAYH,QAAQ,GAAGL,YAAvB,CAAhB;AAEA,QAAMS,GAAG,GAAGF,IAAI,CAACC,KAAL,CAAYL,KAAK,GAAGH,YAApB,CAAZ;AACA,QAAMU,SAAS,GACdD,GAAG,KAAKH,OAAR,GAAoBD,QAAQ,GAAGL,YAAb,GAA8B,CAAhD,GAAoDA,YADrD;AAGA,SACC,cAAC,IAAD;AACC,IAAA,KAAK,EAAG,CACP;AACCW,MAAAA,KAAK,EAAEP,QAAQ,GAAGM;AADnB,KADO,EAIPb,MAAM,CAACe,QAJA;AADT,KAQGX,QARH,CADD;AAYA;;AAED,eAAeH,IAAf","sourcesContent":["/**\n * External dependencies\n */\nimport { View } from 'react-native';\n\n/**\n * Internal dependencies\n */\nimport styles from './block-list-item.scss';\n\nfunction Grid( props ) {\n\t/**\n\t * Since we don't have `calc()`, we must calculate our spacings here in\n\t * order to preserve even spacing between tiles and equal width for tiles\n\t * in a given row.\n\t *\n\t * In order to ensure equal sizing of tile contents, we distribute the\n\t * spacing such that each tile has an equal \"share\" of the fixed spacing. To\n\t * keep the tiles properly aligned within their rows, we calculate the left\n\t * and right paddings based on the tile's relative position within the row.\n\t *\n\t * Note: we use padding instead of margins so that the fixed spacing is\n\t * included within the relative spacing (i.e. width percentage), and\n\t * wrapping behavior is preserved.\n\t *\n\t * - The left most tile in a row must have left padding of zero.\n\t * - The right most tile in a row must have a right padding of zero.\n\t *\n\t * The values of these left and right paddings are interpolated for tiles in\n\t * between. The right padding is complementary with the left padding of the\n\t * next tile (i.e. the right padding of [tile n] + the left padding of\n\t * [tile n + 1] will be equal for all tiles except the last one in a given\n\t * row).\n\t *\n\t */\n\tconst { numOfColumns, children, tileCount, index, maxWidth } = props;\n\tconst lastTile = tileCount - 1;\n\tconst lastRow = Math.floor( lastTile / numOfColumns );\n\n\tconst row = Math.floor( index / numOfColumns );\n\tconst rowLength =\n\t\trow === lastRow ? ( lastTile % numOfColumns ) + 1 : numOfColumns;\n\n\treturn (\n\t\t<View\n\t\t\tstyle={ [\n\t\t\t\t{\n\t\t\t\t\twidth: maxWidth / rowLength,\n\t\t\t\t},\n\t\t\t\tstyles.gridItem,\n\t\t\t] }\n\t\t>\n\t\t\t{ children }\n\t\t</View>\n\t);\n}\n\nexport default Grid;\n"]}
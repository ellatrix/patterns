import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { __experimentalUseSlot as useSlot, __experimentalUseSlotFills as useSlotFills } from '@wordpress/components';
import warning from '@wordpress/warning';
import deprecated from '@wordpress/deprecated';
/**
 * Internal dependencies
 */

import BlockSupportToolsPanel from './block-support-tools-panel';
import BlockSupportSlotContainer from './block-support-slot-container';
import groups from './groups';
export default function InspectorControlsSlot(_ref) {
  var _groups$group;

  let {
    __experimentalGroup,
    group = 'default',
    label,
    ...props
  } = _ref;

  if (__experimentalGroup) {
    deprecated('`__experimentalGroup` property in `InspectorControlsSlot`', {
      since: '6.2',
      version: '6.4',
      alternative: '`group`'
    });
    group = __experimentalGroup;
  }

  const Slot = (_groups$group = groups[group]) === null || _groups$group === void 0 ? void 0 : _groups$group.Slot;
  const slot = useSlot(Slot === null || Slot === void 0 ? void 0 : Slot.__unstableName);
  const fills = useSlotFills(Slot === null || Slot === void 0 ? void 0 : Slot.__unstableName);

  if (!Slot || !slot) {
    typeof process !== "undefined" && process.env && process.env.NODE_ENV !== "production" ? warning(`Unknown InspectorControl group "${group}" provided.`) : void 0;
    return null;
  }

  const hasFills = Boolean(fills && fills.length);

  if (!hasFills) {
    return null;
  }

  if (label) {
    return createElement(BlockSupportToolsPanel, {
      group: group,
      label: label
    }, createElement(BlockSupportSlotContainer, _extends({}, props, {
      Slot: Slot
    })));
  }

  return createElement(Slot, _extends({}, props, {
    bubblesVirtually: true
  }));
}
//# sourceMappingURL=slot.js.map
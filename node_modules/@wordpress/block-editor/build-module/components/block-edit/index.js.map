{"version":3,"sources":["@wordpress/block-editor/src/components/block-edit/index.js"],"names":["useMemo","hasBlockSupport","Edit","BlockEditContextProvider","useBlockEditContext","BlockEdit","props","name","isSelected","clientId","attributes","__unstableLayoutClassNames","layout","layoutSupport","context","Object","values"],"mappings":";;AAAA;AACA;AACA;AACA,SAASA,OAAT,QAAwB,oBAAxB;AAEA,SAASC,eAAT,QAAgC,mBAAhC;AACA;AACA;AACA;;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,wBAAT,EAAmCC,mBAAnC,QAA8D,WAA9D;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,mBAAT;AAEA,eAAe,SAASC,SAAT,CAAoBC,KAApB,EAA4B;AAC1C,QAAM;AACLC,IAAAA,IADK;AAELC,IAAAA,UAFK;AAGLC,IAAAA,QAHK;AAILC,IAAAA,UAAU,GAAG,EAJR;AAKLC,IAAAA;AALK,MAMFL,KANJ;AAOA,QAAM;AAAEM,IAAAA,MAAM,GAAG;AAAX,MAAoBF,UAA1B;AACA,QAAMG,aAAa,GAAGZ,eAAe,CACpCM,IADoC,EAEpC,sBAFoC,EAGpC,KAHoC,CAArC;AAKA,QAAMO,OAAO,GAAG;AACfP,IAAAA,IADe;AAEfC,IAAAA,UAFe;AAGfC,IAAAA,QAHe;AAIfG,IAAAA,MAAM,EAAEC,aAAa,GAAGD,MAAH,GAAY,IAJlB;AAKfD,IAAAA;AALe,GAAhB;AAOA,SACC,cAAC,wBAAD,CACC;AACA;AACA;AAHD;AAIC,IAAA,KAAK,EAAGX,OAAO,CAAE,MAAMc,OAAR,EAAiBC,MAAM,CAACC,MAAP,CAAeF,OAAf,CAAjB;AAJhB,KAMC,cAAC,IAAD,EAAWR,KAAX,CAND,CADD;AAUA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useMemo } from '@wordpress/element';\n\nimport { hasBlockSupport } from '@wordpress/blocks';\n/**\n * Internal dependencies\n */\nimport Edit from './edit';\nimport { BlockEditContextProvider, useBlockEditContext } from './context';\n\n/**\n * The `useBlockEditContext` hook provides information about the block this hook is being used in.\n * It returns an object with the `name`, `isSelected` state, and the `clientId` of the block.\n * It is useful if you want to create custom hooks that need access to the current blocks clientId\n * but don't want to rely on the data getting passed in as a parameter.\n *\n * @return {Object} Block edit context\n */\nexport { useBlockEditContext };\n\nexport default function BlockEdit( props ) {\n\tconst {\n\t\tname,\n\t\tisSelected,\n\t\tclientId,\n\t\tattributes = {},\n\t\t__unstableLayoutClassNames,\n\t} = props;\n\tconst { layout = null } = attributes;\n\tconst layoutSupport = hasBlockSupport(\n\t\tname,\n\t\t'__experimentalLayout',\n\t\tfalse\n\t);\n\tconst context = {\n\t\tname,\n\t\tisSelected,\n\t\tclientId,\n\t\tlayout: layoutSupport ? layout : null,\n\t\t__unstableLayoutClassNames,\n\t};\n\treturn (\n\t\t<BlockEditContextProvider\n\t\t\t// It is important to return the same object if props haven't\n\t\t\t// changed to avoid  unnecessary rerenders.\n\t\t\t// See https://reactjs.org/docs/context.html#caveats.\n\t\t\tvalue={ useMemo( () => context, Object.values( context ) ) }\n\t\t>\n\t\t\t<Edit { ...props } />\n\t\t</BlockEditContextProvider>\n\t);\n}\n"]}
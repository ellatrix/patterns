import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { createSlotFill, MenuGroup, __experimentalStyleProvider as StyleProvider } from '@wordpress/components';
import { useSelect } from '@wordpress/data';
/**
 * Internal dependencies
 */

import { useConvertToGroupButtonProps, ConvertToGroupButton } from '../convert-to-group-buttons';
import { BlockLockMenuItem, useBlockLock } from '../block-lock';
import { store as blockEditorStore } from '../../store';
const {
  Fill,
  Slot
} = createSlotFill('BlockSettingsMenuControls');

const BlockSettingsMenuControlsSlot = _ref => {
  let {
    fillProps,
    clientIds = null,
    __unstableDisplayLocation
  } = _ref;
  const {
    selectedBlocks,
    selectedClientIds,
    canRemove
  } = useSelect(select => {
    const {
      getBlockNamesByClientId,
      getSelectedBlockClientIds,
      canRemoveBlocks
    } = select(blockEditorStore);
    const ids = clientIds !== null ? clientIds : getSelectedBlockClientIds();
    return {
      selectedBlocks: getBlockNamesByClientId(ids),
      selectedClientIds: ids,
      canRemove: canRemoveBlocks(ids)
    };
  }, [clientIds]);
  const {
    canLock
  } = useBlockLock(selectedClientIds[0]);
  const showLockButton = selectedClientIds.length === 1 && canLock; // Check if current selection of blocks is Groupable or Ungroupable
  // and pass this props down to ConvertToGroupButton.

  const convertToGroupButtonProps = useConvertToGroupButtonProps();
  const {
    isGroupable,
    isUngroupable
  } = convertToGroupButtonProps;
  const showConvertToGroupButton = (isGroupable || isUngroupable) && canRemove;
  return createElement(Slot, {
    fillProps: { ...fillProps,
      __unstableDisplayLocation,
      selectedBlocks,
      selectedClientIds
    }
  }, fills => {
    if (!(fills !== null && fills !== void 0 && fills.length) > 0 && !showConvertToGroupButton && !showLockButton) {
      return null;
    }

    return createElement(MenuGroup, null, showLockButton && createElement(BlockLockMenuItem, {
      clientId: selectedClientIds[0]
    }), fills, showConvertToGroupButton && createElement(ConvertToGroupButton, _extends({}, convertToGroupButtonProps, {
      onClose: fillProps === null || fillProps === void 0 ? void 0 : fillProps.onClose
    })));
  });
};
/**
 * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/block-settings-menu-controls/README.md
 *
 * @param {Object} props Fill props.
 * @return {WPElement} Element.
 */


function BlockSettingsMenuControls(_ref2) {
  let { ...props
  } = _ref2;
  return createElement(StyleProvider, {
    document: document
  }, createElement(Fill, props));
}

BlockSettingsMenuControls.Slot = BlockSettingsMenuControlsSlot;
export default BlockSettingsMenuControls;
//# sourceMappingURL=index.js.map
{"version":3,"sources":["@wordpress/block-editor/src/components/use-paste-styles/index.js"],"names":["useCallback","getBlockType","parse","useDispatch","useRegistry","store","noticesStore","__","sprintf","blockEditorStore","hasAlignSupport","hasBorderSupport","hasBackgroundColorSupport","hasTextColorSupport","hasGradientSupport","hasCustomClassNameSupport","hasFontFamilySupport","hasFontSizeSupport","hasLayoutSupport","hasStyleSupport","hasSerializedBlocks","text","blocks","__unstableSkipMigrationLogs","__unstableSkipAutop","length","name","err","STYLE_ATTRIBUTES","align","borderColor","nameOrType","backgroundColor","textColor","gradient","className","fontFamily","fontSize","layout","style","getStyleAttributes","sourceBlock","targetBlock","Object","entries","reduce","attributes","attributeKey","hasSupport","recursivelyUpdateBlockAttributes","targetBlocks","sourceBlocks","updateBlockAttributes","index","Math","min","clientId","innerBlocks","usePasteStyles","registry","createSuccessNotice","createWarningNotice","createErrorNotice","html","window","navigator","clipboard","type","readText","error","copiedBlocks","batch","map","title"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useCallback } from '@wordpress/element';\nimport { getBlockType, parse } from '@wordpress/blocks';\nimport { useDispatch, useRegistry } from '@wordpress/data';\nimport { store as noticesStore } from '@wordpress/notices';\nimport { __, sprintf } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport { store as blockEditorStore } from '../../store';\nimport {\n\thasAlignSupport,\n\thasBorderSupport,\n\thasBackgroundColorSupport,\n\thasTextColorSupport,\n\thasGradientSupport,\n\thasCustomClassNameSupport,\n\thasFontFamilySupport,\n\thasFontSizeSupport,\n\thasLayoutSupport,\n\thasStyleSupport,\n} from '../../hooks/supports';\n\n/**\n * Determine if the copied text looks like serialized blocks or not.\n * Since plain text will always get parsed into a freeform block,\n * we check that if the parsed blocks is anything other than that.\n *\n * @param {string} text The copied text.\n * @return {boolean} True if the text looks like serialized blocks, false otherwise.\n */\nfunction hasSerializedBlocks( text ) {\n\ttry {\n\t\tconst blocks = parse( text, {\n\t\t\t__unstableSkipMigrationLogs: true,\n\t\t\t__unstableSkipAutop: true,\n\t\t} );\n\t\tif ( blocks.length === 1 && blocks[ 0 ].name === 'core/freeform' ) {\n\t\t\t// It's likely that the text is just plain text and not serialized blocks.\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t} catch ( err ) {\n\t\t// Parsing error, the text is not serialized blocks.\n\t\t// (Even though that it technically won't happen)\n\t\treturn false;\n\t}\n}\n\n/**\n * Style attributes are attributes being added in `block-editor/src/hooks/*`.\n * (Except for some unrelated to style like `anchor` or `settings`.)\n * They generally represent the default block supports.\n */\nconst STYLE_ATTRIBUTES = {\n\talign: hasAlignSupport,\n\tborderColor: ( nameOrType ) => hasBorderSupport( nameOrType, 'color' ),\n\tbackgroundColor: hasBackgroundColorSupport,\n\ttextColor: hasTextColorSupport,\n\tgradient: hasGradientSupport,\n\tclassName: hasCustomClassNameSupport,\n\tfontFamily: hasFontFamilySupport,\n\tfontSize: hasFontSizeSupport,\n\tlayout: hasLayoutSupport,\n\tstyle: hasStyleSupport,\n};\n\n/**\n * Get the \"style attributes\" from a given block to a target block.\n *\n * @param {WPBlock} sourceBlock The source block.\n * @param {WPBlock} targetBlock The target block.\n * @return {Object} the filtered attributes object.\n */\nfunction getStyleAttributes( sourceBlock, targetBlock ) {\n\treturn Object.entries( STYLE_ATTRIBUTES ).reduce(\n\t\t( attributes, [ attributeKey, hasSupport ] ) => {\n\t\t\t// Only apply the attribute if both blocks support it.\n\t\t\tif (\n\t\t\t\thasSupport( sourceBlock.name ) &&\n\t\t\t\thasSupport( targetBlock.name )\n\t\t\t) {\n\t\t\t\t// Override attributes that are not present in the block to their defaults.\n\t\t\t\tattributes[ attributeKey ] =\n\t\t\t\t\tsourceBlock.attributes[ attributeKey ];\n\t\t\t}\n\t\t\treturn attributes;\n\t\t},\n\t\t{}\n\t);\n}\n\n/**\n * Update the target blocks with style attributes recursively.\n *\n * @param {WPBlock[]} targetBlocks          The target blocks to be updated.\n * @param {WPBlock[]} sourceBlocks          The source blocks to get th style attributes from.\n * @param {Function}  updateBlockAttributes The function to update the attributes.\n */\nfunction recursivelyUpdateBlockAttributes(\n\ttargetBlocks,\n\tsourceBlocks,\n\tupdateBlockAttributes\n) {\n\tfor (\n\t\tlet index = 0;\n\t\tindex < Math.min( sourceBlocks.length, targetBlocks.length );\n\t\tindex += 1\n\t) {\n\t\tupdateBlockAttributes(\n\t\t\ttargetBlocks[ index ].clientId,\n\t\t\tgetStyleAttributes( sourceBlocks[ index ], targetBlocks[ index ] )\n\t\t);\n\n\t\trecursivelyUpdateBlockAttributes(\n\t\t\ttargetBlocks[ index ].innerBlocks,\n\t\t\tsourceBlocks[ index ].innerBlocks,\n\t\t\tupdateBlockAttributes\n\t\t);\n\t}\n}\n\n/**\n * A hook to return a pasteStyles event function for handling pasting styles to blocks.\n *\n * @return {Function} A function to update the styles to the blocks.\n */\nexport default function usePasteStyles() {\n\tconst registry = useRegistry();\n\tconst { updateBlockAttributes } = useDispatch( blockEditorStore );\n\tconst { createSuccessNotice, createWarningNotice, createErrorNotice } =\n\t\tuseDispatch( noticesStore );\n\n\treturn useCallback(\n\t\tasync ( targetBlocks ) => {\n\t\t\tlet html = '';\n\t\t\ttry {\n\t\t\t\t// `http:` sites won't have the clipboard property on navigator.\n\t\t\t\t// (with the exception of localhost.)\n\t\t\t\tif ( ! window.navigator.clipboard ) {\n\t\t\t\t\tcreateErrorNotice(\n\t\t\t\t\t\t__(\n\t\t\t\t\t\t\t'Unable to paste styles. This feature is only available on secure (https) sites in supporting browsers.'\n\t\t\t\t\t\t),\n\t\t\t\t\t\t{ type: 'snackbar' }\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\thtml = await window.navigator.clipboard.readText();\n\t\t\t} catch ( error ) {\n\t\t\t\t// Possibly the permission is denied.\n\t\t\t\tcreateErrorNotice(\n\t\t\t\t\t__(\n\t\t\t\t\t\t'Unable to paste styles. Please allow browser clipboard permissions before continuing.'\n\t\t\t\t\t),\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'snackbar',\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Abort if the copied text is empty or doesn't look like serialized blocks.\n\t\t\tif ( ! html || ! hasSerializedBlocks( html ) ) {\n\t\t\t\tcreateWarningNotice(\n\t\t\t\t\t__(\n\t\t\t\t\t\t\"Unable to paste styles. Block styles couldn't be found within the copied content.\"\n\t\t\t\t\t),\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'snackbar',\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst copiedBlocks = parse( html );\n\n\t\t\tif ( copiedBlocks.length === 1 ) {\n\t\t\t\t// Apply styles of the block to all the target blocks.\n\t\t\t\tregistry.batch( () => {\n\t\t\t\t\trecursivelyUpdateBlockAttributes(\n\t\t\t\t\t\ttargetBlocks,\n\t\t\t\t\t\ttargetBlocks.map( () => copiedBlocks[ 0 ] ),\n\t\t\t\t\t\tupdateBlockAttributes\n\t\t\t\t\t);\n\t\t\t\t} );\n\t\t\t} else {\n\t\t\t\tregistry.batch( () => {\n\t\t\t\t\trecursivelyUpdateBlockAttributes(\n\t\t\t\t\t\ttargetBlocks,\n\t\t\t\t\t\tcopiedBlocks,\n\t\t\t\t\t\tupdateBlockAttributes\n\t\t\t\t\t);\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tif ( targetBlocks.length === 1 ) {\n\t\t\t\tconst title = getBlockType( targetBlocks[ 0 ].name )?.title;\n\t\t\t\tcreateSuccessNotice(\n\t\t\t\t\tsprintf(\n\t\t\t\t\t\t// Translators: Name of the block being pasted, e.g. \"Paragraph\".\n\t\t\t\t\t\t__( 'Pasted styles to %s.' ),\n\t\t\t\t\t\ttitle\n\t\t\t\t\t),\n\t\t\t\t\t{ type: 'snackbar' }\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tcreateSuccessNotice(\n\t\t\t\t\tsprintf(\n\t\t\t\t\t\t// Translators: The number of the blocks.\n\t\t\t\t\t\t__( 'Pasted styles to %d blocks.' ),\n\t\t\t\t\t\ttargetBlocks.length\n\t\t\t\t\t),\n\t\t\t\t\t{ type: 'snackbar' }\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t\t[\n\t\t\tregistry.batch,\n\t\t\tupdateBlockAttributes,\n\t\t\tcreateSuccessNotice,\n\t\t\tcreateWarningNotice,\n\t\t\tcreateErrorNotice,\n\t\t]\n\t);\n}\n"]}
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { Icon } from '@wordpress/components';
import { blockDefault } from '@wordpress/icons';
import { memo } from '@wordpress/element';

function BlockIcon(_ref) {
  var _icon;

  let {
    icon,
    showColors = false,
    className,
    context
  } = _ref;

  if (((_icon = icon) === null || _icon === void 0 ? void 0 : _icon.src) === 'block-default') {
    icon = {
      src: blockDefault
    };
  }

  const renderedIcon = createElement(Icon, {
    icon: icon && icon.src ? icon.src : icon,
    context: context
  });
  const style = showColors ? {
    backgroundColor: icon && icon.background,
    color: icon && icon.foreground
  } : {};
  return createElement("span", {
    style: style,
    className: classnames('block-editor-block-icon', className, {
      'has-colors': showColors
    })
  }, renderedIcon);
}
/**
 * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/block-icon/README.md
 */


export default memo(BlockIcon);
//# sourceMappingURL=index.js.map
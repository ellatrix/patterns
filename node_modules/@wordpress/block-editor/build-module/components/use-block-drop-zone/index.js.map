{"version":3,"sources":["@wordpress/block-editor/src/components/use-block-drop-zone/index.js"],"names":["useDispatch","useSelect","useCallback","useState","useThrottle","__experimentalUseDropZone","useDropZone","isRTL","isUnmodifiedDefaultBlock","getIsUnmodifiedDefaultBlock","useOnBlockDrop","getDistanceToNearestEdge","isPointContainedByRect","store","blockEditorStore","getDropTargetPosition","blocksData","position","orientation","allowedEdges","isRightToLeft","nearestIndex","insertPosition","minDistance","Infinity","forEach","getBoundingClientRect","blockIndex","rect","distance","edge","adjacentIndex","isNearestBlockUnmodifiedDefaultBlock","isAdjacentBlockUnmodifiedDefaultBlock","insertionIndex","useBlockDropZone","rootClientId","targetRootClientId","dropTarget","setDropTarget","index","operation","isDisabled","select","getTemplateLock","__unstableIsWithinBlockOverlay","__unstableHasActiveBlockOverlayActive","templateLock","some","lock","getBlockListSettings","getBlocks","getBlockIndex","showInsertionPoint","hideInsertionPoint","onBlockDrop","throttled","event","ownerDocument","blocks","length","map","block","clientId","getElementById","targetIndex","x","clientX","y","clientY","onDrop","onDragOver","currentTarget","onDragLeave","cancel","onDragEnd"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useDispatch, useSelect } from '@wordpress/data';\nimport { useCallback, useState } from '@wordpress/element';\nimport {\n\tuseThrottle,\n\t__experimentalUseDropZone as useDropZone,\n} from '@wordpress/compose';\nimport { isRTL } from '@wordpress/i18n';\nimport { isUnmodifiedDefaultBlock as getIsUnmodifiedDefaultBlock } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport useOnBlockDrop from '../use-on-block-drop';\nimport {\n\tgetDistanceToNearestEdge,\n\tisPointContainedByRect,\n} from '../../utils/math';\nimport { store as blockEditorStore } from '../../store';\n\n/** @typedef {import('../../utils/math').WPPoint} WPPoint */\n/** @typedef {import('../use-on-block-drop/types').WPDropOperation} WPDropOperation */\n\n/**\n * The orientation of a block list.\n *\n * @typedef {'horizontal'|'vertical'|undefined} WPBlockListOrientation\n */\n\n/**\n * The insert position when dropping a block.\n *\n * @typedef {'before'|'after'} WPInsertPosition\n */\n\n/**\n * @typedef {Object} WPBlockData\n * @property {boolean}       isUnmodifiedDefaultBlock Is the block unmodified default block.\n * @property {() => DOMRect} getBoundingClientRect    Get the bounding client rect of the block.\n * @property {number}        blockIndex               The index of the block.\n */\n\n/**\n * Get the drop target position from a given drop point and the orientation.\n *\n * @param {WPBlockData[]}          blocksData  The block data list.\n * @param {WPPoint}                position    The position of the item being dragged.\n * @param {WPBlockListOrientation} orientation The orientation of the block list.\n * @return {[number, WPDropOperation]} The drop target position.\n */\nexport function getDropTargetPosition(\n\tblocksData,\n\tposition,\n\torientation = 'vertical'\n) {\n\tconst allowedEdges =\n\t\torientation === 'horizontal'\n\t\t\t? [ 'left', 'right' ]\n\t\t\t: [ 'top', 'bottom' ];\n\n\tconst isRightToLeft = isRTL();\n\n\tlet nearestIndex = 0;\n\tlet insertPosition = 'before';\n\tlet minDistance = Infinity;\n\n\tblocksData.forEach(\n\t\t( { isUnmodifiedDefaultBlock, getBoundingClientRect, blockIndex } ) => {\n\t\t\tconst rect = getBoundingClientRect();\n\n\t\t\tlet [ distance, edge ] = getDistanceToNearestEdge(\n\t\t\t\tposition,\n\t\t\t\trect,\n\t\t\t\tallowedEdges\n\t\t\t);\n\t\t\t// Prioritize the element if the point is inside of an unmodified default block.\n\t\t\tif (\n\t\t\t\tisUnmodifiedDefaultBlock &&\n\t\t\t\tisPointContainedByRect( position, rect )\n\t\t\t) {\n\t\t\t\tdistance = 0;\n\t\t\t}\n\n\t\t\tif ( distance < minDistance ) {\n\t\t\t\t// Where the dropped block will be inserted on the nearest block.\n\t\t\t\tinsertPosition =\n\t\t\t\t\tedge === 'bottom' ||\n\t\t\t\t\t( ! isRightToLeft && edge === 'right' ) ||\n\t\t\t\t\t( isRightToLeft && edge === 'left' )\n\t\t\t\t\t\t? 'after'\n\t\t\t\t\t\t: 'before';\n\n\t\t\t\t// Update the currently known best candidate.\n\t\t\t\tminDistance = distance;\n\t\t\t\tnearestIndex = blockIndex;\n\t\t\t}\n\t\t}\n\t);\n\n\tconst adjacentIndex =\n\t\tnearestIndex + ( insertPosition === 'after' ? 1 : -1 );\n\tconst isNearestBlockUnmodifiedDefaultBlock =\n\t\t!! blocksData[ nearestIndex ]?.isUnmodifiedDefaultBlock;\n\tconst isAdjacentBlockUnmodifiedDefaultBlock =\n\t\t!! blocksData[ adjacentIndex ]?.isUnmodifiedDefaultBlock;\n\n\t// If both blocks are not unmodified default blocks then just insert between them.\n\tif (\n\t\t! isNearestBlockUnmodifiedDefaultBlock &&\n\t\t! isAdjacentBlockUnmodifiedDefaultBlock\n\t) {\n\t\t// If the user is dropping to the trailing edge of the block\n\t\t// add 1 to the index to represent dragging after.\n\t\tconst insertionIndex =\n\t\t\tinsertPosition === 'after' ? nearestIndex + 1 : nearestIndex;\n\t\treturn [ insertionIndex, 'insert' ];\n\t}\n\n\t// Otherwise, replace the nearest unmodified default block.\n\treturn [\n\t\tisNearestBlockUnmodifiedDefaultBlock ? nearestIndex : adjacentIndex,\n\t\t'replace',\n\t];\n}\n\n/**\n * @typedef  {Object} WPBlockDropZoneConfig\n * @property {string} rootClientId The root client id for the block list.\n */\n\n/**\n * A React hook that can be used to make a block list handle drag and drop.\n *\n * @param {WPBlockDropZoneConfig} dropZoneConfig configuration data for the drop zone.\n */\nexport default function useBlockDropZone( {\n\t// An undefined value represents a top-level block. Default to an empty\n\t// string for this so that `targetRootClientId` can be easily compared to\n\t// values returned by the `getRootBlockClientId` selector, which also uses\n\t// an empty string to represent top-level blocks.\n\trootClientId: targetRootClientId = '',\n} = {} ) {\n\tconst [ dropTarget, setDropTarget ] = useState( {\n\t\tindex: null,\n\t\toperation: 'insert',\n\t} );\n\n\tconst isDisabled = useSelect(\n\t\t( select ) => {\n\t\t\tconst {\n\t\t\t\tgetTemplateLock,\n\t\t\t\t__unstableIsWithinBlockOverlay,\n\t\t\t\t__unstableHasActiveBlockOverlayActive,\n\t\t\t} = select( blockEditorStore );\n\t\t\tconst templateLock = getTemplateLock( targetRootClientId );\n\t\t\treturn (\n\t\t\t\t[ 'all', 'contentOnly' ].some(\n\t\t\t\t\t( lock ) => lock === templateLock\n\t\t\t\t) ||\n\t\t\t\t__unstableHasActiveBlockOverlayActive( targetRootClientId ) ||\n\t\t\t\t__unstableIsWithinBlockOverlay( targetRootClientId )\n\t\t\t);\n\t\t},\n\t\t[ targetRootClientId ]\n\t);\n\n\tconst { getBlockListSettings, getBlocks, getBlockIndex } =\n\t\tuseSelect( blockEditorStore );\n\tconst { showInsertionPoint, hideInsertionPoint } =\n\t\tuseDispatch( blockEditorStore );\n\n\tconst onBlockDrop = useOnBlockDrop( targetRootClientId, dropTarget.index, {\n\t\toperation: dropTarget.operation,\n\t} );\n\tconst throttled = useThrottle(\n\t\tuseCallback(\n\t\t\t( event, ownerDocument ) => {\n\t\t\t\tconst blocks = getBlocks( targetRootClientId );\n\n\t\t\t\t// The block list is empty, don't show the insertion point but still allow dropping.\n\t\t\t\tif ( blocks.length === 0 ) {\n\t\t\t\t\tsetDropTarget( {\n\t\t\t\t\t\tindex: 0,\n\t\t\t\t\t\toperation: 'insert',\n\t\t\t\t\t} );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst blocksData = blocks.map( ( block ) => {\n\t\t\t\t\tconst clientId = block.clientId;\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tisUnmodifiedDefaultBlock:\n\t\t\t\t\t\t\tgetIsUnmodifiedDefaultBlock( block ),\n\t\t\t\t\t\tgetBoundingClientRect: () =>\n\t\t\t\t\t\t\townerDocument\n\t\t\t\t\t\t\t\t.getElementById( `block-${ clientId }` )\n\t\t\t\t\t\t\t\t.getBoundingClientRect(),\n\t\t\t\t\t\tblockIndex: getBlockIndex( clientId ),\n\t\t\t\t\t};\n\t\t\t\t} );\n\n\t\t\t\tconst [ targetIndex, operation ] = getDropTargetPosition(\n\t\t\t\t\tblocksData,\n\t\t\t\t\t{ x: event.clientX, y: event.clientY },\n\t\t\t\t\tgetBlockListSettings( targetRootClientId )?.orientation\n\t\t\t\t);\n\n\t\t\t\tsetDropTarget( {\n\t\t\t\t\tindex: targetIndex,\n\t\t\t\t\toperation,\n\t\t\t\t} );\n\t\t\t\tshowInsertionPoint( targetRootClientId, targetIndex, {\n\t\t\t\t\toperation,\n\t\t\t\t} );\n\t\t\t},\n\t\t\t[ targetRootClientId ]\n\t\t),\n\t\t200\n\t);\n\n\treturn useDropZone( {\n\t\tisDisabled,\n\t\tonDrop: onBlockDrop,\n\t\tonDragOver( event ) {\n\t\t\t// `currentTarget` is only available while the event is being\n\t\t\t// handled, so get it now and pass it to the thottled function.\n\t\t\t// https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget\n\t\t\tthrottled( event, event.currentTarget.ownerDocument );\n\t\t},\n\t\tonDragLeave() {\n\t\t\tthrottled.cancel();\n\t\t\thideInsertionPoint();\n\t\t},\n\t\tonDragEnd() {\n\t\t\tthrottled.cancel();\n\t\t\thideInsertionPoint();\n\t\t},\n\t} );\n}\n"]}
import { createElement } from "@wordpress/element";
// Note: this file is copied directly from packages/block-library/src/navigation-link/link-ui.js

/**
 * WordPress dependencies
 */
import { __unstableStripHTML as stripHTML } from '@wordpress/dom';
import { Popover, Button } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { switchToBlockType } from '@wordpress/blocks';
import { useSelect, useDispatch } from '@wordpress/data';
/**
 * Internal dependencies
 */

import { store as blockEditorStore } from '../../store';
import LinkControl from '../link-control';
import BlockIcon from '../block-icon';
/**
 * Given the Link block's type attribute, return the query params to give to
 * /wp/v2/search.
 *
 * @param {string} type Link block's type attribute.
 * @param {string} kind Link block's entity of kind (post-type|taxonomy)
 * @return {{ type?: string, subtype?: string }} Search query params.
 */

export function getSuggestionsQuery(type, kind) {
  switch (type) {
    case 'post':
    case 'page':
      return {
        type: 'post',
        subtype: type
      };

    case 'category':
      return {
        type: 'term',
        subtype: 'category'
      };

    case 'tag':
      return {
        type: 'term',
        subtype: 'post_tag'
      };

    case 'post_format':
      return {
        type: 'post-format'
      };

    default:
      if (kind === 'taxonomy') {
        return {
          type: 'term',
          subtype: type
        };
      }

      if (kind === 'post-type') {
        return {
          type: 'post',
          subtype: type
        };
      }

      return {};
  }
}
/**
 * Add transforms to Link Control
 *
 * @param {Object} props          Component props.
 * @param {string} props.clientId Block client ID.
 */

function LinkControlTransforms(_ref) {
  let {
    clientId
  } = _ref;
  const {
    getBlock,
    blockTransforms
  } = useSelect(select => {
    const {
      getBlock: _getBlock,
      getBlockRootClientId,
      getBlockTransformItems
    } = select(blockEditorStore);
    return {
      getBlock: _getBlock,
      blockTransforms: getBlockTransformItems(_getBlock(clientId), getBlockRootClientId(clientId))
    };
  }, [clientId]);
  const {
    replaceBlock
  } = useDispatch(blockEditorStore);
  const featuredBlocks = ['core/page-list', 'core/site-logo', 'core/social-links', 'core/search'];
  const transforms = blockTransforms.filter(item => {
    return featuredBlocks.includes(item.name);
  });

  if (!(transforms !== null && transforms !== void 0 && transforms.length)) {
    return null;
  }

  if (!clientId) {
    return null;
  }

  return createElement("div", {
    className: "link-control-transform"
  }, createElement("h3", {
    className: "link-control-transform__subheading"
  }, __('Transform')), createElement("div", {
    className: "link-control-transform__items"
  }, transforms.map(item => {
    return createElement(Button, {
      key: `transform-${item.name}`,
      onClick: () => replaceBlock(clientId, switchToBlockType(getBlock(clientId), item.name)),
      className: "link-control-transform__item"
    }, createElement(BlockIcon, {
      icon: item.icon
    }), item.title);
  })));
}

export function LinkUI(props) {
  const {
    label,
    url,
    opensInNewTab,
    type,
    kind
  } = props.link;
  const link = {
    url,
    opensInNewTab,
    title: label && stripHTML(label)
  };
  return createElement(Popover, {
    placement: "bottom",
    onClose: props.onClose,
    anchor: props.anchor,
    __unstableSlotName: '__unstable-block-tools-after',
    shift: true
  }, createElement(LinkControl, {
    hasTextControl: true,
    hasRichPreviews: true,
    className: props.className,
    value: link,
    showInitialSuggestions: true,
    withCreateSuggestion: props.hasCreateSuggestion,
    noDirectEntry: !!type,
    noURLSuggestion: !!type,
    suggestionsQuery: getSuggestionsQuery(type, kind),
    onChange: props.onChange,
    onRemove: props.onRemove,
    onCancel: props.onCancel,
    renderControlBottom: !url ? () => createElement(LinkControlTransforms, {
      clientId: props.clientId
    }) : null
  }));
}
//# sourceMappingURL=link-ui.js.map
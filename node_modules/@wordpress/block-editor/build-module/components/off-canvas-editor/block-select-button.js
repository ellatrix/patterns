import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { Button, __experimentalHStack as HStack, __experimentalTruncate as Truncate } from '@wordpress/components';
import { forwardRef } from '@wordpress/element';
import { Icon, lockSmall as lock } from '@wordpress/icons';
import { SPACE, ENTER } from '@wordpress/keycodes';
import { sprintf, __ } from '@wordpress/i18n';
/**
 * Internal dependencies
 */

import BlockIcon from '../block-icon';
import useBlockDisplayInformation from '../use-block-display-information';
import useBlockDisplayTitle from '../block-title/use-block-display-title';
import ListViewExpander from './expander';
import { useBlockLock } from '../block-lock';

function ListViewBlockSelectButton(_ref, ref) {
  let {
    className,
    block,
    onClick,
    onToggleExpanded,
    tabIndex,
    onFocus,
    onDragStart,
    onDragEnd,
    draggable
  } = _ref;
  const {
    clientId
  } = block;
  const blockInformation = useBlockDisplayInformation(clientId);
  const blockTitle = useBlockDisplayTitle({
    clientId,
    context: 'list-view'
  });
  const {
    isLocked
  } = useBlockLock(clientId); // The `href` attribute triggers the browser's native HTML drag operations.
  // When the link is dragged, the element's outerHTML is set in DataTransfer object as text/html.
  // We need to clear any HTML drag data to prevent `pasteHandler` from firing
  // inside the `useOnBlockDrop` hook.

  const onDragStartHandler = event => {
    event.dataTransfer.clearData();
    onDragStart === null || onDragStart === void 0 ? void 0 : onDragStart(event);
  };

  function onKeyDownHandler(event) {
    if (event.keyCode === ENTER || event.keyCode === SPACE) {
      onClick(event);
    }
  }

  const editAriaLabel = blockInformation ? sprintf( // translators: %s: The title of the block.
  __('Edit %s block'), blockInformation.title) : __('Edit');
  return createElement(Fragment, null, createElement(Button, {
    className: classnames('block-editor-list-view-block-select-button', className),
    onClick: onClick,
    onKeyDown: onKeyDownHandler,
    ref: ref,
    tabIndex: tabIndex,
    onFocus: onFocus,
    onDragStart: onDragStartHandler,
    onDragEnd: onDragEnd,
    draggable: draggable,
    href: `#block-${clientId}`,
    "aria-hidden": true,
    title: editAriaLabel
  }, createElement(ListViewExpander, {
    onClick: onToggleExpanded
  }), createElement(BlockIcon, {
    icon: blockInformation === null || blockInformation === void 0 ? void 0 : blockInformation.icon,
    showColors: true,
    context: "list-view"
  }), createElement(HStack, {
    alignment: "center",
    className: "block-editor-list-view-block-select-button__label-wrapper",
    justify: "flex-start",
    spacing: 1
  }, createElement("span", {
    className: "block-editor-list-view-block-select-button__title"
  }, createElement(Truncate, {
    ellipsizeMode: "auto"
  }, blockTitle)), (blockInformation === null || blockInformation === void 0 ? void 0 : blockInformation.anchor) && createElement("span", {
    className: "block-editor-list-view-block-select-button__anchor-wrapper"
  }, createElement(Truncate, {
    className: "block-editor-list-view-block-select-button__anchor",
    ellipsizeMode: "auto"
  }, blockInformation.anchor)), isLocked && createElement("span", {
    className: "block-editor-list-view-block-select-button__lock"
  }, createElement(Icon, {
    icon: lock
  })))));
}

export default forwardRef(ListViewBlockSelectButton);
//# sourceMappingURL=block-select-button.js.map
import { createElement, Fragment } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { useRef } from '@wordpress/element';
import { __ } from '@wordpress/i18n';
import { speak } from '@wordpress/a11y';
import { FormFileUpload, NavigableMenu, MenuItem, ToolbarButton, Dropdown, withFilters, Tooltip } from '@wordpress/components';
import { useSelect, withDispatch } from '@wordpress/data';
import { DOWN } from '@wordpress/keycodes';
import { postFeaturedImage, upload, media as mediaIcon } from '@wordpress/icons';
import { compose } from '@wordpress/compose';
import { __unstableStripHTML as stripHTML } from '@wordpress/dom';
import { store as noticesStore } from '@wordpress/notices';
/**
 * Internal dependencies
 */

import MediaUpload from '../media-upload';
import MediaUploadCheck from '../media-upload/check';
import LinkControl from '../link-control';
import { store as blockEditorStore } from '../../store';

const noop = () => {};

let uniqueId = 0;

const MediaReplaceFlow = _ref => {
  let {
    mediaURL,
    mediaId,
    mediaIds,
    allowedTypes,
    accept,
    onError,
    onSelect,
    onSelectURL,
    onToggleFeaturedImage,
    useFeaturedImage,
    onFilesUpload = noop,
    name = __('Replace'),
    createNotice,
    removeNotice,
    children,
    multiple = false,
    addToGallery,
    handleUpload = true
  } = _ref;
  const mediaUpload = useSelect(select => {
    return select(blockEditorStore).getSettings().mediaUpload;
  }, []);
  const editMediaButtonRef = useRef();
  const errorNoticeID = `block-editor/media-replace-flow/error-notice/${++uniqueId}`;

  const onUploadError = message => {
    const safeMessage = stripHTML(message);

    if (onError) {
      onError(safeMessage);
      return;
    } // We need to set a timeout for showing the notice
    // so that VoiceOver and possibly other screen readers
    // can announce the error afer the toolbar button
    // regains focus once the upload dialog closes.
    // Otherwise VO simply skips over the notice and announces
    // the focused element and the open menu.


    setTimeout(() => {
      createNotice('error', safeMessage, {
        speak: true,
        id: errorNoticeID,
        isDismissible: true
      });
    }, 1000);
  };

  const selectMedia = (media, closeMenu) => {
    if (useFeaturedImage && onToggleFeaturedImage) {
      onToggleFeaturedImage();
    }

    closeMenu(); // Calling `onSelect` after the state update since it might unmount the component.

    onSelect(media);
    speak(__('The media file has been replaced'));
    removeNotice(errorNoticeID);
  };

  const uploadFiles = (event, closeMenu) => {
    const files = event.target.files;

    if (!handleUpload) {
      closeMenu();
      return onSelect(files);
    }

    onFilesUpload(files);
    mediaUpload({
      allowedTypes,
      filesList: files,
      onFileChange: _ref2 => {
        let [media] = _ref2;
        selectMedia(media, closeMenu);
      },
      onError: onUploadError
    });
  };

  const openOnArrowDown = event => {
    if (event.keyCode === DOWN) {
      event.preventDefault();
      event.target.click();
    }
  };

  const onlyAllowsImages = () => {
    if (!allowedTypes || allowedTypes.length === 0) {
      return false;
    }

    return allowedTypes.every(allowedType => allowedType === 'image' || allowedType.startsWith('image/'));
  };

  const gallery = multiple && onlyAllowsImages();
  const POPOVER_PROPS = {
    variant: 'toolbar'
  };
  return createElement(Dropdown, {
    popoverProps: POPOVER_PROPS,
    contentClassName: "block-editor-media-replace-flow__options",
    renderToggle: _ref3 => {
      let {
        isOpen,
        onToggle
      } = _ref3;
      return createElement(ToolbarButton, {
        ref: editMediaButtonRef,
        "aria-expanded": isOpen,
        "aria-haspopup": "true",
        onClick: onToggle,
        onKeyDown: openOnArrowDown
      }, name);
    },
    renderContent: _ref4 => {
      let {
        onClose
      } = _ref4;
      return createElement(Fragment, null, createElement(NavigableMenu, {
        className: "block-editor-media-replace-flow__media-upload-menu"
      }, createElement(Fragment, null, createElement(MediaUpload, {
        gallery: gallery,
        addToGallery: addToGallery,
        multiple: multiple,
        value: multiple ? mediaIds : mediaId,
        onSelect: media => selectMedia(media, onClose),
        allowedTypes: allowedTypes,
        render: _ref5 => {
          let {
            open
          } = _ref5;
          return createElement(MenuItem, {
            icon: mediaIcon,
            onClick: open
          }, __('Open Media Library'));
        }
      }), createElement(MediaUploadCheck, null, createElement(FormFileUpload, {
        onChange: event => {
          uploadFiles(event, onClose);
        },
        accept: accept,
        multiple: multiple,
        render: _ref6 => {
          let {
            openFileDialog
          } = _ref6;
          return createElement(MenuItem, {
            icon: upload,
            onClick: () => {
              openFileDialog();
            }
          }, __('Upload'));
        }
      }))), onToggleFeaturedImage && createElement(MenuItem, {
        icon: postFeaturedImage,
        onClick: onToggleFeaturedImage,
        isPressed: useFeaturedImage
      }, __('Use featured image')), children), onSelectURL && // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions
      createElement("form", {
        className: "block-editor-media-flow__url-input"
      }, createElement("span", {
        className: "block-editor-media-replace-flow__image-url-label"
      }, __('Current media URL:')), createElement(Tooltip, {
        text: mediaURL,
        position: "bottom"
      }, createElement("div", null, createElement(LinkControl, {
        value: {
          url: mediaURL
        },
        settings: [],
        showSuggestions: false,
        onChange: _ref7 => {
          let {
            url
          } = _ref7;
          onSelectURL(url);
          editMediaButtonRef.current.focus();
        }
      })))));
    }
  });
};
/**
 * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/media-replace-flow/README.md
 */


export default compose([withDispatch(dispatch => {
  const {
    createNotice,
    removeNotice
  } = dispatch(noticesStore);
  return {
    createNotice,
    removeNotice
  };
}), withFilters('editor.MediaReplaceFlow')])(MediaReplaceFlow);
//# sourceMappingURL=index.js.map
{"version":3,"sources":["@wordpress/block-editor/src/store/reducer.js"],"names":["fastDeepEqual","pipe","combineReducers","select","store","blocksStore","PREFERENCES_DEFAULTS","SETTINGS_DEFAULTS","insertAt","moveTo","identity","x","mapBlockOrder","blocks","rootClientId","result","Map","current","set","forEach","block","clientId","innerBlocks","push","order","subClientId","mapBlockParents","stack","length","parent","currentBlocks","shift","flattenBlocks","transform","getFlattenedClientIds","getFlattenedBlocksWithoutAttributes","attributes","restBlock","getFlattenedBlockAttributes","hasSameKeys","a","b","Object","keys","isUpdatingSameBlockAttribute","action","lastAction","type","undefined","clientIds","updateBlockTreeForBlocks","state","treeToUpdate","tree","flattenedBlocks","assign","get","byClientId","map","subBlock","updateParentInnerBlocksInTree","updatedClientIds","updateChildrenOfUpdatedClientIds","uncontrolledParents","Set","controlledParents","parents","controlledInnerBlocks","add","withBlockTree","reducer","newState","inserterClientIds","replacedClientIds","concat","filter","key","delete","parentsOfRemovedBlocks","removedClientIds","updatedBlockUids","fromRootClientId","toRootClientId","name","ref","updatedId","withPersistentBlockChange","markNextChangeAsNotPersistent","nextState","isExplicitPersistentChange","nextIsPersistentChange","isPersistentChange","withIgnoredBlockChange","IGNORED_ACTION_TYPES","isIgnoredChange","has","withInnerBlocksRemoveCascade","getAllChildren","i","keepControlledInnerBlocks","withBlockReset","withReplaceInnerBlocks","nestedControllers","stateAfterBlocksRemoval","stateAfterInsert","index","stateAfterInsertOrder","_key","withSaveReusableBlock","id","withResetControlledBlocks","tempState","value","changes","updates","values","every","hasChange","updatedAttributeEntries","entries","uniqueByBlock","hasUpdatedAttributes","existingAttributes","newAttributes","blockOrder","subState","mappedBlocks","fromIndex","indexOf","includes","firstClientId","firstIndex","lastClientId","newSubOrder","reduce","hasControlledInnerBlocks","isBlockInterfaceHidden","isTyping","draggedBlocks","blockVisibility","selectionHelper","updateSelection","blockToSelect","indexToSelect","selection","selectionStart","attributeKey","offset","startOffset","selectionEnd","endOffset","start","end","startClientId","endClientId","some","isMultiSelecting","isSelectionEnabled","initialPosition","blocksMode","insertionPoint","__unstableWithInserter","operation","template","isValid","settings","preferences","prevState","blockName","match","getActiveBlockVariation","insert","insertUsage","time","count","blockListSettings","fromEntries","hasOwnProperty","removedBlock","restBlocks","editorMode","mode","hasBlockMovingClientId","lastBlockAttributesChange","accumulator","highlightedBlock","isHighlighted","lastBlockInserted","source","meta","temporarilyEditingAsBlocks","combinedReducers","withAutomaticChangeReset","automaticChangeStatus"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport fastDeepEqual from 'fast-deep-equal/es6';\n\n/**\n * WordPress dependencies\n */\nimport { pipe } from '@wordpress/compose';\nimport { combineReducers, select } from '@wordpress/data';\nimport { store as blocksStore } from '@wordpress/blocks';\n/**\n * Internal dependencies\n */\nimport { PREFERENCES_DEFAULTS, SETTINGS_DEFAULTS } from './defaults';\nimport { insertAt, moveTo } from './array';\n\nconst identity = ( x ) => x;\n\n/**\n * Given an array of blocks, returns an object where each key is a nesting\n * context, the value of which is an array of block client IDs existing within\n * that nesting context.\n *\n * @param {Array}   blocks       Blocks to map.\n * @param {?string} rootClientId Assumed root client ID.\n *\n * @return {Object} Block order map object.\n */\nfunction mapBlockOrder( blocks, rootClientId = '' ) {\n\tconst result = new Map();\n\tconst current = [];\n\tresult.set( rootClientId, current );\n\tblocks.forEach( ( block ) => {\n\t\tconst { clientId, innerBlocks } = block;\n\t\tcurrent.push( clientId );\n\t\tmapBlockOrder( innerBlocks, clientId ).forEach(\n\t\t\t( order, subClientId ) => {\n\t\t\t\tresult.set( subClientId, order );\n\t\t\t}\n\t\t);\n\t} );\n\treturn result;\n}\n\n/**\n * Given an array of blocks, returns an object where each key contains\n * the clientId of the block and the value is the parent of the block.\n *\n * @param {Array}   blocks       Blocks to map.\n * @param {?string} rootClientId Assumed root client ID.\n *\n * @return {Object} Block order map object.\n */\nfunction mapBlockParents( blocks, rootClientId = '' ) {\n\tconst result = [];\n\tconst stack = [ [ rootClientId, blocks ] ];\n\twhile ( stack.length ) {\n\t\tconst [ parent, currentBlocks ] = stack.shift();\n\t\tcurrentBlocks.forEach( ( { innerBlocks, ...block } ) => {\n\t\t\tresult.push( [ block.clientId, parent ] );\n\t\t\tif ( innerBlocks?.length ) {\n\t\t\t\tstack.push( [ block.clientId, innerBlocks ] );\n\t\t\t}\n\t\t} );\n\t}\n\treturn result;\n}\n\n/**\n * Helper method to iterate through all blocks, recursing into inner blocks,\n * applying a transformation function to each one.\n * Returns a flattened object with the transformed blocks.\n *\n * @param {Array}    blocks    Blocks to flatten.\n * @param {Function} transform Transforming function to be applied to each block.\n *\n * @return {Array} Flattened object.\n */\nfunction flattenBlocks( blocks, transform = identity ) {\n\tconst result = [];\n\n\tconst stack = [ ...blocks ];\n\twhile ( stack.length ) {\n\t\tconst { innerBlocks, ...block } = stack.shift();\n\t\tstack.push( ...innerBlocks );\n\t\tresult.push( [ block.clientId, transform( block ) ] );\n\t}\n\n\treturn result;\n}\n\nfunction getFlattenedClientIds( blocks ) {\n\tconst result = {};\n\tconst stack = [ ...blocks ];\n\twhile ( stack.length ) {\n\t\tconst { innerBlocks, ...block } = stack.shift();\n\t\tstack.push( ...innerBlocks );\n\t\tresult[ block.clientId ] = true;\n\t}\n\n\treturn result;\n}\n\n/**\n * Given an array of blocks, returns an object containing all blocks, without\n * attributes, recursing into inner blocks. Keys correspond to the block client\n * ID, the value of which is the attributes object.\n *\n * @param {Array} blocks Blocks to flatten.\n *\n * @return {Array} Flattened block attributes object.\n */\nfunction getFlattenedBlocksWithoutAttributes( blocks ) {\n\treturn flattenBlocks( blocks, ( block ) => {\n\t\tconst { attributes, ...restBlock } = block;\n\t\treturn restBlock;\n\t} );\n}\n\n/**\n * Given an array of blocks, returns an object containing all block attributes,\n * recursing into inner blocks. Keys correspond to the block client ID, the\n * value of which is the attributes object.\n *\n * @param {Array} blocks Blocks to flatten.\n *\n * @return {Array} Flattened block attributes object.\n */\nfunction getFlattenedBlockAttributes( blocks ) {\n\treturn flattenBlocks( blocks, ( block ) => block.attributes );\n}\n\n/**\n * Returns true if the two object arguments have the same keys, or false\n * otherwise.\n *\n * @param {Object} a First object.\n * @param {Object} b Second object.\n *\n * @return {boolean} Whether the two objects have the same keys.\n */\nexport function hasSameKeys( a, b ) {\n\treturn fastDeepEqual( Object.keys( a ), Object.keys( b ) );\n}\n\n/**\n * Returns true if, given the currently dispatching action and the previously\n * dispatched action, the two actions are updating the same block attribute, or\n * false otherwise.\n *\n * @param {Object} action     Currently dispatching action.\n * @param {Object} lastAction Previously dispatched action.\n *\n * @return {boolean} Whether actions are updating the same block attribute.\n */\nexport function isUpdatingSameBlockAttribute( action, lastAction ) {\n\treturn (\n\t\taction.type === 'UPDATE_BLOCK_ATTRIBUTES' &&\n\t\tlastAction !== undefined &&\n\t\tlastAction.type === 'UPDATE_BLOCK_ATTRIBUTES' &&\n\t\tfastDeepEqual( action.clientIds, lastAction.clientIds ) &&\n\t\thasSameKeys( action.attributes, lastAction.attributes )\n\t);\n}\n\nfunction updateBlockTreeForBlocks( state, blocks ) {\n\tconst treeToUpdate = state.tree;\n\tconst stack = [ ...blocks ];\n\tconst flattenedBlocks = [ ...blocks ];\n\twhile ( stack.length ) {\n\t\tconst block = stack.shift();\n\t\tstack.push( ...block.innerBlocks );\n\t\tflattenedBlocks.push( ...block.innerBlocks );\n\t}\n\t// Create objects before mutating them, that way it's always defined.\n\tfor ( const block of flattenedBlocks ) {\n\t\ttreeToUpdate.set( block.clientId, {} );\n\t}\n\tfor ( const block of flattenedBlocks ) {\n\t\ttreeToUpdate.set(\n\t\t\tblock.clientId,\n\t\t\tObject.assign( treeToUpdate.get( block.clientId ), {\n\t\t\t\t...state.byClientId.get( block.clientId ),\n\t\t\t\tattributes: state.attributes.get( block.clientId ),\n\t\t\t\tinnerBlocks: block.innerBlocks.map( ( subBlock ) =>\n\t\t\t\t\ttreeToUpdate.get( subBlock.clientId )\n\t\t\t\t),\n\t\t\t} )\n\t\t);\n\t}\n}\n\nfunction updateParentInnerBlocksInTree(\n\tstate,\n\tupdatedClientIds,\n\tupdateChildrenOfUpdatedClientIds = false\n) {\n\tconst treeToUpdate = state.tree;\n\tconst uncontrolledParents = new Set( [] );\n\tconst controlledParents = new Set();\n\tfor ( const clientId of updatedClientIds ) {\n\t\tlet current = updateChildrenOfUpdatedClientIds\n\t\t\t? clientId\n\t\t\t: state.parents.get( clientId );\n\t\tdo {\n\t\t\tif ( state.controlledInnerBlocks[ current ] ) {\n\t\t\t\t// Should stop on controlled blocks.\n\t\t\t\t// If we reach a controlled parent, break out of the loop.\n\t\t\t\tcontrolledParents.add( current );\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\t// Else continue traversing up through parents.\n\t\t\t\tuncontrolledParents.add( current );\n\t\t\t\tcurrent = state.parents.get( current );\n\t\t\t}\n\t\t} while ( current !== undefined );\n\t}\n\n\t// To make sure the order of assignments doesn't matter,\n\t// we first create empty objects and mutates the inner blocks later.\n\tfor ( const clientId of uncontrolledParents ) {\n\t\ttreeToUpdate.set( clientId, { ...treeToUpdate.get( clientId ) } );\n\t}\n\tfor ( const clientId of uncontrolledParents ) {\n\t\ttreeToUpdate.get( clientId ).innerBlocks = (\n\t\t\tstate.order.get( clientId ) || []\n\t\t).map( ( subClientId ) => treeToUpdate.get( subClientId ) );\n\t}\n\n\t// Controlled parent blocks, need a dedicated key for their inner blocks\n\t// to be used when doing getBlocks( controlledBlockClientId ).\n\tfor ( const clientId of controlledParents ) {\n\t\ttreeToUpdate.set( 'controlled||' + clientId, {\n\t\t\tinnerBlocks: ( state.order.get( clientId ) || [] ).map(\n\t\t\t\t( subClientId ) => treeToUpdate.get( subClientId )\n\t\t\t),\n\t\t} );\n\t}\n}\n\n/**\n * Higher-order reducer intended to compute full block objects key for each block in the post.\n * This is a denormalization to optimize the performance of the getBlock selectors and avoid\n * recomputing the block objects and avoid heavy memoization.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withBlockTree =\n\t( reducer ) =>\n\t( state = {}, action ) => {\n\t\tconst newState = reducer( state, action );\n\n\t\tif ( newState === state ) {\n\t\t\treturn state;\n\t\t}\n\n\t\tnewState.tree = state.tree ? state.tree : new Map();\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RECEIVE_BLOCKS':\n\t\t\tcase 'INSERT_BLOCKS': {\n\t\t\t\tnewState.tree = new Map( newState.tree );\n\t\t\t\tupdateBlockTreeForBlocks( newState, action.blocks );\n\t\t\t\tupdateParentInnerBlocksInTree(\n\t\t\t\t\tnewState,\n\t\t\t\t\taction.rootClientId ? [ action.rootClientId ] : [ '' ],\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'UPDATE_BLOCK':\n\t\t\t\tnewState.tree = new Map( newState.tree );\n\t\t\t\tnewState.tree.set( action.clientId, {\n\t\t\t\t\t...newState.tree.get( action.clientId ),\n\t\t\t\t\t...newState.byClientId.get( action.clientId ),\n\t\t\t\t\tattributes: newState.attributes.get( action.clientId ),\n\t\t\t\t} );\n\t\t\t\tupdateParentInnerBlocksInTree(\n\t\t\t\t\tnewState,\n\t\t\t\t\t[ action.clientId ],\n\t\t\t\t\tfalse\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase 'UPDATE_BLOCK_ATTRIBUTES': {\n\t\t\t\tnewState.tree = new Map( newState.tree );\n\t\t\t\taction.clientIds.forEach( ( clientId ) => {\n\t\t\t\t\tnewState.tree.set( clientId, {\n\t\t\t\t\t\t...newState.tree.get( clientId ),\n\t\t\t\t\t\tattributes: newState.attributes.get( clientId ),\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t\t\tupdateParentInnerBlocksInTree(\n\t\t\t\t\tnewState,\n\t\t\t\t\taction.clientIds,\n\t\t\t\t\tfalse\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\n\t\t\t\tconst inserterClientIds = getFlattenedClientIds(\n\t\t\t\t\taction.blocks\n\t\t\t\t);\n\t\t\t\tnewState.tree = new Map( newState.tree );\n\t\t\t\taction.replacedClientIds\n\t\t\t\t\t.concat(\n\t\t\t\t\t\t// Controlled inner blocks are only removed\n\t\t\t\t\t\t// if the block doesn't move to another position\n\t\t\t\t\t\t// otherwise their content will be lost.\n\t\t\t\t\t\taction.replacedClientIds\n\t\t\t\t\t\t\t.filter(\n\t\t\t\t\t\t\t\t( clientId ) => ! inserterClientIds[ clientId ]\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.map( ( clientId ) => 'controlled||' + clientId )\n\t\t\t\t\t)\n\t\t\t\t\t.forEach( ( key ) => {\n\t\t\t\t\t\tnewState.tree.delete( key );\n\t\t\t\t\t} );\n\n\t\t\t\tupdateBlockTreeForBlocks( newState, action.blocks );\n\t\t\t\tupdateParentInnerBlocksInTree(\n\t\t\t\t\tnewState,\n\t\t\t\t\taction.blocks.map( ( b ) => b.clientId ),\n\t\t\t\t\tfalse\n\t\t\t\t);\n\n\t\t\t\t// If there are no replaced blocks, it means we're removing blocks so we need to update their parent.\n\t\t\t\tconst parentsOfRemovedBlocks = [];\n\t\t\t\tfor ( const clientId of action.clientIds ) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tstate.parents.get( clientId ) !== undefined &&\n\t\t\t\t\t\t( state.parents.get( clientId ) === '' ||\n\t\t\t\t\t\t\tnewState.byClientId.get(\n\t\t\t\t\t\t\t\tstate.parents.get( clientId )\n\t\t\t\t\t\t\t) )\n\t\t\t\t\t) {\n\t\t\t\t\t\tparentsOfRemovedBlocks.push(\n\t\t\t\t\t\t\tstate.parents.get( clientId )\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tupdateParentInnerBlocksInTree(\n\t\t\t\t\tnewState,\n\t\t\t\t\tparentsOfRemovedBlocks,\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN':\n\t\t\t\tconst parentsOfRemovedBlocks = [];\n\t\t\t\tfor ( const clientId of action.clientIds ) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tstate.parents.get( clientId ) !== undefined &&\n\t\t\t\t\t\t( state.parents.get( clientId ) === '' ||\n\t\t\t\t\t\t\tnewState.byClientId.get(\n\t\t\t\t\t\t\t\tstate.parents.get( clientId )\n\t\t\t\t\t\t\t) )\n\t\t\t\t\t) {\n\t\t\t\t\t\tparentsOfRemovedBlocks.push(\n\t\t\t\t\t\t\tstate.parents.get( clientId )\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnewState.tree = new Map( newState.tree );\n\t\t\t\taction.removedClientIds\n\t\t\t\t\t.concat(\n\t\t\t\t\t\taction.removedClientIds.map(\n\t\t\t\t\t\t\t( clientId ) => 'controlled||' + clientId\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t\t.forEach( ( key ) => {\n\t\t\t\t\t\tnewState.tree.delete( key );\n\t\t\t\t\t} );\n\t\t\t\tupdateParentInnerBlocksInTree(\n\t\t\t\t\tnewState,\n\t\t\t\t\tparentsOfRemovedBlocks,\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase 'MOVE_BLOCKS_TO_POSITION': {\n\t\t\t\tconst updatedBlockUids = [];\n\t\t\t\tif ( action.fromRootClientId ) {\n\t\t\t\t\tupdatedBlockUids.push( action.fromRootClientId );\n\t\t\t\t} else {\n\t\t\t\t\tupdatedBlockUids.push( '' );\n\t\t\t\t}\n\t\t\t\tif ( action.toRootClientId ) {\n\t\t\t\t\tupdatedBlockUids.push( action.toRootClientId );\n\t\t\t\t}\n\t\t\t\tnewState.tree = new Map( newState.tree );\n\t\t\t\tupdateParentInnerBlocksInTree(\n\t\t\t\t\tnewState,\n\t\t\t\t\tupdatedBlockUids,\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'MOVE_BLOCKS_UP':\n\t\t\tcase 'MOVE_BLOCKS_DOWN': {\n\t\t\t\tconst updatedBlockUids = [\n\t\t\t\t\taction.rootClientId ? action.rootClientId : '',\n\t\t\t\t];\n\t\t\t\tnewState.tree = new Map( newState.tree );\n\t\t\t\tupdateParentInnerBlocksInTree(\n\t\t\t\t\tnewState,\n\t\t\t\t\tupdatedBlockUids,\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'SAVE_REUSABLE_BLOCK_SUCCESS': {\n\t\t\t\tconst updatedBlockUids = [];\n\t\t\t\tnewState.attributes.forEach( ( attributes, clientId ) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tnewState.byClientId.get( clientId ).name ===\n\t\t\t\t\t\t\t'core/block' &&\n\t\t\t\t\t\tattributes.ref === action.updatedId\n\t\t\t\t\t) {\n\t\t\t\t\t\tupdatedBlockUids.push( clientId );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\tnewState.tree = new Map( newState.tree );\n\t\t\t\tupdatedBlockUids.forEach( ( clientId ) => {\n\t\t\t\t\tnewState.tree.set( clientId, {\n\t\t\t\t\t\t...newState.byClientId.get( clientId ),\n\t\t\t\t\t\tattributes: newState.attributes.get( clientId ),\n\t\t\t\t\t\tinnerBlocks: newState.tree.get( clientId ).innerBlocks,\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t\t\tupdateParentInnerBlocksInTree(\n\t\t\t\t\tnewState,\n\t\t\t\t\tupdatedBlockUids,\n\t\t\t\t\tfalse\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn newState;\n\t};\n\n/**\n * Higher-order reducer intended to augment the blocks reducer, assigning an\n * `isPersistentChange` property value corresponding to whether a change in\n * state can be considered as persistent. All changes are considered persistent\n * except when updating the same block attribute as in the previous action.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nfunction withPersistentBlockChange( reducer ) {\n\tlet lastAction;\n\tlet markNextChangeAsNotPersistent = false;\n\n\treturn ( state, action ) => {\n\t\tlet nextState = reducer( state, action );\n\n\t\tconst isExplicitPersistentChange =\n\t\t\taction.type === 'MARK_LAST_CHANGE_AS_PERSISTENT' ||\n\t\t\tmarkNextChangeAsNotPersistent;\n\n\t\t// Defer to previous state value (or default) unless changing or\n\t\t// explicitly marking as persistent.\n\t\tif ( state === nextState && ! isExplicitPersistentChange ) {\n\t\t\tmarkNextChangeAsNotPersistent =\n\t\t\t\taction.type === 'MARK_NEXT_CHANGE_AS_NOT_PERSISTENT';\n\n\t\t\tconst nextIsPersistentChange = state?.isPersistentChange ?? true;\n\t\t\tif ( state.isPersistentChange === nextIsPersistentChange ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...nextState,\n\t\t\t\tisPersistentChange: nextIsPersistentChange,\n\t\t\t};\n\t\t}\n\n\t\tnextState = {\n\t\t\t...nextState,\n\t\t\tisPersistentChange: isExplicitPersistentChange\n\t\t\t\t? ! markNextChangeAsNotPersistent\n\t\t\t\t: ! isUpdatingSameBlockAttribute( action, lastAction ),\n\t\t};\n\n\t\t// In comparing against the previous action, consider only those which\n\t\t// would have qualified as one which would have been ignored or not\n\t\t// have resulted in a changed state.\n\t\tlastAction = action;\n\t\tmarkNextChangeAsNotPersistent =\n\t\t\taction.type === 'MARK_NEXT_CHANGE_AS_NOT_PERSISTENT';\n\n\t\treturn nextState;\n\t};\n}\n\n/**\n * Higher-order reducer intended to augment the blocks reducer, assigning an\n * `isIgnoredChange` property value corresponding to whether a change in state\n * can be considered as ignored. A change is considered ignored when the result\n * of an action not incurred by direct user interaction.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nfunction withIgnoredBlockChange( reducer ) {\n\t/**\n\t * Set of action types for which a blocks state change should be ignored.\n\t *\n\t * @type {Set}\n\t */\n\tconst IGNORED_ACTION_TYPES = new Set( [ 'RECEIVE_BLOCKS' ] );\n\n\treturn ( state, action ) => {\n\t\tconst nextState = reducer( state, action );\n\n\t\tif ( nextState !== state ) {\n\t\t\tnextState.isIgnoredChange = IGNORED_ACTION_TYPES.has( action.type );\n\t\t}\n\n\t\treturn nextState;\n\t};\n}\n\n/**\n * Higher-order reducer targeting the combined blocks reducer, augmenting\n * block client IDs in remove action to include cascade of inner blocks.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withInnerBlocksRemoveCascade = ( reducer ) => ( state, action ) => {\n\t// Gets all children which need to be removed.\n\tconst getAllChildren = ( clientIds ) => {\n\t\tlet result = clientIds;\n\t\tfor ( let i = 0; i < result.length; i++ ) {\n\t\t\tif (\n\t\t\t\t! state.order.get( result[ i ] ) ||\n\t\t\t\t( action.keepControlledInnerBlocks &&\n\t\t\t\t\taction.keepControlledInnerBlocks[ result[ i ] ] )\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( result === clientIds ) {\n\t\t\t\tresult = [ ...result ];\n\t\t\t}\n\n\t\t\tresult.push( ...state.order.get( result[ i ] ) );\n\t\t}\n\t\treturn result;\n\t};\n\n\tif ( state ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'REMOVE_BLOCKS':\n\t\t\t\taction = {\n\t\t\t\t\t...action,\n\t\t\t\t\ttype: 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN',\n\t\t\t\t\tremovedClientIds: getAllChildren( action.clientIds ),\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase 'REPLACE_BLOCKS':\n\t\t\t\taction = {\n\t\t\t\t\t...action,\n\t\t\t\t\ttype: 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN',\n\t\t\t\t\treplacedClientIds: getAllChildren( action.clientIds ),\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn reducer( state, action );\n};\n\n/**\n * Higher-order reducer which targets the combined blocks reducer and handles\n * the `RESET_BLOCKS` action. When dispatched, this action will replace all\n * blocks that exist in the post, leaving blocks that exist only in state (e.g.\n * reusable blocks and blocks controlled by inner blocks controllers) alone.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withBlockReset = ( reducer ) => ( state, action ) => {\n\tif ( action.type === 'RESET_BLOCKS' ) {\n\t\tconst newState = {\n\t\t\t...state,\n\t\t\tbyClientId: new Map(\n\t\t\t\tgetFlattenedBlocksWithoutAttributes( action.blocks )\n\t\t\t),\n\t\t\tattributes: new Map( getFlattenedBlockAttributes( action.blocks ) ),\n\t\t\torder: mapBlockOrder( action.blocks ),\n\t\t\tparents: new Map( mapBlockParents( action.blocks ) ),\n\t\t\tcontrolledInnerBlocks: {},\n\t\t};\n\n\t\tnewState.tree = new Map( state?.tree );\n\t\tupdateBlockTreeForBlocks( newState, action.blocks );\n\t\tnewState.tree.set( '', {\n\t\t\tinnerBlocks: action.blocks.map( ( subBlock ) =>\n\t\t\t\tnewState.tree.get( subBlock.clientId )\n\t\t\t),\n\t\t} );\n\n\t\treturn newState;\n\t}\n\n\treturn reducer( state, action );\n};\n\n/**\n * Higher-order reducer which targets the combined blocks reducer and handles\n * the `REPLACE_INNER_BLOCKS` action. When dispatched, this action the state\n * should become equivalent to the execution of a `REMOVE_BLOCKS` action\n * containing all the child's of the root block followed by the execution of\n * `INSERT_BLOCKS` with the new blocks.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withReplaceInnerBlocks = ( reducer ) => ( state, action ) => {\n\tif ( action.type !== 'REPLACE_INNER_BLOCKS' ) {\n\t\treturn reducer( state, action );\n\t}\n\n\t// Finds every nested inner block controller. We must check the action blocks\n\t// and not just the block parent state because some inner block controllers\n\t// should be deleted if specified, whereas others should not be deleted. If\n\t// a controlled should not be deleted, then we need to avoid deleting its\n\t// inner blocks from the block state because its inner blocks will not be\n\t// attached to the block in the action.\n\tconst nestedControllers = {};\n\tif ( Object.keys( state.controlledInnerBlocks ).length ) {\n\t\tconst stack = [ ...action.blocks ];\n\t\twhile ( stack.length ) {\n\t\t\tconst { innerBlocks, ...block } = stack.shift();\n\t\t\tstack.push( ...innerBlocks );\n\t\t\tif ( !! state.controlledInnerBlocks[ block.clientId ] ) {\n\t\t\t\tnestedControllers[ block.clientId ] = true;\n\t\t\t}\n\t\t}\n\t}\n\n\t// The `keepControlledInnerBlocks` prop will keep the inner blocks of the\n\t// marked block in the block state so that they can be reattached to the\n\t// marked block when we re-insert everything a few lines below.\n\tlet stateAfterBlocksRemoval = state;\n\tif ( state.order.get( action.rootClientId ) ) {\n\t\tstateAfterBlocksRemoval = reducer( stateAfterBlocksRemoval, {\n\t\t\ttype: 'REMOVE_BLOCKS',\n\t\t\tkeepControlledInnerBlocks: nestedControllers,\n\t\t\tclientIds: state.order.get( action.rootClientId ),\n\t\t} );\n\t}\n\tlet stateAfterInsert = stateAfterBlocksRemoval;\n\tif ( action.blocks.length ) {\n\t\tstateAfterInsert = reducer( stateAfterInsert, {\n\t\t\t...action,\n\t\t\ttype: 'INSERT_BLOCKS',\n\t\t\tindex: 0,\n\t\t} );\n\n\t\t// We need to re-attach the controlled inner blocks to the blocks tree and\n\t\t// preserve their block order. Otherwise, an inner block controller's blocks\n\t\t// will be deleted entirely from its entity.\n\t\tconst stateAfterInsertOrder = new Map( stateAfterInsert.order );\n\t\tObject.keys( nestedControllers ).forEach( ( key ) => {\n\t\t\tif ( state.order.get( key ) ) {\n\t\t\t\tstateAfterInsertOrder.set( key, state.order.get( key ) );\n\t\t\t}\n\t\t} );\n\t\tstateAfterInsert.order = stateAfterInsertOrder;\n\t\tstateAfterInsert.tree = new Map( stateAfterInsert.tree );\n\t\tObject.keys( nestedControllers ).forEach( ( _key ) => {\n\t\t\tconst key = `controlled||${ _key }`;\n\t\t\tif ( state.tree.has( key ) ) {\n\t\t\t\tstateAfterInsert.tree.set( key, state.tree.get( key ) );\n\t\t\t}\n\t\t} );\n\t}\n\treturn stateAfterInsert;\n};\n\n/**\n * Higher-order reducer which targets the combined blocks reducer and handles\n * the `SAVE_REUSABLE_BLOCK_SUCCESS` action. This action can't be handled by\n * regular reducers and needs a higher-order reducer since it needs access to\n * both `byClientId` and `attributes` simultaneously.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withSaveReusableBlock = ( reducer ) => ( state, action ) => {\n\tif ( state && action.type === 'SAVE_REUSABLE_BLOCK_SUCCESS' ) {\n\t\tconst { id, updatedId } = action;\n\n\t\t// If a temporary reusable block is saved, we swap the temporary id with the final one.\n\t\tif ( id === updatedId ) {\n\t\t\treturn state;\n\t\t}\n\n\t\tstate = { ...state };\n\t\tstate.attributes = new Map( state.attributes );\n\t\tstate.attributes.forEach( ( attributes, clientId ) => {\n\t\t\tconst { name } = state.byClientId.get( clientId );\n\t\t\tif ( name === 'core/block' && attributes.ref === id ) {\n\t\t\t\tstate.attributes.set( clientId, {\n\t\t\t\t\t...attributes,\n\t\t\t\t\tref: updatedId,\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t}\n\n\treturn reducer( state, action );\n};\n/**\n * Higher-order reducer which removes blocks from state when switching parent block controlled state.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withResetControlledBlocks = ( reducer ) => ( state, action ) => {\n\tif ( action.type === 'SET_HAS_CONTROLLED_INNER_BLOCKS' ) {\n\t\t// when switching a block from controlled to uncontrolled or inverse,\n\t\t// we need to remove its content first.\n\t\tconst tempState = reducer( state, {\n\t\t\ttype: 'REPLACE_INNER_BLOCKS',\n\t\t\trootClientId: action.clientId,\n\t\t\tblocks: [],\n\t\t} );\n\t\treturn reducer( tempState, action );\n\t}\n\n\treturn reducer( state, action );\n};\n\n/**\n * Reducer returning the blocks state.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport const blocks = pipe(\n\tcombineReducers,\n\twithSaveReusableBlock, // Needs to be before withBlockCache.\n\twithBlockTree, // Needs to be before withInnerBlocksRemoveCascade.\n\twithInnerBlocksRemoveCascade,\n\twithReplaceInnerBlocks, // Needs to be after withInnerBlocksRemoveCascade.\n\twithBlockReset,\n\twithPersistentBlockChange,\n\twithIgnoredBlockChange,\n\twithResetControlledBlocks\n)( {\n\t// The state is using a Map instead of a plain object for performance reasons.\n\t// You can run the \"./test/performance.js\" unit test to check the impact\n\t// code changes can have on this reducer.\n\tbyClientId( state = new Map(), action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RECEIVE_BLOCKS':\n\t\t\tcase 'INSERT_BLOCKS': {\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\tgetFlattenedBlocksWithoutAttributes( action.blocks ).forEach(\n\t\t\t\t\t( [ key, value ] ) => {\n\t\t\t\t\t\tnewState.set( key, value );\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\treturn newState;\n\t\t\t}\n\t\t\tcase 'UPDATE_BLOCK': {\n\t\t\t\t// Ignore updates if block isn't known.\n\t\t\t\tif ( ! state.has( action.clientId ) ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\t// Do nothing if only attributes change.\n\t\t\t\tconst { attributes, ...changes } = action.updates;\n\t\t\t\tif ( Object.values( changes ).length === 0 ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\tnewState.set( action.clientId, {\n\t\t\t\t\t...state.get( action.clientId ),\n\t\t\t\t\t...changes,\n\t\t\t\t} );\n\t\t\t\treturn newState;\n\t\t\t}\n\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\n\t\t\t\tif ( ! action.blocks ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\taction.replacedClientIds.forEach( ( clientId ) => {\n\t\t\t\t\tnewState.delete( clientId );\n\t\t\t\t} );\n\n\t\t\t\tgetFlattenedBlocksWithoutAttributes( action.blocks ).forEach(\n\t\t\t\t\t( [ key, value ] ) => {\n\t\t\t\t\t\tnewState.set( key, value );\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\treturn newState;\n\t\t\t}\n\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\taction.removedClientIds.forEach( ( clientId ) => {\n\t\t\t\t\tnewState.delete( clientId );\n\t\t\t\t} );\n\t\t\t\treturn newState;\n\t\t\t}\n\t\t}\n\n\t\treturn state;\n\t},\n\n\t// The state is using a Map instead of a plain object for performance reasons.\n\t// You can run the \"./test/performance.js\" unit test to check the impact\n\t// code changes can have on this reducer.\n\tattributes( state = new Map(), action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RECEIVE_BLOCKS':\n\t\t\tcase 'INSERT_BLOCKS': {\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\tgetFlattenedBlockAttributes( action.blocks ).forEach(\n\t\t\t\t\t( [ key, value ] ) => {\n\t\t\t\t\t\tnewState.set( key, value );\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\treturn newState;\n\t\t\t}\n\n\t\t\tcase 'UPDATE_BLOCK': {\n\t\t\t\t// Ignore updates if block isn't known or there are no attribute changes.\n\t\t\t\tif (\n\t\t\t\t\t! state.get( action.clientId ) ||\n\t\t\t\t\t! action.updates.attributes\n\t\t\t\t) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\tnewState.set( action.clientId, {\n\t\t\t\t\t...state.get( action.clientId ),\n\t\t\t\t\t...action.updates.attributes,\n\t\t\t\t} );\n\t\t\t\treturn newState;\n\t\t\t}\n\n\t\t\tcase 'UPDATE_BLOCK_ATTRIBUTES': {\n\t\t\t\t// Avoid a state change if none of the block IDs are known.\n\t\t\t\tif ( action.clientIds.every( ( id ) => ! state.get( id ) ) ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tlet hasChange = false;\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\tfor ( const clientId of action.clientIds ) {\n\t\t\t\t\tconst updatedAttributeEntries = Object.entries(\n\t\t\t\t\t\taction.uniqueByBlock\n\t\t\t\t\t\t\t? action.attributes[ clientId ]\n\t\t\t\t\t\t\t: action.attributes ?? {}\n\t\t\t\t\t);\n\t\t\t\t\tif ( updatedAttributeEntries.length === 0 ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tlet hasUpdatedAttributes = false;\n\t\t\t\t\tconst existingAttributes = state.get( clientId );\n\t\t\t\t\tconst newAttributes = {};\n\t\t\t\t\tupdatedAttributeEntries.forEach( ( [ key, value ] ) => {\n\t\t\t\t\t\tif ( existingAttributes[ key ] !== value ) {\n\t\t\t\t\t\t\thasUpdatedAttributes = true;\n\t\t\t\t\t\t\tnewAttributes[ key ] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t\thasChange = hasChange || hasUpdatedAttributes;\n\t\t\t\t\tif ( hasUpdatedAttributes ) {\n\t\t\t\t\t\tnewState.set( clientId, {\n\t\t\t\t\t\t\t...existingAttributes,\n\t\t\t\t\t\t\t...newAttributes,\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn hasChange ? newState : state;\n\t\t\t}\n\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\n\t\t\t\tif ( ! action.blocks ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\taction.replacedClientIds.forEach( ( clientId ) => {\n\t\t\t\t\tnewState.delete( clientId );\n\t\t\t\t} );\n\t\t\t\tgetFlattenedBlockAttributes( action.blocks ).forEach(\n\t\t\t\t\t( [ key, value ] ) => {\n\t\t\t\t\t\tnewState.set( key, value );\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\treturn newState;\n\t\t\t}\n\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\taction.removedClientIds.forEach( ( clientId ) => {\n\t\t\t\t\tnewState.delete( clientId );\n\t\t\t\t} );\n\t\t\t\treturn newState;\n\t\t\t}\n\t\t}\n\n\t\treturn state;\n\t},\n\n\t// The state is using a Map instead of a plain object for performance reasons.\n\t// You can run the \"./test/performance.js\" unit test to check the impact\n\t// code changes can have on this reducer.\n\torder( state = new Map(), action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RECEIVE_BLOCKS': {\n\t\t\t\tconst blockOrder = mapBlockOrder( action.blocks );\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\tblockOrder.forEach( ( order, clientId ) => {\n\t\t\t\t\tif ( clientId !== '' ) {\n\t\t\t\t\t\tnewState.set( clientId, order );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\tnewState.set(\n\t\t\t\t\t'',\n\t\t\t\t\t( state.get( '' ) ?? [] ).concat( blockOrder[ '' ] )\n\t\t\t\t);\n\t\t\t\treturn newState;\n\t\t\t}\n\t\t\tcase 'INSERT_BLOCKS': {\n\t\t\t\tconst { rootClientId = '' } = action;\n\t\t\t\tconst subState = state.get( rootClientId ) || [];\n\t\t\t\tconst mappedBlocks = mapBlockOrder(\n\t\t\t\t\taction.blocks,\n\t\t\t\t\trootClientId\n\t\t\t\t);\n\t\t\t\tconst { index = subState.length } = action;\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\tmappedBlocks.forEach( ( order, clientId ) => {\n\t\t\t\t\tnewState.set( clientId, order );\n\t\t\t\t} );\n\t\t\t\tnewState.set(\n\t\t\t\t\trootClientId,\n\t\t\t\t\tinsertAt(\n\t\t\t\t\t\tsubState,\n\t\t\t\t\t\tmappedBlocks.get( rootClientId ),\n\t\t\t\t\t\tindex\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\treturn newState;\n\t\t\t}\n\n\t\t\tcase 'MOVE_BLOCKS_TO_POSITION': {\n\t\t\t\tconst {\n\t\t\t\t\tfromRootClientId = '',\n\t\t\t\t\ttoRootClientId = '',\n\t\t\t\t\tclientIds,\n\t\t\t\t} = action;\n\t\t\t\tconst { index = state.get( toRootClientId ).length } = action;\n\n\t\t\t\t// Moving inside the same parent block.\n\t\t\t\tif ( fromRootClientId === toRootClientId ) {\n\t\t\t\t\tconst subState = state.get( toRootClientId );\n\t\t\t\t\tconst fromIndex = subState.indexOf( clientIds[ 0 ] );\n\t\t\t\t\tconst newState = new Map( state );\n\t\t\t\t\tnewState.set(\n\t\t\t\t\t\ttoRootClientId,\n\t\t\t\t\t\tmoveTo(\n\t\t\t\t\t\t\tstate.get( toRootClientId ),\n\t\t\t\t\t\t\tfromIndex,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tclientIds.length\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t\treturn newState;\n\t\t\t\t}\n\n\t\t\t\t// Moving from a parent block to another.\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\tnewState.set(\n\t\t\t\t\tfromRootClientId,\n\t\t\t\t\tstate\n\t\t\t\t\t\t.get( fromRootClientId )\n\t\t\t\t\t\t?.filter( ( id ) => ! clientIds.includes( id ) ) ?? []\n\t\t\t\t);\n\t\t\t\tnewState.set(\n\t\t\t\t\ttoRootClientId,\n\t\t\t\t\tinsertAt( state.get( toRootClientId ), clientIds, index )\n\t\t\t\t);\n\t\t\t\treturn newState;\n\t\t\t}\n\n\t\t\tcase 'MOVE_BLOCKS_UP': {\n\t\t\t\tconst { clientIds, rootClientId = '' } = action;\n\t\t\t\tconst firstClientId = clientIds[ 0 ];\n\t\t\t\tconst subState = state.get( rootClientId );\n\n\t\t\t\tif ( ! subState.length || firstClientId === subState[ 0 ] ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst firstIndex = subState.indexOf( firstClientId );\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\tnewState.set(\n\t\t\t\t\trootClientId,\n\t\t\t\t\tmoveTo(\n\t\t\t\t\t\tsubState,\n\t\t\t\t\t\tfirstIndex,\n\t\t\t\t\t\tfirstIndex - 1,\n\t\t\t\t\t\tclientIds.length\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\treturn newState;\n\t\t\t}\n\n\t\t\tcase 'MOVE_BLOCKS_DOWN': {\n\t\t\t\tconst { clientIds, rootClientId = '' } = action;\n\t\t\t\tconst firstClientId = clientIds[ 0 ];\n\t\t\t\tconst lastClientId = clientIds[ clientIds.length - 1 ];\n\t\t\t\tconst subState = state.get( rootClientId );\n\n\t\t\t\tif (\n\t\t\t\t\t! subState.length ||\n\t\t\t\t\tlastClientId === subState[ subState.length - 1 ]\n\t\t\t\t) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst firstIndex = subState.indexOf( firstClientId );\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\tnewState.set(\n\t\t\t\t\trootClientId,\n\t\t\t\t\tmoveTo(\n\t\t\t\t\t\tsubState,\n\t\t\t\t\t\tfirstIndex,\n\t\t\t\t\t\tfirstIndex + 1,\n\t\t\t\t\t\tclientIds.length\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\treturn newState;\n\t\t\t}\n\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\n\t\t\t\tconst { clientIds } = action;\n\t\t\t\tif ( ! action.blocks ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst mappedBlocks = mapBlockOrder( action.blocks );\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\taction.replacedClientIds.forEach( ( clientId ) => {\n\t\t\t\t\tnewState.delete( clientId );\n\t\t\t\t} );\n\t\t\t\tmappedBlocks.forEach( ( order, clientId ) => {\n\t\t\t\t\tif ( clientId !== '' ) {\n\t\t\t\t\t\tnewState.set( clientId, order );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\tnewState.forEach( ( order, clientId ) => {\n\t\t\t\t\tconst newSubOrder = Object.values( order ).reduce(\n\t\t\t\t\t\t( result, subClientId ) => {\n\t\t\t\t\t\t\tif ( subClientId === clientIds[ 0 ] ) {\n\t\t\t\t\t\t\t\treturn [ ...result, ...mappedBlocks.get( '' ) ];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( clientIds.indexOf( subClientId ) === -1 ) {\n\t\t\t\t\t\t\t\tresult.push( subClientId );\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t},\n\t\t\t\t\t\t[]\n\t\t\t\t\t);\n\t\t\t\t\tnewState.set( clientId, newSubOrder );\n\t\t\t\t} );\n\t\t\t\treturn newState;\n\t\t\t}\n\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\t// Remove inner block ordering for removed blocks.\n\t\t\t\taction.removedClientIds.forEach( ( clientId ) => {\n\t\t\t\t\tnewState.delete( clientId );\n\t\t\t\t} );\n\t\t\t\tnewState.forEach( ( order, clientId ) => {\n\t\t\t\t\tconst newSubOrder =\n\t\t\t\t\t\torder?.filter(\n\t\t\t\t\t\t\t( id ) => ! action.removedClientIds.includes( id )\n\t\t\t\t\t\t) ?? [];\n\t\t\t\t\tif ( newSubOrder.length !== order.length ) {\n\t\t\t\t\t\tnewState.set( clientId, newSubOrder );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn newState;\n\t\t\t}\n\t\t}\n\n\t\treturn state;\n\t},\n\n\t// While technically redundant data as the inverse of `order`, it serves as\n\t// an optimization for the selectors which derive the ancestry of a block.\n\tparents( state = new Map(), action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RECEIVE_BLOCKS': {\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\tmapBlockParents( action.blocks ).forEach(\n\t\t\t\t\t( [ key, value ] ) => {\n\t\t\t\t\t\tnewState.set( key, value );\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\treturn newState;\n\t\t\t}\n\t\t\tcase 'INSERT_BLOCKS': {\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\tmapBlockParents(\n\t\t\t\t\taction.blocks,\n\t\t\t\t\taction.rootClientId || ''\n\t\t\t\t).forEach( ( [ key, value ] ) => {\n\t\t\t\t\tnewState.set( key, value );\n\t\t\t\t} );\n\t\t\t\treturn newState;\n\t\t\t}\n\t\t\tcase 'MOVE_BLOCKS_TO_POSITION': {\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\taction.clientIds.forEach( ( id ) => {\n\t\t\t\t\tnewState.set( id, action.toRootClientId || '' );\n\t\t\t\t} );\n\t\t\t\treturn newState;\n\t\t\t}\n\n\t\t\tcase 'REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\taction.replacedClientIds.forEach( ( clientId ) => {\n\t\t\t\t\tnewState.delete( clientId );\n\t\t\t\t} );\n\t\t\t\tmapBlockParents(\n\t\t\t\t\taction.blocks,\n\t\t\t\t\tstate.get( action.clientIds[ 0 ] )\n\t\t\t\t).forEach( ( [ key, value ] ) => {\n\t\t\t\t\tnewState.set( key, value );\n\t\t\t\t} );\n\t\t\t\treturn newState;\n\t\t\t}\n\t\t\tcase 'REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN': {\n\t\t\t\tconst newState = new Map( state );\n\t\t\t\taction.removedClientIds.forEach( ( clientId ) => {\n\t\t\t\t\tnewState.delete( clientId );\n\t\t\t\t} );\n\t\t\t\treturn newState;\n\t\t\t}\n\t\t}\n\n\t\treturn state;\n\t},\n\n\tcontrolledInnerBlocks(\n\t\tstate = {},\n\t\t{ type, clientId, hasControlledInnerBlocks }\n\t) {\n\t\tif ( type === 'SET_HAS_CONTROLLED_INNER_BLOCKS' ) {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ clientId ]: hasControlledInnerBlocks,\n\t\t\t};\n\t\t}\n\t\treturn state;\n\t},\n} );\n\n/**\n * Reducer returning visibility status of block interface.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isBlockInterfaceHidden( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'HIDE_BLOCK_INTERFACE':\n\t\t\treturn true;\n\n\t\tcase 'SHOW_BLOCK_INTERFACE':\n\t\t\treturn false;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning typing state.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isTyping( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'START_TYPING':\n\t\t\treturn true;\n\n\t\tcase 'STOP_TYPING':\n\t\t\treturn false;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning dragged block client id.\n *\n * @param {string[]} state  Current state.\n * @param {Object}   action Dispatched action.\n *\n * @return {string[]} Updated state.\n */\nexport function draggedBlocks( state = [], action ) {\n\tswitch ( action.type ) {\n\t\tcase 'START_DRAGGING_BLOCKS':\n\t\t\treturn action.clientIds;\n\n\t\tcase 'STOP_DRAGGING_BLOCKS':\n\t\t\treturn [];\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer tracking the visible blocks.\n *\n * @param {Record<string,boolean>} state  Current state.\n * @param {Object}                 action Dispatched action.\n *\n * @return {Record<string,boolean>} Block visibility.\n */\nexport function blockVisibility( state = {}, action ) {\n\tif ( action.type === 'SET_BLOCK_VISIBILITY' ) {\n\t\treturn {\n\t\t\t...state,\n\t\t\t...action.updates,\n\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Internal helper reducer for selectionStart and selectionEnd. Can hold a block\n * selection, represented by an object with property clientId.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nfunction selectionHelper( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'CLEAR_SELECTED_BLOCK': {\n\t\t\tif ( state.clientId ) {\n\t\t\t\treturn {};\n\t\t\t}\n\n\t\t\treturn state;\n\t\t}\n\t\tcase 'SELECT_BLOCK':\n\t\t\tif ( action.clientId === state.clientId ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn { clientId: action.clientId };\n\t\tcase 'REPLACE_INNER_BLOCKS':\n\t\tcase 'INSERT_BLOCKS': {\n\t\t\tif ( ! action.updateSelection || ! action.blocks.length ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn { clientId: action.blocks[ 0 ].clientId };\n\t\t}\n\t\tcase 'REMOVE_BLOCKS':\n\t\t\tif (\n\t\t\t\t! action.clientIds ||\n\t\t\t\t! action.clientIds.length ||\n\t\t\t\taction.clientIds.indexOf( state.clientId ) === -1\n\t\t\t) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {};\n\t\tcase 'REPLACE_BLOCKS': {\n\t\t\tif ( action.clientIds.indexOf( state.clientId ) === -1 ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\tconst blockToSelect =\n\t\t\t\taction.blocks[ action.indexToSelect ] ||\n\t\t\t\taction.blocks[ action.blocks.length - 1 ];\n\n\t\t\tif ( ! blockToSelect ) {\n\t\t\t\treturn {};\n\t\t\t}\n\n\t\t\tif ( blockToSelect.clientId === state.clientId ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn { clientId: blockToSelect.clientId };\n\t\t}\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the selection state.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function selection( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SELECTION_CHANGE':\n\t\t\tif ( action.clientId ) {\n\t\t\t\treturn {\n\t\t\t\t\tselectionStart: {\n\t\t\t\t\t\tclientId: action.clientId,\n\t\t\t\t\t\tattributeKey: action.attributeKey,\n\t\t\t\t\t\toffset: action.startOffset,\n\t\t\t\t\t},\n\t\t\t\t\tselectionEnd: {\n\t\t\t\t\t\tclientId: action.clientId,\n\t\t\t\t\t\tattributeKey: action.attributeKey,\n\t\t\t\t\t\toffset: action.endOffset,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tselectionStart: action.start || state.selectionStart,\n\t\t\t\tselectionEnd: action.end || state.selectionEnd,\n\t\t\t};\n\t\tcase 'RESET_SELECTION':\n\t\t\tconst { selectionStart, selectionEnd } = action;\n\t\t\treturn {\n\t\t\t\tselectionStart,\n\t\t\t\tselectionEnd,\n\t\t\t};\n\t\tcase 'MULTI_SELECT':\n\t\t\tconst { start, end } = action;\n\n\t\t\tif (\n\t\t\t\tstart === state.selectionStart?.clientId &&\n\t\t\t\tend === state.selectionEnd?.clientId\n\t\t\t) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tselectionStart: { clientId: start },\n\t\t\t\tselectionEnd: { clientId: end },\n\t\t\t};\n\t\tcase 'RESET_BLOCKS':\n\t\t\tconst startClientId = state?.selectionStart?.clientId;\n\t\t\tconst endClientId = state?.selectionEnd?.clientId;\n\n\t\t\t// Do nothing if there's no selected block.\n\t\t\tif ( ! startClientId && ! endClientId ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\t// If the start of the selection won't exist after reset, remove selection.\n\t\t\tif (\n\t\t\t\t! action.blocks.some(\n\t\t\t\t\t( block ) => block.clientId === startClientId\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tselectionStart: {},\n\t\t\t\t\tselectionEnd: {},\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// If the end of the selection won't exist after reset, collapse selection.\n\t\t\tif (\n\t\t\t\t! action.blocks.some(\n\t\t\t\t\t( block ) => block.clientId === endClientId\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\tselectionEnd: state.selectionStart,\n\t\t\t\t};\n\t\t\t}\n\t}\n\n\tconst selectionStart = selectionHelper( state.selectionStart, action );\n\tconst selectionEnd = selectionHelper( state.selectionEnd, action );\n\n\tif (\n\t\tselectionStart === state.selectionStart &&\n\t\tselectionEnd === state.selectionEnd\n\t) {\n\t\treturn state;\n\t}\n\n\treturn {\n\t\tselectionStart,\n\t\tselectionEnd,\n\t};\n}\n\n/**\n * Reducer returning whether the user is multi-selecting.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isMultiSelecting( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'START_MULTI_SELECT':\n\t\t\treturn true;\n\n\t\tcase 'STOP_MULTI_SELECT':\n\t\t\treturn false;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning whether selection is enabled.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isSelectionEnabled( state = true, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'TOGGLE_SELECTION':\n\t\t\treturn action.isSelectionEnabled;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the initial block selection.\n *\n * Currently this in only used to restore the selection after block deletion and\n * pasting new content.This reducer should eventually be removed in favour of setting\n * selection directly.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {number|null} Initial position: 0, -1 or null.\n */\nexport function initialPosition( state = null, action ) {\n\tif (\n\t\taction.type === 'REPLACE_BLOCKS' &&\n\t\taction.initialPosition !== undefined\n\t) {\n\t\treturn action.initialPosition;\n\t} else if (\n\t\t[\n\t\t\t'MULTI_SELECT',\n\t\t\t'SELECT_BLOCK',\n\t\t\t'RESET_SELECTION',\n\t\t\t'INSERT_BLOCKS',\n\t\t\t'REPLACE_INNER_BLOCKS',\n\t\t].includes( action.type )\n\t) {\n\t\treturn action.initialPosition;\n\t}\n\n\treturn state;\n}\n\nexport function blocksMode( state = {}, action ) {\n\tif ( action.type === 'TOGGLE_BLOCK_MODE' ) {\n\t\tconst { clientId } = action;\n\t\treturn {\n\t\t\t...state,\n\t\t\t[ clientId ]:\n\t\t\t\tstate[ clientId ] && state[ clientId ] === 'html'\n\t\t\t\t\t? 'visual'\n\t\t\t\t\t: 'html',\n\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the block insertion point visibility, either null if there\n * is not an explicit insertion point assigned, or an object of its `index` and\n * `rootClientId`.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function insertionPoint( state = null, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SHOW_INSERTION_POINT': {\n\t\t\tconst { rootClientId, index, __unstableWithInserter, operation } =\n\t\t\t\taction;\n\t\t\tconst nextState = {\n\t\t\t\trootClientId,\n\t\t\t\tindex,\n\t\t\t\t__unstableWithInserter,\n\t\t\t\toperation,\n\t\t\t};\n\n\t\t\t// Bail out updates if the states are the same.\n\t\t\treturn fastDeepEqual( state, nextState ) ? state : nextState;\n\t\t}\n\n\t\tcase 'HIDE_INSERTION_POINT':\n\t\t\treturn null;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning whether the post blocks match the defined template or not.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function template( state = { isValid: true }, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SET_TEMPLATE_VALIDITY':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisValid: action.isValid,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the editor setting.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function settings( state = SETTINGS_DEFAULTS, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'UPDATE_SETTINGS':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t...action.settings,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the user preferences.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {string} Updated state.\n */\nexport function preferences( state = PREFERENCES_DEFAULTS, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'INSERT_BLOCKS':\n\t\tcase 'REPLACE_BLOCKS':\n\t\t\treturn action.blocks.reduce( ( prevState, block ) => {\n\t\t\t\tconst { attributes, name: blockName } = block;\n\t\t\t\tconst match = select( blocksStore ).getActiveBlockVariation(\n\t\t\t\t\tblockName,\n\t\t\t\t\tattributes\n\t\t\t\t);\n\t\t\t\t// If a block variation match is found change the name to be the same with the\n\t\t\t\t// one that is used for block variations in the Inserter (`getItemFromVariation`).\n\t\t\t\tlet id = match?.name\n\t\t\t\t\t? `${ blockName }/${ match.name }`\n\t\t\t\t\t: blockName;\n\t\t\t\tconst insert = { name: id };\n\t\t\t\tif ( blockName === 'core/block' ) {\n\t\t\t\t\tinsert.ref = attributes.ref;\n\t\t\t\t\tid += '/' + attributes.ref;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...prevState,\n\t\t\t\t\tinsertUsage: {\n\t\t\t\t\t\t...prevState.insertUsage,\n\t\t\t\t\t\t[ id ]: {\n\t\t\t\t\t\t\ttime: action.time,\n\t\t\t\t\t\t\tcount: prevState.insertUsage[ id ]\n\t\t\t\t\t\t\t\t? prevState.insertUsage[ id ].count + 1\n\t\t\t\t\t\t\t\t: 1,\n\t\t\t\t\t\t\tinsert,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}, state );\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning an object where each key is a block client ID, its value\n * representing the settings for its nested blocks.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport const blockListSettings = ( state = {}, action ) => {\n\tswitch ( action.type ) {\n\t\t// Even if the replaced blocks have the same client ID, our logic\n\t\t// should correct the state.\n\t\tcase 'REPLACE_BLOCKS':\n\t\tcase 'REMOVE_BLOCKS': {\n\t\t\treturn Object.fromEntries(\n\t\t\t\tObject.entries( state ).filter(\n\t\t\t\t\t( [ id ] ) => ! action.clientIds.includes( id )\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t\tcase 'UPDATE_BLOCK_LIST_SETTINGS': {\n\t\t\tconst { clientId } = action;\n\t\t\tif ( ! action.settings ) {\n\t\t\t\tif ( state.hasOwnProperty( clientId ) ) {\n\t\t\t\t\tconst { [ clientId ]: removedBlock, ...restBlocks } = state;\n\t\t\t\t\treturn restBlocks;\n\t\t\t\t}\n\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\tif ( fastDeepEqual( state[ clientId ], action.settings ) ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ clientId ]: action.settings,\n\t\t\t};\n\t\t}\n\t}\n\treturn state;\n};\n\n/**\n * Reducer returning which mode is enabled.\n *\n * @param {string} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {string} Updated state.\n */\nexport function editorMode( state = 'edit', action ) {\n\t// Let inserting block in navigation mode always trigger Edit mode.\n\tif ( action.type === 'INSERT_BLOCKS' && state === 'navigation' ) {\n\t\treturn 'edit';\n\t}\n\n\tif ( action.type === 'SET_EDITOR_MODE' ) {\n\t\treturn action.mode;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning whether the block moving mode is enabled or not.\n *\n * @param {string|null} state  Current state.\n * @param {Object}      action Dispatched action.\n *\n * @return {string|null} Updated state.\n */\nexport function hasBlockMovingClientId( state = null, action ) {\n\tif ( action.type === 'SET_BLOCK_MOVING_MODE' ) {\n\t\treturn action.hasBlockMovingClientId;\n\t}\n\n\tif ( action.type === 'SET_EDITOR_MODE' ) {\n\t\treturn null;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer return an updated state representing the most recent block attribute\n * update. The state is structured as an object where the keys represent the\n * client IDs of blocks, the values a subset of attributes from the most recent\n * block update. The state is always reset to null if the last action is\n * anything other than an attributes update.\n *\n * @param {Object<string,Object>} state  Current state.\n * @param {Object}                action Action object.\n *\n * @return {[string,Object]} Updated state.\n */\nexport function lastBlockAttributesChange( state = null, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'UPDATE_BLOCK':\n\t\t\tif ( ! action.updates.attributes ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn { [ action.clientId ]: action.updates.attributes };\n\n\t\tcase 'UPDATE_BLOCK_ATTRIBUTES':\n\t\t\treturn action.clientIds.reduce(\n\t\t\t\t( accumulator, id ) => ( {\n\t\t\t\t\t...accumulator,\n\t\t\t\t\t[ id ]: action.uniqueByBlock\n\t\t\t\t\t\t? action.attributes[ id ]\n\t\t\t\t\t\t: action.attributes,\n\t\t\t\t} ),\n\t\t\t\t{}\n\t\t\t);\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning current highlighted block.\n *\n * @param {boolean} state  Current highlighted block.\n * @param {Object}  action Dispatched action.\n *\n * @return {string} Updated state.\n */\nexport function highlightedBlock( state, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'TOGGLE_BLOCK_HIGHLIGHT':\n\t\t\tconst { clientId, isHighlighted } = action;\n\n\t\t\tif ( isHighlighted ) {\n\t\t\t\treturn clientId;\n\t\t\t} else if ( state === clientId ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn state;\n\t\tcase 'SELECT_BLOCK':\n\t\t\tif ( action.clientId !== state ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the block insertion event list state.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function lastBlockInserted( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'INSERT_BLOCKS':\n\t\tcase 'REPLACE_BLOCKS':\n\t\tcase 'REPLACE_INNER_BLOCKS':\n\t\t\tif ( ! action.blocks.length ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\tconst clientIds = action.blocks.map( ( block ) => {\n\t\t\t\treturn block.clientId;\n\t\t\t} );\n\n\t\t\tconst source = action.meta?.source;\n\n\t\t\treturn { clientIds, source };\n\t\tcase 'RESET_BLOCKS':\n\t\t\treturn {};\n\t}\n\treturn state;\n}\n\n/**\n * Reducer returning the block that is eding temporarily edited as blocks.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function temporarilyEditingAsBlocks( state = '', action ) {\n\tif ( action.type === 'SET_TEMPORARILY_EDITING_AS_BLOCKS' ) {\n\t\treturn action.temporarilyEditingAsBlocks;\n\t}\n\treturn state;\n}\n\nconst combinedReducers = combineReducers( {\n\tblocks,\n\tisTyping,\n\tisBlockInterfaceHidden,\n\tdraggedBlocks,\n\tselection,\n\tisMultiSelecting,\n\tisSelectionEnabled,\n\tinitialPosition,\n\tblocksMode,\n\tblockListSettings,\n\tinsertionPoint,\n\ttemplate,\n\tsettings,\n\tpreferences,\n\tlastBlockAttributesChange,\n\teditorMode,\n\thasBlockMovingClientId,\n\thighlightedBlock,\n\tlastBlockInserted,\n\ttemporarilyEditingAsBlocks,\n\tblockVisibility,\n} );\n\nfunction withAutomaticChangeReset( reducer ) {\n\treturn ( state, action ) => {\n\t\tconst nextState = reducer( state, action );\n\n\t\tif ( ! state ) {\n\t\t\treturn nextState;\n\t\t}\n\n\t\t// Take over the last value without creating a new reference.\n\t\tnextState.automaticChangeStatus = state.automaticChangeStatus;\n\n\t\tif ( action.type === 'MARK_AUTOMATIC_CHANGE' ) {\n\t\t\treturn {\n\t\t\t\t...nextState,\n\t\t\t\tautomaticChangeStatus: 'pending',\n\t\t\t};\n\t\t}\n\n\t\tif (\n\t\t\taction.type === 'MARK_AUTOMATIC_CHANGE_FINAL' &&\n\t\t\tstate.automaticChangeStatus === 'pending'\n\t\t) {\n\t\t\treturn {\n\t\t\t\t...nextState,\n\t\t\t\tautomaticChangeStatus: 'final',\n\t\t\t};\n\t\t}\n\n\t\t// If there's a change that doesn't affect blocks or selection, maintain\n\t\t// the current status.\n\t\tif (\n\t\t\tnextState.blocks === state.blocks &&\n\t\t\tnextState.selection === state.selection\n\t\t) {\n\t\t\treturn nextState;\n\t\t}\n\n\t\t// As long as the state is not final, ignore any selection changes.\n\t\tif (\n\t\t\tnextState.automaticChangeStatus !== 'final' &&\n\t\t\tnextState.selection !== state.selection\n\t\t) {\n\t\t\treturn nextState;\n\t\t}\n\n\t\t// Reset the status if blocks change or selection changes (when status is final).\n\t\treturn {\n\t\t\t...nextState,\n\t\t\tautomaticChangeStatus: undefined,\n\t\t};\n\t};\n}\n\nexport default withAutomaticChangeReset( combinedReducers );\n"]}
{"version":3,"sources":["@wordpress/block-editor/src/hooks/aria-label.js"],"names":["addFilter","hasBlockSupport","ARIA_LABEL_SCHEMA","type","source","attribute","selector","addAttribute","settings","attributes","ariaLabel","addSaveProps","extraProps","blockType"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,SAAT,QAA0B,kBAA1B;AACA,SAASC,eAAT,QAAgC,mBAAhC;AAEA,MAAMC,iBAAiB,GAAG;AACzBC,EAAAA,IAAI,EAAE,QADmB;AAEzBC,EAAAA,MAAM,EAAE,WAFiB;AAGzBC,EAAAA,SAAS,EAAE,YAHc;AAIzBC,EAAAA,QAAQ,EAAE;AAJe,CAA1B;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,CAAuBC,QAAvB,EAAkC;AAAA;;AACxC;AACA,MAAKA,QAAL,aAAKA,QAAL,uCAAKA,QAAQ,CAAEC,UAAf,0EAAK,qBAAsBC,SAA3B,kDAAK,sBAAiCP,IAAtC,EAA6C;AAC5C,WAAOK,QAAP;AACA;;AACD,MAAKP,eAAe,CAAEO,QAAF,EAAY,WAAZ,CAApB,EAAgD;AAC/C;AACAA,IAAAA,QAAQ,CAACC,UAAT,GAAsB,EACrB,GAAGD,QAAQ,CAACC,UADS;AAErBC,MAAAA,SAAS,EAAER;AAFU,KAAtB;AAIA;;AAED,SAAOM,QAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,YAAT,CAAuBC,UAAvB,EAAmCC,SAAnC,EAA8CJ,UAA9C,EAA2D;AACjE,MAAKR,eAAe,CAAEY,SAAF,EAAa,WAAb,CAApB,EAAiD;AAChDD,IAAAA,UAAU,CAAE,YAAF,CAAV,GACCH,UAAU,CAACC,SAAX,KAAyB,EAAzB,GAA8B,IAA9B,GAAqCD,UAAU,CAACC,SADjD;AAEA;;AAED,SAAOE,UAAP;AACA;AAEDZ,SAAS,CACR,0BADQ,EAER,0BAFQ,EAGRO,YAHQ,CAAT;AAKAP,SAAS,CACR,kCADQ,EAER,2BAFQ,EAGRW,YAHQ,CAAT","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { addFilter } from '@wordpress/hooks';\nimport { hasBlockSupport } from '@wordpress/blocks';\n\nconst ARIA_LABEL_SCHEMA = {\n\ttype: 'string',\n\tsource: 'attribute',\n\tattribute: 'aria-label',\n\tselector: '*',\n};\n\n/**\n * Filters registered block settings, extending attributes with ariaLabel using aria-label\n * of the first node.\n *\n * @param {Object} settings Original block settings.\n *\n * @return {Object} Filtered block settings.\n */\nexport function addAttribute( settings ) {\n\t// Allow blocks to specify their own attribute definition with default values if needed.\n\tif ( settings?.attributes?.ariaLabel?.type ) {\n\t\treturn settings;\n\t}\n\tif ( hasBlockSupport( settings, 'ariaLabel' ) ) {\n\t\t// Gracefully handle if settings.attributes is undefined.\n\t\tsettings.attributes = {\n\t\t\t...settings.attributes,\n\t\t\tariaLabel: ARIA_LABEL_SCHEMA,\n\t\t};\n\t}\n\n\treturn settings;\n}\n\n/**\n * Override props assigned to save component to inject aria-label, if block\n * supports ariaLabel. This is only applied if the block's save result is an\n * element and not a markup string.\n *\n * @param {Object} extraProps Additional props applied to save element.\n * @param {Object} blockType  Block type.\n * @param {Object} attributes Current block attributes.\n *\n * @return {Object} Filtered props applied to save element.\n */\nexport function addSaveProps( extraProps, blockType, attributes ) {\n\tif ( hasBlockSupport( blockType, 'ariaLabel' ) ) {\n\t\textraProps[ 'aria-label' ] =\n\t\t\tattributes.ariaLabel === '' ? null : attributes.ariaLabel;\n\t}\n\n\treturn extraProps;\n}\n\naddFilter(\n\t'blocks.registerBlockType',\n\t'core/ariaLabel/attribute',\n\taddAttribute\n);\naddFilter(\n\t'blocks.getSaveContent.extraProps',\n\t'core/ariaLabel/save-props',\n\taddSaveProps\n);\n"]}
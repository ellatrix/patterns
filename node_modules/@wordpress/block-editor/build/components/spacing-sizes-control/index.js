"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SpacingSizesControl;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classnames = _interopRequireDefault(require("classnames"));

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _allInputControl = _interopRequireDefault(require("./all-input-control"));

var _inputControls = _interopRequireDefault(require("./input-controls"));

var _axialInputControls = _interopRequireDefault(require("./axial-input-controls"));

var _linkedButton = _interopRequireDefault(require("./linked-button"));

var _utils = require("./utils");

var _useSetting = _interopRequireDefault(require("../use-setting"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function SpacingSizesControl(_ref) {
  let {
    inputProps,
    onChange,
    label = (0, _i18n.__)('Spacing Control'),
    values,
    sides,
    splitOnAxis = false,
    useSelect,
    minimumCustomValue = 0,
    onMouseOver,
    onMouseOut
  } = _ref;
  const spacingSizes = [{
    name: 0,
    slug: '0',
    size: 0
  }, ...((0, _useSetting.default)('spacing.spacingSizes') || [])];

  if (spacingSizes.length > 8) {
    spacingSizes.unshift({
      name: (0, _i18n.__)('Default'),
      slug: 'default',
      size: undefined
    });
  }

  const inputValues = values || _utils.DEFAULT_VALUES;
  const hasInitialValue = (0, _utils.isValuesDefined)(values);
  const hasOneSide = (sides === null || sides === void 0 ? void 0 : sides.length) === 1;
  const [isLinked, setIsLinked] = (0, _element.useState)(!hasInitialValue || !(0, _utils.isValuesMixed)(inputValues, sides) || hasOneSide);

  const toggleLinked = () => {
    setIsLinked(!isLinked);
  };

  const handleOnChange = nextValue => {
    const newValues = { ...values,
      ...nextValue
    };
    onChange(newValues);
  };

  const inputControlProps = { ...inputProps,
    onChange: handleOnChange,
    isLinked,
    sides,
    values: inputValues,
    spacingSizes,
    useSelect,
    type: label,
    minimumCustomValue,
    onMouseOver,
    onMouseOut
  };
  return (0, _element.createElement)("fieldset", {
    className: (0, _classnames.default)('component-spacing-sizes-control', {
      'is-unlinked': !isLinked
    })
  }, (0, _element.createElement)(_components.BaseControl.VisualLabel, {
    as: "legend"
  }, label), !hasOneSide && (0, _element.createElement)(_linkedButton.default, {
    onClick: toggleLinked,
    isLinked: isLinked
  }), isLinked && (0, _element.createElement)(_allInputControl.default, (0, _extends2.default)({
    "aria-label": label
  }, inputControlProps)), !isLinked && splitOnAxis && (0, _element.createElement)(_axialInputControls.default, inputControlProps), !isLinked && !splitOnAxis && (0, _element.createElement)(_inputControls.default, inputControlProps));
}
//# sourceMappingURL=index.js.map
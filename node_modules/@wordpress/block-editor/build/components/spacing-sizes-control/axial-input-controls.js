"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = AxialInputControls;

var _element = require("@wordpress/element");

var _spacingInputControl = _interopRequireDefault(require("./spacing-input-control"));

var _utils = require("./utils");

/**
 * Internal dependencies
 */
const groupedSides = ['vertical', 'horizontal'];

function AxialInputControls(_ref) {
  let {
    onChange,
    values,
    sides,
    spacingSizes,
    type,
    minimumCustomValue,
    onMouseOver,
    onMouseOut
  } = _ref;

  const createHandleOnChange = side => next => {
    if (!onChange) {
      return;
    }

    const nextValues = { ...values
    };

    if (side === 'vertical') {
      nextValues.top = next;
      nextValues.bottom = next;
    }

    if (side === 'horizontal') {
      nextValues.left = next;
      nextValues.right = next;
    }

    onChange(nextValues);
  }; // Filter sides if custom configuration provided, maintaining default order.


  const filteredSides = sides !== null && sides !== void 0 && sides.length ? groupedSides.filter(side => sides.includes(side)) : groupedSides;
  return (0, _element.createElement)(_element.Fragment, null, filteredSides.map(side => {
    const axisValue = side === 'vertical' ? values.top : values.left;
    return (0, _element.createElement)(_spacingInputControl.default, {
      value: axisValue,
      onChange: createHandleOnChange(side),
      label: _utils.LABELS[side],
      key: `spacing-sizes-control-${side}`,
      withInputField: false,
      side: side,
      spacingSizes: spacingSizes,
      type: type,
      minimumCustomValue: minimumCustomValue,
      onMouseOver: onMouseOver,
      onMouseOut: onMouseOut
    });
  }));
}
//# sourceMappingURL=axial-input-controls.js.map
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LABELS = exports.DEFAULT_VALUES = exports.ALL_SIDES = void 0;
exports.getAllRawValue = getAllRawValue;
exports.getCustomValueFromPreset = getCustomValueFromPreset;
exports.getPresetValueFromCustomValue = getPresetValueFromCustomValue;
exports.getSliderValueFromPreset = getSliderValueFromPreset;
exports.getSpacingPresetCssVar = getSpacingPresetCssVar;
exports.getSpacingPresetSlug = getSpacingPresetSlug;
exports.isValueSpacingPreset = isValueSpacingPreset;
exports.isValuesDefined = isValuesDefined;
exports.isValuesMixed = isValuesMixed;

var _i18n = require("@wordpress/i18n");

/**
 * WordPress dependencies
 */

/**
 * Checks is given value is a spacing preset.
 *
 * @param {string} value Value to check
 *
 * @return {boolean} Return true if value is string in format var:preset|spacing|.
 */
function isValueSpacingPreset(value) {
  if (!(value !== null && value !== void 0 && value.includes)) {
    return false;
  }

  return value === '0' || value.includes('var:preset|spacing|');
}
/**
 * Converts a spacing preset into a custom value.
 *
 * @param {string} value        Value to convert
 * @param {Array}  spacingSizes Array of the current spacing preset objects
 *
 * @return {string} Mapping of the spacing preset to its equivalent custom value.
 */


function getCustomValueFromPreset(value, spacingSizes) {
  if (!isValueSpacingPreset(value)) {
    return value;
  }

  const slug = getSpacingPresetSlug(value);
  const spacingSize = spacingSizes.find(size => String(size.slug) === slug);
  return spacingSize === null || spacingSize === void 0 ? void 0 : spacingSize.size;
}
/**
 * Converts a custom value to preset value if one can be found.
 *
 * Returns value as-is if no match is found.
 *
 * @param {string} value        Value to convert
 * @param {Array}  spacingSizes Array of the current spacing preset objects
 *
 * @return {string} The preset value if it can be found.
 */


function getPresetValueFromCustomValue(value, spacingSizes) {
  // Return value as-is if it is already a preset;
  if (isValueSpacingPreset(value)) {
    return value;
  }

  const spacingMatch = spacingSizes.find(size => String(size.size) === String(value));

  if (spacingMatch !== null && spacingMatch !== void 0 && spacingMatch.slug) {
    return `var:preset|spacing|${spacingMatch.slug}`;
  }

  return value;
}
/**
 * Converts a spacing preset into a custom value.
 *
 * @param {string} value Value to convert.
 *
 * @return {string | undefined} CSS var string for given spacing preset value.
 */


function getSpacingPresetCssVar(value) {
  if (!value) {
    return;
  }

  const slug = value.match(/var:preset\|spacing\|(.+)/);

  if (!slug) {
    return value;
  }

  return `var(--wp--preset--spacing--${slug[1]})`;
}
/**
 * Returns the slug section of the given spacing preset string.
 *
 * @param {string} value Value to extract slug from.
 *
 * @return {string|undefined} The int value of the slug from given spacing preset.
 */


function getSpacingPresetSlug(value) {
  if (!value) {
    return;
  }

  if (value === '0' || value === 'default') {
    return value;
  }

  const slug = value.match(/var:preset\|spacing\|(.+)/);
  return slug ? slug[1] : undefined;
}
/**
 * Converts spacing preset value into a Range component value .
 *
 * @param {string} presetValue  Value to convert to Range value.
 * @param {Array}  spacingSizes Array of current spacing preset value objects.
 *
 * @return {number} The int value for use in Range control.
 */


function getSliderValueFromPreset(presetValue, spacingSizes) {
  if (presetValue === undefined) {
    return 0;
  }

  const slug = parseFloat(presetValue, 10) === 0 ? '0' : getSpacingPresetSlug(presetValue);
  const sliderValue = spacingSizes.findIndex(spacingSize => {
    return String(spacingSize.slug) === slug;
  }); // Returning NaN rather than undefined as undefined makes range control thumb sit in center

  return sliderValue !== -1 ? sliderValue : NaN;
}

const LABELS = {
  all: (0, _i18n.__)('All sides'),
  top: (0, _i18n.__)('Top'),
  bottom: (0, _i18n.__)('Bottom'),
  left: (0, _i18n.__)('Left'),
  right: (0, _i18n.__)('Right'),
  mixed: (0, _i18n.__)('Mixed'),
  vertical: (0, _i18n.__)('Vertical'),
  horizontal: (0, _i18n.__)('Horizontal')
};
exports.LABELS = LABELS;
const DEFAULT_VALUES = {
  top: undefined,
  right: undefined,
  bottom: undefined,
  left: undefined
};
exports.DEFAULT_VALUES = DEFAULT_VALUES;
const ALL_SIDES = ['top', 'right', 'bottom', 'left'];
/**
 * Gets an items with the most occurrence within an array
 * https://stackoverflow.com/a/20762713
 *
 * @param {Array<any>} arr Array of items to check.
 * @return {any} The item with the most occurrences.
 */

exports.ALL_SIDES = ALL_SIDES;

function mode(arr) {
  return arr.sort((a, b) => arr.filter(v => v === a).length - arr.filter(v => v === b).length).pop();
}
/**
 * Gets the 'all' input value from values data.
 *
 * @param {Object} values Box spacing values
 *
 * @return {string} The most common value from all sides of box.
 */


function getAllRawValue() {
  let values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return mode(Object.values(values));
}
/**
 * Checks to determine if values are mixed.
 *
 * @param {Object} values Box values.
 * @param {Array}  sides  Sides that values relate to.
 *
 * @return {boolean} Whether values are mixed.
 */


function isValuesMixed() {
  let values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let sides = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ALL_SIDES;
  return Object.values(values).length >= 1 && Object.values(values).length < sides.length || new Set(Object.values(values)).size > 1;
}
/**
 * Checks to determine if values are defined.
 *
 * @param {Object} values Box values.
 *
 * @return {boolean} Whether values are defined.
 */


function isValuesDefined(values) {
  if (values === undefined || values === null) {
    return false;
  }

  return Object.values(values).filter(value => !!value).length > 0;
}
//# sourceMappingURL=utils.js.map
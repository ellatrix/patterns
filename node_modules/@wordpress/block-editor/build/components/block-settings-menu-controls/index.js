"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _components = require("@wordpress/components");

var _data = require("@wordpress/data");

var _convertToGroupButtons = require("../convert-to-group-buttons");

var _blockLock = require("../block-lock");

var _store = require("../../store");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const {
  Fill,
  Slot
} = (0, _components.createSlotFill)('BlockSettingsMenuControls');

const BlockSettingsMenuControlsSlot = _ref => {
  let {
    fillProps,
    clientIds = null,
    __unstableDisplayLocation
  } = _ref;
  const {
    selectedBlocks,
    selectedClientIds,
    canRemove
  } = (0, _data.useSelect)(select => {
    const {
      getBlockNamesByClientId,
      getSelectedBlockClientIds,
      canRemoveBlocks
    } = select(_store.store);
    const ids = clientIds !== null ? clientIds : getSelectedBlockClientIds();
    return {
      selectedBlocks: getBlockNamesByClientId(ids),
      selectedClientIds: ids,
      canRemove: canRemoveBlocks(ids)
    };
  }, [clientIds]);
  const {
    canLock
  } = (0, _blockLock.useBlockLock)(selectedClientIds[0]);
  const showLockButton = selectedClientIds.length === 1 && canLock; // Check if current selection of blocks is Groupable or Ungroupable
  // and pass this props down to ConvertToGroupButton.

  const convertToGroupButtonProps = (0, _convertToGroupButtons.useConvertToGroupButtonProps)();
  const {
    isGroupable,
    isUngroupable
  } = convertToGroupButtonProps;
  const showConvertToGroupButton = (isGroupable || isUngroupable) && canRemove;
  return (0, _element.createElement)(Slot, {
    fillProps: { ...fillProps,
      __unstableDisplayLocation,
      selectedBlocks,
      selectedClientIds
    }
  }, fills => {
    if (!(fills !== null && fills !== void 0 && fills.length) > 0 && !showConvertToGroupButton && !showLockButton) {
      return null;
    }

    return (0, _element.createElement)(_components.MenuGroup, null, showLockButton && (0, _element.createElement)(_blockLock.BlockLockMenuItem, {
      clientId: selectedClientIds[0]
    }), fills, showConvertToGroupButton && (0, _element.createElement)(_convertToGroupButtons.ConvertToGroupButton, (0, _extends2.default)({}, convertToGroupButtonProps, {
      onClose: fillProps === null || fillProps === void 0 ? void 0 : fillProps.onClose
    })));
  });
};
/**
 * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/block-settings-menu-controls/README.md
 *
 * @param {Object} props Fill props.
 * @return {WPElement} Element.
 */


function BlockSettingsMenuControls(_ref2) {
  let { ...props
  } = _ref2;
  return (0, _element.createElement)(_components.__experimentalStyleProvider, {
    document: document
  }, (0, _element.createElement)(Fill, props));
}

BlockSettingsMenuControls.Slot = BlockSettingsMenuControlsSlot;
var _default = BlockSettingsMenuControls;
exports.default = _default;
//# sourceMappingURL=index.js.map
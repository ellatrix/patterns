"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.blockSettingsScreens = void 0;
exports.default = BottomSheetSettings;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _blockEditor = require("@wordpress/block-editor");

var _components = require("@wordpress/components");

var _data = require("@wordpress/data");

var _containerNative = _interopRequireDefault(require("./container.native.scss"));

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const blockSettingsScreens = {
  settings: 'Settings',
  color: 'Color',
  focalPoint: 'FocalPoint',
  linkPicker: 'linkPicker',
  imageLinkDestinations: 'imageLinkDestinations'
};
exports.blockSettingsScreens = blockSettingsScreens;

function BottomSheetSettings(props) {
  const colorSettings = (0, _blockEditor.useMultipleOriginColorsAndGradients)();
  const {
    closeGeneralSidebar
  } = (0, _data.useDispatch)('core/edit-post');
  const editorSidebarOpened = (0, _data.useSelect)(select => select('core/edit-post').isEditorSidebarOpened());
  return (0, _element.createElement)(_components.BottomSheet, (0, _extends2.default)({
    isVisible: editorSidebarOpened,
    onClose: closeGeneralSidebar,
    hideHeader: true,
    contentStyle: _containerNative.default.content,
    hasNavigation: true,
    testID: "block-settings-modal"
  }, props), (0, _element.createElement)(_components.BottomSheet.NavigationContainer, {
    animate: true,
    main: true
  }, (0, _element.createElement)(_components.BottomSheet.NavigationScreen, {
    name: blockSettingsScreens.settings
  }, (0, _element.createElement)(_blockEditor.InspectorControls.Slot, null)), (0, _element.createElement)(_components.BottomSheet.NavigationScreen, {
    name: _components.BottomSheet.SubSheet.screenName
  }, (0, _element.createElement)(_components.BottomSheet.SubSheet.Slot, null)), (0, _element.createElement)(_components.BottomSheet.NavigationScreen, {
    name: blockSettingsScreens.color
  }, (0, _element.createElement)(_components.ColorSettings, {
    defaultSettings: colorSettings
  })), (0, _element.createElement)(_components.BottomSheet.NavigationScreen, {
    name: blockSettingsScreens.focalPoint,
    fullScreen: true
  }, (0, _element.createElement)(_components.FocalPointSettingsPanel, null)), (0, _element.createElement)(_components.BottomSheet.NavigationScreen, {
    name: blockSettingsScreens.linkPicker,
    fullScreen: true,
    isScrollable: true
  }, (0, _element.createElement)(_components.LinkPickerScreen, {
    returnScreenName: blockSettingsScreens.settings
  })), (0, _element.createElement)(_components.BottomSheet.NavigationScreen, {
    name: blockSettingsScreens.imageLinkDestinations
  }, (0, _element.createElement)(_components.ImageLinkDestinationsScreen, props))));
}
//# sourceMappingURL=container.native.js.map
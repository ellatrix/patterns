"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = BlockTypesList;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _reactNative = require("react-native");

var _components = require("@wordpress/components");

var _compose = require("@wordpress/compose");

var _style = _interopRequireDefault(require("./style.scss"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const MIN_COL_NUM = 3;

function BlockTypesList(_ref) {
  let {
    name,
    sections,
    onSelect,
    label,
    listProps,
    initialNumToRender = 3
  } = _ref;
  const [numberOfColumns, setNumberOfColumns] = (0, _element.useState)(MIN_COL_NUM);
  const [itemWidth, setItemWidth] = (0, _element.useState)();
  const [maxWidth, setMaxWidth] = (0, _element.useState)();
  (0, _element.useEffect)(() => {
    const dimensionsChangeSubscription = _reactNative.Dimensions.addEventListener('change', onLayout);

    onLayout();
    return () => {
      dimensionsChangeSubscription.remove();
    };
  }, []);

  function calculateItemWidth() {
    const {
      paddingLeft: itemPaddingLeft,
      paddingRight: itemPaddingRight
    } = _components.InserterButton.Styles.modalItem;
    const {
      width
    } = _components.InserterButton.Styles.modalIconWrapper;
    return width + itemPaddingLeft + itemPaddingRight;
  }

  function onLayout() {
    const columnStyle = _style.default['block-types-list__column'];
    const sumLeftRightPadding = columnStyle.paddingLeft + columnStyle.paddingRight;

    const bottomSheetWidth = _components.BottomSheet.getWidth();

    const containerTotalWidth = bottomSheetWidth - sumLeftRightPadding;
    const itemTotalWidth = calculateItemWidth();
    const columnsFitToWidth = Math.floor(containerTotalWidth / itemTotalWidth);
    const numColumns = Math.max(MIN_COL_NUM, columnsFitToWidth);
    setNumberOfColumns(numColumns);
    setMaxWidth(containerTotalWidth / numColumns);

    if (columnsFitToWidth < MIN_COL_NUM) {
      const updatedItemWidth = (bottomSheetWidth - 2 * sumLeftRightPadding) / MIN_COL_NUM;
      setItemWidth(updatedItemWidth);
    }
  }

  const contentContainerStyle = _reactNative.StyleSheet.flatten(listProps.contentContainerStyle);

  const renderSection = _ref2 => {
    let {
      item
    } = _ref2;
    return (0, _element.createElement)(_reactNative.TouchableWithoutFeedback, {
      accessible: false
    }, (0, _element.createElement)(_reactNative.FlatList, {
      data: item.list,
      key: `InserterUI-${name}-${numberOfColumns}` // Re-render when numberOfColumns changes.
      ,
      numColumns: numberOfColumns,
      ItemSeparatorComponent: () => (0, _element.createElement)(_reactNative.TouchableWithoutFeedback, {
        accessible: false
      }, (0, _element.createElement)(_reactNative.View, {
        style: _style.default['block-types-list__row-separator']
      })),
      scrollEnabled: false,
      renderItem: renderListItem
    }));
  };

  const renderListItem = _ref3 => {
    let {
      item
    } = _ref3;
    return (0, _element.createElement)(_components.InserterButton, {
      item: item,
      itemWidth: itemWidth,
      maxWidth: maxWidth,
      onSelect: onSelect
    });
  };

  const colorScheme = (0, _compose.usePreferredColorScheme)();
  const sectionHeaderGradientValue = colorScheme === 'light' ? 'linear-gradient(#fff 70%, rgba(255, 255, 255, 0))' : 'linear-gradient(#2e2e2e 70%, rgba(46, 46, 46, 0))';
  const sectionHeaderTitleStyles = (0, _compose.usePreferredColorSchemeStyle)(_style.default['block-types-list__section-header-title'], _style.default['block-types-list__section-header-title--dark']);

  const renderSectionHeader = _ref4 => {
    let {
      section: {
        metadata
      }
    } = _ref4;

    if (!(metadata !== null && metadata !== void 0 && metadata.icon) || !(metadata !== null && metadata !== void 0 && metadata.title)) {
      return null;
    }

    return (0, _element.createElement)(_reactNative.TouchableWithoutFeedback, {
      accessible: false
    }, (0, _element.createElement)(_components.Gradient, {
      gradientValue: sectionHeaderGradientValue,
      style: _style.default['block-types-list__section-header']
    }, metadata === null || metadata === void 0 ? void 0 : metadata.icon, (0, _element.createElement)(_reactNative.Text, {
      style: sectionHeaderTitleStyles
    }, metadata === null || metadata === void 0 ? void 0 : metadata.title)));
  };

  return (0, _element.createElement)(_reactNative.SectionList, (0, _extends2.default)({
    onLayout: onLayout,
    testID: `InserterUI-${name}`,
    accessibilityLabel: label,
    keyboardShouldPersistTaps: "always",
    sections: sections,
    initialNumToRender: initialNumToRender,
    renderItem: renderSection,
    renderSectionHeader: renderSectionHeader
  }, listProps, {
    contentContainerStyle: { ...contentContainerStyle,
      paddingBottom: Math.max(listProps.safeAreaBottomInset, contentContainerStyle.paddingBottom)
    }
  }));
}
//# sourceMappingURL=index.native.js.map
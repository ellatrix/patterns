"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classnames = _interopRequireDefault(require("classnames"));

var _data = require("@wordpress/data");

var _blockSelectButton = _interopRequireDefault(require("./block-select-button"));

var _blockDraggable = _interopRequireDefault(require("../block-draggable"));

var _store = require("../../store");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const ListViewBlockContents = (0, _element.forwardRef)((_ref, ref) => {
  let {
    onClick,
    onToggleExpanded,
    block,
    isSelected,
    position,
    siblingBlockCount,
    level,
    isExpanded,
    selectedClientIds,
    ...props
  } = _ref;
  const {
    clientId
  } = block;
  const {
    blockMovingClientId,
    selectedBlockInBlockEditor
  } = (0, _data.useSelect)(select => {
    const {
      hasBlockMovingClientId,
      getSelectedBlockClientId
    } = select(_store.store);
    return {
      blockMovingClientId: hasBlockMovingClientId(),
      selectedBlockInBlockEditor: getSelectedBlockClientId()
    };
  }, [clientId]);
  const isBlockMoveTarget = blockMovingClientId && selectedBlockInBlockEditor === clientId;
  const className = (0, _classnames.default)('block-editor-list-view-block-contents', {
    'is-dropping-before': isBlockMoveTarget
  }); // Only include all selected blocks if the currently clicked on block
  // is one of the selected blocks. This ensures that if a user attempts
  // to drag a block that isn't part of the selection, they're still able
  // to drag it and rearrange its position.

  const draggableClientIds = selectedClientIds.includes(clientId) ? selectedClientIds : [clientId];
  return (0, _element.createElement)(_blockDraggable.default, {
    clientIds: draggableClientIds
  }, _ref2 => {
    let {
      draggable,
      onDragStart,
      onDragEnd
    } = _ref2;
    return (0, _element.createElement)(_blockSelectButton.default, (0, _extends2.default)({
      ref: ref,
      className: className,
      block: block,
      onClick: onClick,
      onToggleExpanded: onToggleExpanded,
      isSelected: isSelected,
      position: position,
      siblingBlockCount: siblingBlockCount,
      level: level,
      draggable: draggable,
      onDragStart: onDragStart,
      onDragEnd: onDragEnd,
      isExpanded: isExpanded
    }, props));
  });
});
var _default = ListViewBlockContents;
exports.default = _default;
//# sourceMappingURL=block-contents.js.map
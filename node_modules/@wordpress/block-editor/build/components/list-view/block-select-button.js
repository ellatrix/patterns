"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _classnames = _interopRequireDefault(require("classnames"));

var _components = require("@wordpress/components");

var _icons = require("@wordpress/icons");

var _keycodes = require("@wordpress/keycodes");

var _blockIcon = _interopRequireDefault(require("../block-icon"));

var _useBlockDisplayInformation = _interopRequireDefault(require("../use-block-display-information"));

var _useBlockDisplayTitle = _interopRequireDefault(require("../block-title/use-block-display-title"));

var _expander = _interopRequireDefault(require("./expander"));

var _blockLock = require("../block-lock");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function ListViewBlockSelectButton(_ref, ref) {
  let {
    className,
    block: {
      clientId
    },
    onClick,
    onToggleExpanded,
    tabIndex,
    onFocus,
    onDragStart,
    onDragEnd,
    draggable
  } = _ref;
  const blockInformation = (0, _useBlockDisplayInformation.default)(clientId);
  const blockTitle = (0, _useBlockDisplayTitle.default)({
    clientId,
    context: 'list-view'
  });
  const {
    isLocked
  } = (0, _blockLock.useBlockLock)(clientId); // The `href` attribute triggers the browser's native HTML drag operations.
  // When the link is dragged, the element's outerHTML is set in DataTransfer object as text/html.
  // We need to clear any HTML drag data to prevent `pasteHandler` from firing
  // inside the `useOnBlockDrop` hook.

  const onDragStartHandler = event => {
    event.dataTransfer.clearData();
    onDragStart === null || onDragStart === void 0 ? void 0 : onDragStart(event);
  };

  function onKeyDownHandler(event) {
    if (event.keyCode === _keycodes.ENTER || event.keyCode === _keycodes.SPACE) {
      onClick(event);
    }
  }

  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_components.Button, {
    className: (0, _classnames.default)('block-editor-list-view-block-select-button', className),
    onClick: onClick,
    onKeyDown: onKeyDownHandler,
    ref: ref,
    tabIndex: tabIndex,
    onFocus: onFocus,
    onDragStart: onDragStartHandler,
    onDragEnd: onDragEnd,
    draggable: draggable,
    href: `#block-${clientId}`,
    "aria-hidden": true
  }, (0, _element.createElement)(_expander.default, {
    onClick: onToggleExpanded
  }), (0, _element.createElement)(_blockIcon.default, {
    icon: blockInformation === null || blockInformation === void 0 ? void 0 : blockInformation.icon,
    showColors: true
  }), (0, _element.createElement)(_components.__experimentalHStack, {
    alignment: "center",
    className: "block-editor-list-view-block-select-button__label-wrapper",
    justify: "flex-start",
    spacing: 1
  }, (0, _element.createElement)("span", {
    className: "block-editor-list-view-block-select-button__title"
  }, (0, _element.createElement)(_components.__experimentalTruncate, {
    ellipsizeMode: "auto"
  }, blockTitle)), (blockInformation === null || blockInformation === void 0 ? void 0 : blockInformation.anchor) && (0, _element.createElement)("span", {
    className: "block-editor-list-view-block-select-button__anchor-wrapper"
  }, (0, _element.createElement)(_components.__experimentalTruncate, {
    className: "block-editor-list-view-block-select-button__anchor",
    ellipsizeMode: "auto"
  }, blockInformation.anchor)), isLocked && (0, _element.createElement)("span", {
    className: "block-editor-list-view-block-select-button__lock"
  }, (0, _element.createElement)(_icons.Icon, {
    icon: _icons.lockSmall
  })))));
}

var _default = (0, _element.forwardRef)(ListViewBlockSelectButton);

exports.default = _default;
//# sourceMappingURL=block-select-button.js.map
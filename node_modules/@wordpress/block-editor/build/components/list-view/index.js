"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.BLOCK_LIST_ITEM_HEIGHT = void 0;

var _element = require("@wordpress/element");

var _compose = require("@wordpress/compose");

var _components = require("@wordpress/components");

var _data = require("@wordpress/data");

var _i18n = require("@wordpress/i18n");

var _branch = _interopRequireDefault(require("./branch"));

var _context = require("./context");

var _dropIndicator = _interopRequireDefault(require("./drop-indicator"));

var _useBlockSelection = _interopRequireDefault(require("./use-block-selection"));

var _useListViewClientIds = _interopRequireDefault(require("./use-list-view-client-ids"));

var _useListViewDropZone = _interopRequireDefault(require("./use-list-view-drop-zone"));

var _useListViewExpandSelectedItem = _interopRequireDefault(require("./use-list-view-expand-selected-item"));

var _store = require("../../store");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const expanded = (state, action) => {
  if (Array.isArray(action.clientIds)) {
    return { ...state,
      ...action.clientIds.reduce((newState, id) => ({ ...newState,
        [id]: action.type === 'expand'
      }), {})
    };
  }

  return state;
};

const BLOCK_LIST_ITEM_HEIGHT = 36;
/**
 * Show a hierarchical list of blocks.
 *
 * @param {Object}  props                 Components props.
 * @param {string}  props.id              An HTML element id for the root element of ListView.
 * @param {Array}   props.blocks          Custom subset of block client IDs to be used instead of the default hierarchy.
 * @param {boolean} props.showBlockMovers Flag to enable block movers
 * @param {boolean} props.isExpanded      Flag to determine whether nested levels are expanded by default.
 * @param {Object}  ref                   Forwarded ref
 */

exports.BLOCK_LIST_ITEM_HEIGHT = BLOCK_LIST_ITEM_HEIGHT;

function ListView(_ref, ref) {
  let {
    id,
    blocks,
    showBlockMovers = false,
    isExpanded = false
  } = _ref;
  const {
    clientIdsTree,
    draggedClientIds,
    selectedClientIds
  } = (0, _useListViewClientIds.default)(blocks);
  const {
    visibleBlockCount,
    shouldShowInnerBlocks
  } = (0, _data.useSelect)(select => {
    const {
      getGlobalBlockCount,
      getClientIdsOfDescendants,
      __unstableGetEditorMode
    } = select(_store.store);
    const draggedBlockCount = (draggedClientIds === null || draggedClientIds === void 0 ? void 0 : draggedClientIds.length) > 0 ? getClientIdsOfDescendants(draggedClientIds).length + 1 : 0;
    return {
      visibleBlockCount: getGlobalBlockCount() - draggedBlockCount,
      shouldShowInnerBlocks: __unstableGetEditorMode() !== 'zoom-out'
    };
  }, [draggedClientIds]);
  const {
    updateBlockSelection
  } = (0, _useBlockSelection.default)();
  const [expandedState, setExpandedState] = (0, _element.useReducer)(expanded, {});
  const {
    ref: dropZoneRef,
    target: blockDropTarget
  } = (0, _useListViewDropZone.default)();
  const elementRef = (0, _element.useRef)();
  const treeGridRef = (0, _compose.useMergeRefs)([elementRef, dropZoneRef, ref]);
  const isMounted = (0, _element.useRef)(false);
  const {
    setSelectedTreeId
  } = (0, _useListViewExpandSelectedItem.default)({
    firstSelectedBlockClientId: selectedClientIds[0],
    setExpandedState
  });
  const selectEditorBlock = (0, _element.useCallback)((event, clientId) => {
    updateBlockSelection(event, clientId);
    setSelectedTreeId(clientId);
  }, [setSelectedTreeId, updateBlockSelection]);
  (0, _element.useEffect)(() => {
    isMounted.current = true;
  }, []); // List View renders a fixed number of items and relies on each having a fixed item height of 36px.
  // If this value changes, we should also change the itemHeight value set in useFixedWindowList.
  // See: https://github.com/WordPress/gutenberg/pull/35230 for additional context.

  const [fixedListWindow] = (0, _compose.__experimentalUseFixedWindowList)(elementRef, BLOCK_LIST_ITEM_HEIGHT, visibleBlockCount, {
    useWindowing: true,
    windowOverscan: 40
  });
  const expand = (0, _element.useCallback)(clientId => {
    if (!clientId) {
      return;
    }

    setExpandedState({
      type: 'expand',
      clientIds: [clientId]
    });
  }, [setExpandedState]);
  const collapse = (0, _element.useCallback)(clientId => {
    if (!clientId) {
      return;
    }

    setExpandedState({
      type: 'collapse',
      clientIds: [clientId]
    });
  }, [setExpandedState]);
  const expandRow = (0, _element.useCallback)(row => {
    var _row$dataset;

    expand(row === null || row === void 0 ? void 0 : (_row$dataset = row.dataset) === null || _row$dataset === void 0 ? void 0 : _row$dataset.block);
  }, [expand]);
  const collapseRow = (0, _element.useCallback)(row => {
    var _row$dataset2;

    collapse(row === null || row === void 0 ? void 0 : (_row$dataset2 = row.dataset) === null || _row$dataset2 === void 0 ? void 0 : _row$dataset2.block);
  }, [collapse]);
  const focusRow = (0, _element.useCallback)((event, startRow, endRow) => {
    if (event.shiftKey) {
      var _startRow$dataset, _endRow$dataset;

      updateBlockSelection(event, startRow === null || startRow === void 0 ? void 0 : (_startRow$dataset = startRow.dataset) === null || _startRow$dataset === void 0 ? void 0 : _startRow$dataset.block, endRow === null || endRow === void 0 ? void 0 : (_endRow$dataset = endRow.dataset) === null || _endRow$dataset === void 0 ? void 0 : _endRow$dataset.block);
    }
  }, [updateBlockSelection]);
  const contextValue = (0, _element.useMemo)(() => ({
    isTreeGridMounted: isMounted.current,
    draggedClientIds,
    expandedState,
    expand,
    collapse
  }), [isMounted.current, draggedClientIds, expandedState, expand, collapse]); // If there are no blocks to show, do not render the list view.

  if (!clientIdsTree.length) {
    return null;
  }

  return (0, _element.createElement)(_data.AsyncModeProvider, {
    value: true
  }, (0, _element.createElement)(_dropIndicator.default, {
    listViewRef: elementRef,
    blockDropTarget: blockDropTarget
  }), (0, _element.createElement)(_components.__experimentalTreeGrid, {
    id: id,
    className: "block-editor-list-view-tree",
    "aria-label": (0, _i18n.__)('Block navigation structure'),
    ref: treeGridRef,
    onCollapseRow: collapseRow,
    onExpandRow: expandRow,
    onFocusRow: focusRow,
    applicationAriaLabel: (0, _i18n.__)('Block navigation structure')
  }, (0, _element.createElement)(_context.ListViewContext.Provider, {
    value: contextValue
  }, (0, _element.createElement)(_branch.default, {
    blocks: clientIdsTree,
    selectBlock: selectEditorBlock,
    showBlockMovers: showBlockMovers,
    fixedListWindow: fixedListWindow,
    selectedClientIds: selectedClientIds,
    isExpanded: isExpanded,
    shouldShowInnerBlocks: shouldShowInnerBlocks
  }))));
}

var _default = (0, _element.forwardRef)(ListView);

exports.default = _default;
//# sourceMappingURL=index.js.map
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlockModeToggle = BlockModeToggle;
exports.default = void 0;

var _element = require("@wordpress/element");

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _blocks = require("@wordpress/blocks");

var _data = require("@wordpress/data");

var _compose = require("@wordpress/compose");

var _store = require("../../store");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const noop = () => {};

function BlockModeToggle(_ref) {
  let {
    blockType,
    mode,
    onToggleMode,
    small = false,
    isCodeEditingEnabled = true
  } = _ref;

  if (!blockType || !(0, _blocks.hasBlockSupport)(blockType, 'html', true) || !isCodeEditingEnabled) {
    return null;
  }

  const label = mode === 'visual' ? (0, _i18n.__)('Edit as HTML') : (0, _i18n.__)('Edit visually');
  return (0, _element.createElement)(_components.MenuItem, {
    onClick: onToggleMode
  }, !small && label);
}

var _default = (0, _compose.compose)([(0, _data.withSelect)((select, _ref2) => {
  let {
    clientId
  } = _ref2;
  const {
    getBlock,
    getBlockMode,
    getSettings
  } = select(_store.store);
  const block = getBlock(clientId);
  const isCodeEditingEnabled = getSettings().codeEditingEnabled;
  return {
    mode: getBlockMode(clientId),
    blockType: block ? (0, _blocks.getBlockType)(block.name) : null,
    isCodeEditingEnabled
  };
}), (0, _data.withDispatch)((dispatch, _ref3) => {
  let {
    onToggle = noop,
    clientId
  } = _ref3;
  return {
    onToggleMode() {
      dispatch(_store.store).toggleBlockMode(clientId);
      onToggle();
    }

  };
})])(BlockModeToggle);

exports.default = _default;
//# sourceMappingURL=block-mode-toggle.js.map
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ExperimentalBlockEditorProvider = exports.BlockEditorProvider = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _data = require("@wordpress/data");

var _withRegistryProvider = _interopRequireDefault(require("./with-registry-provider"));

var _useBlockSync = _interopRequireDefault(require("./use-block-sync"));

var _store = require("../../store");

var _blockRefsProvider = require("./block-refs-provider");

var _lockUnlock = require("../../lock-unlock");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/** @typedef {import('@wordpress/data').WPDataRegistry} WPDataRegistry */
const ExperimentalBlockEditorProvider = (0, _withRegistryProvider.default)(props => {
  const {
    children,
    settings,
    stripExperimentalSettings = false
  } = props;
  const {
    __experimentalUpdateSettings
  } = (0, _lockUnlock.unlock)((0, _data.useDispatch)(_store.store));
  (0, _element.useEffect)(() => {
    __experimentalUpdateSettings({ ...settings,
      __internalIsInitialized: true
    }, stripExperimentalSettings);
  }, [settings]); // Syncs the entity provider with changes in the block-editor store.

  (0, _useBlockSync.default)(props);
  return (0, _element.createElement)(_blockRefsProvider.BlockRefsProvider, null, children);
});
exports.ExperimentalBlockEditorProvider = ExperimentalBlockEditorProvider;

const BlockEditorProvider = props => {
  return (0, _element.createElement)(ExperimentalBlockEditorProvider, (0, _extends2.default)({}, props, {
    stripExperimentalSettings: true
  }), props.children);
};

exports.BlockEditorProvider = BlockEditorProvider;
var _default = BlockEditorProvider;
exports.default = _default;
//# sourceMappingURL=index.js.map
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LinkUI = LinkUI;
exports.getSuggestionsQuery = getSuggestionsQuery;

var _element = require("@wordpress/element");

var _dom = require("@wordpress/dom");

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _blocks = require("@wordpress/blocks");

var _data = require("@wordpress/data");

var _store = require("../../store");

var _linkControl = _interopRequireDefault(require("../link-control"));

var _blockIcon = _interopRequireDefault(require("../block-icon"));

// Note: this file is copied directly from packages/block-library/src/navigation-link/link-ui.js

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/**
 * Given the Link block's type attribute, return the query params to give to
 * /wp/v2/search.
 *
 * @param {string} type Link block's type attribute.
 * @param {string} kind Link block's entity of kind (post-type|taxonomy)
 * @return {{ type?: string, subtype?: string }} Search query params.
 */
function getSuggestionsQuery(type, kind) {
  switch (type) {
    case 'post':
    case 'page':
      return {
        type: 'post',
        subtype: type
      };

    case 'category':
      return {
        type: 'term',
        subtype: 'category'
      };

    case 'tag':
      return {
        type: 'term',
        subtype: 'post_tag'
      };

    case 'post_format':
      return {
        type: 'post-format'
      };

    default:
      if (kind === 'taxonomy') {
        return {
          type: 'term',
          subtype: type
        };
      }

      if (kind === 'post-type') {
        return {
          type: 'post',
          subtype: type
        };
      }

      return {};
  }
}
/**
 * Add transforms to Link Control
 *
 * @param {Object} props          Component props.
 * @param {string} props.clientId Block client ID.
 */


function LinkControlTransforms(_ref) {
  let {
    clientId
  } = _ref;
  const {
    getBlock,
    blockTransforms
  } = (0, _data.useSelect)(select => {
    const {
      getBlock: _getBlock,
      getBlockRootClientId,
      getBlockTransformItems
    } = select(_store.store);
    return {
      getBlock: _getBlock,
      blockTransforms: getBlockTransformItems(_getBlock(clientId), getBlockRootClientId(clientId))
    };
  }, [clientId]);
  const {
    replaceBlock
  } = (0, _data.useDispatch)(_store.store);
  const featuredBlocks = ['core/page-list', 'core/site-logo', 'core/social-links', 'core/search'];
  const transforms = blockTransforms.filter(item => {
    return featuredBlocks.includes(item.name);
  });

  if (!(transforms !== null && transforms !== void 0 && transforms.length)) {
    return null;
  }

  if (!clientId) {
    return null;
  }

  return (0, _element.createElement)("div", {
    className: "link-control-transform"
  }, (0, _element.createElement)("h3", {
    className: "link-control-transform__subheading"
  }, (0, _i18n.__)('Transform')), (0, _element.createElement)("div", {
    className: "link-control-transform__items"
  }, transforms.map(item => {
    return (0, _element.createElement)(_components.Button, {
      key: `transform-${item.name}`,
      onClick: () => replaceBlock(clientId, (0, _blocks.switchToBlockType)(getBlock(clientId), item.name)),
      className: "link-control-transform__item"
    }, (0, _element.createElement)(_blockIcon.default, {
      icon: item.icon
    }), item.title);
  })));
}

function LinkUI(props) {
  const {
    label,
    url,
    opensInNewTab,
    type,
    kind
  } = props.link;
  const link = {
    url,
    opensInNewTab,
    title: label && (0, _dom.__unstableStripHTML)(label)
  };
  return (0, _element.createElement)(_components.Popover, {
    placement: "bottom",
    onClose: props.onClose,
    anchor: props.anchor,
    __unstableSlotName: '__unstable-block-tools-after',
    shift: true
  }, (0, _element.createElement)(_linkControl.default, {
    hasTextControl: true,
    hasRichPreviews: true,
    className: props.className,
    value: link,
    showInitialSuggestions: true,
    withCreateSuggestion: props.hasCreateSuggestion,
    noDirectEntry: !!type,
    noURLSuggestion: !!type,
    suggestionsQuery: getSuggestionsQuery(type, kind),
    onChange: props.onChange,
    onRemove: props.onRemove,
    onCancel: props.onCancel,
    renderControlBottom: !url ? () => (0, _element.createElement)(LinkControlTransforms, {
      clientId: props.clientId
    }) : null
  }));
}
//# sourceMappingURL=link-ui.js.map
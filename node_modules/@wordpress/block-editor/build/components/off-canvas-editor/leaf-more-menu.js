"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = LeafMoreMenu;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _blocks = require("@wordpress/blocks");

var _icons = require("@wordpress/icons");

var _components = require("@wordpress/components");

var _data = require("@wordpress/data");

var _i18n = require("@wordpress/i18n");

var _store = require("../../store");

var _blockTitle = _interopRequireDefault(require("../block-title"));

var _context = require("./context");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const POPOVER_PROPS = {
  className: 'block-editor-block-settings-menu__popover',
  position: 'bottom right',
  variant: 'toolbar'
};
const BLOCKS_THAT_CAN_BE_CONVERTED_TO_SUBMENU = ['core/navigation-link', 'core/navigation-submenu'];

function AddSubmenuItem(_ref) {
  let {
    block,
    onClose
  } = _ref;
  const {
    expandedState,
    expand
  } = (0, _context.useListViewContext)();
  const {
    insertBlock,
    replaceBlock,
    replaceInnerBlocks
  } = (0, _data.useDispatch)(_store.store);
  const clientId = block.clientId;
  const isDisabled = !BLOCKS_THAT_CAN_BE_CONVERTED_TO_SUBMENU.includes(block.name);
  return (0, _element.createElement)(_components.MenuItem, {
    icon: _icons.addSubmenu,
    disabled: isDisabled,
    onClick: () => {
      const updateSelectionOnInsert = false;
      const newLink = (0, _blocks.createBlock)('core/navigation-link');

      if (block.name === 'core/navigation-submenu') {
        insertBlock(newLink, block.innerBlocks.length, clientId, updateSelectionOnInsert);
      } else {
        // Convert to a submenu if the block currently isn't one.
        const newSubmenu = (0, _blocks.createBlock)('core/navigation-submenu', block.attributes, block.innerBlocks); // The following must happen as two independent actions.
        // Why? Because the offcanvas editor relies on the getLastInsertedBlocksClientIds
        // selector to determine which block is "active". As the UX needs the newLink to be
        // the "active" block it must be the last block to be inserted.
        // Therefore the Submenu is first created and **then** the newLink is inserted
        // thus ensuring it is the last inserted block.

        replaceBlock(clientId, newSubmenu);
        replaceInnerBlocks(newSubmenu.clientId, [newLink], updateSelectionOnInsert);
      }

      if (!expandedState[block.clientId]) {
        expand(block.clientId);
      }

      onClose();
    }
  }, (0, _i18n.__)('Add submenu link'));
}

function LeafMoreMenu(props) {
  const {
    clientId,
    block
  } = props;
  const {
    moveBlocksDown,
    moveBlocksUp,
    removeBlocks
  } = (0, _data.useDispatch)(_store.store);
  const removeLabel = (0, _i18n.sprintf)(
  /* translators: %s: block name */
  (0, _i18n.__)('Remove %s'), (0, _blockTitle.default)({
    clientId,
    maximumLength: 25
  }));
  const rootClientId = (0, _data.useSelect)(select => {
    const {
      getBlockRootClientId
    } = select(_store.store);
    return getBlockRootClientId(clientId);
  }, [clientId]);
  return (0, _element.createElement)(_components.DropdownMenu, (0, _extends2.default)({
    icon: _icons.moreVertical,
    label: (0, _i18n.__)('Options'),
    className: "block-editor-block-settings-menu",
    popoverProps: POPOVER_PROPS,
    noIcons: true
  }, props), _ref2 => {
    let {
      onClose
    } = _ref2;
    return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_components.MenuGroup, null, (0, _element.createElement)(_components.MenuItem, {
      icon: _icons.chevronUp,
      onClick: () => {
        moveBlocksUp([clientId], rootClientId);
        onClose();
      }
    }, (0, _i18n.__)('Move up')), (0, _element.createElement)(_components.MenuItem, {
      icon: _icons.chevronDown,
      onClick: () => {
        moveBlocksDown([clientId], rootClientId);
        onClose();
      }
    }, (0, _i18n.__)('Move down')), (0, _element.createElement)(AddSubmenuItem, {
      block: block,
      onClose: onClose
    })), (0, _element.createElement)(_components.MenuGroup, null, (0, _element.createElement)(_components.MenuItem, {
      onClick: () => {
        removeBlocks([clientId], false);
        onClose();
      }
    }, removeLabel)));
  });
}
//# sourceMappingURL=leaf-more-menu.js.map
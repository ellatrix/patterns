"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classnames = _interopRequireDefault(require("classnames"));

var _data = require("@wordpress/data");

var _lockUnlock = require("../../lock-unlock");

var _blockSelectButton = _interopRequireDefault(require("./block-select-button"));

var _blockDraggable = _interopRequireDefault(require("../block-draggable"));

var _store = require("../../store");

var _updateAttributes = require("./update-attributes");

var _linkUi = require("./link-ui");

var _useInsertedBlock = require("./use-inserted-block");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const BLOCKS_WITH_LINK_UI_SUPPORT = ['core/navigation-link', 'core/navigation-submenu'];
const ListViewBlockContents = (0, _element.forwardRef)((_ref, ref) => {
  let {
    onClick,
    onToggleExpanded,
    block,
    isSelected,
    position,
    siblingBlockCount,
    level,
    isExpanded,
    selectedClientIds,
    ...props
  } = _ref;
  const {
    clientId
  } = block;
  const [isLinkUIOpen, setIsLinkUIOpen] = (0, _element.useState)();
  const {
    blockMovingClientId,
    selectedBlockInBlockEditor,
    lastInsertedBlockClientId
  } = (0, _data.useSelect)(select => {
    const {
      hasBlockMovingClientId,
      getSelectedBlockClientId,
      getLastInsertedBlocksClientIds
    } = (0, _lockUnlock.unlock)(select(_store.store));
    const lastInsertedBlocksClientIds = getLastInsertedBlocksClientIds();
    return {
      blockMovingClientId: hasBlockMovingClientId(),
      selectedBlockInBlockEditor: getSelectedBlockClientId(),
      lastInsertedBlockClientId: lastInsertedBlocksClientIds && lastInsertedBlocksClientIds[0]
    };
  }, [clientId]);
  const {
    insertedBlockAttributes,
    insertedBlockName,
    setInsertedBlockAttributes
  } = (0, _useInsertedBlock.useInsertedBlock)(lastInsertedBlockClientId);
  const hasExistingLinkValue = insertedBlockAttributes === null || insertedBlockAttributes === void 0 ? void 0 : insertedBlockAttributes.url;
  (0, _element.useEffect)(() => {
    if (clientId === lastInsertedBlockClientId && BLOCKS_WITH_LINK_UI_SUPPORT !== null && BLOCKS_WITH_LINK_UI_SUPPORT !== void 0 && BLOCKS_WITH_LINK_UI_SUPPORT.includes(insertedBlockName) && !hasExistingLinkValue // don't re-show the Link UI if the block already has a link value.
    ) {
      setIsLinkUIOpen(true);
    }
  }, [lastInsertedBlockClientId, clientId, insertedBlockName, hasExistingLinkValue]);
  const isBlockMoveTarget = blockMovingClientId && selectedBlockInBlockEditor === clientId;
  const className = (0, _classnames.default)('block-editor-list-view-block-contents', {
    'is-dropping-before': isBlockMoveTarget
  }); // Only include all selected blocks if the currently clicked on block
  // is one of the selected blocks. This ensures that if a user attempts
  // to drag a block that isn't part of the selection, they're still able
  // to drag it and rearrange its position.

  const draggableClientIds = selectedClientIds.includes(clientId) ? selectedClientIds : [clientId];
  return (0, _element.createElement)(_element.Fragment, null, isLinkUIOpen && (0, _element.createElement)(_linkUi.LinkUI, {
    clientId: lastInsertedBlockClientId,
    link: insertedBlockAttributes,
    onClose: () => setIsLinkUIOpen(false),
    hasCreateSuggestion: false,
    onChange: updatedValue => {
      (0, _updateAttributes.updateAttributes)(updatedValue, setInsertedBlockAttributes, insertedBlockAttributes);
      setIsLinkUIOpen(false);
    },
    onCancel: () => setIsLinkUIOpen(false)
  }), (0, _element.createElement)(_blockDraggable.default, {
    clientIds: draggableClientIds
  }, _ref2 => {
    let {
      draggable,
      onDragStart,
      onDragEnd
    } = _ref2;
    return (0, _element.createElement)(_blockSelectButton.default, (0, _extends2.default)({
      ref: ref,
      className: className,
      block: block,
      onClick: onClick,
      onToggleExpanded: onToggleExpanded,
      isSelected: isSelected,
      position: position,
      siblingBlockCount: siblingBlockCount,
      level: level,
      draggable: draggable,
      onDragStart: onDragStart,
      onDragEnd: onDragEnd,
      isExpanded: isExpanded
    }, props));
  }));
});
var _default = ListViewBlockContents;
exports.default = _default;
//# sourceMappingURL=block-contents.js.map
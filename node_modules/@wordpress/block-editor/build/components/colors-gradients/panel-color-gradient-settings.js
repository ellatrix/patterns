"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PanelColorGradientSettingsInner = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classnames = _interopRequireDefault(require("classnames"));

var _lodash = require("lodash");

var _components = require("@wordpress/components");

var _data = require("@wordpress/data");

var _compose = require("@wordpress/compose");

var _dropdown = _interopRequireDefault(require("./dropdown"));

var _useMultipleOriginColorsAndGradients = _interopRequireDefault(require("./use-multiple-origin-colors-and-gradients"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const colorsAndGradientKeys = ['colors', 'disableCustomColors', 'gradients', 'disableCustomGradients'];

const PanelColorGradientSettingsInner = _ref => {
  let {
    className,
    colors,
    gradients,
    disableCustomColors,
    disableCustomGradients,
    children,
    settings,
    title,
    showTitle = true,
    __experimentalIsRenderedInSidebar,
    enableAlpha
  } = _ref;
  const panelId = (0, _compose.useInstanceId)(PanelColorGradientSettingsInner);
  const {
    batch
  } = (0, _data.useRegistry)();

  if ((0, _lodash.isEmpty)(colors) && (0, _lodash.isEmpty)(gradients) && disableCustomColors && disableCustomGradients && settings !== null && settings !== void 0 && settings.every(setting => (0, _lodash.isEmpty)(setting.colors) && (0, _lodash.isEmpty)(setting.gradients) && (setting.disableCustomColors === undefined || setting.disableCustomColors) && (setting.disableCustomGradients === undefined || setting.disableCustomGradients))) {
    return null;
  }

  return (0, _element.createElement)(_components.__experimentalToolsPanel, {
    className: (0, _classnames.default)('block-editor-panel-color-gradient-settings', className),
    label: showTitle ? title : undefined,
    resetAll: () => {
      batch(() => {
        settings.forEach(_ref2 => {
          let {
            colorValue,
            gradientValue,
            onColorChange,
            onGradientChange
          } = _ref2;

          if (colorValue) {
            onColorChange();
          } else if (gradientValue) {
            onGradientChange();
          }
        });
      });
    },
    panelId: panelId,
    __experimentalFirstVisibleItemClass: "first",
    __experimentalLastVisibleItemClass: "last"
  }, (0, _element.createElement)(_dropdown.default, {
    settings: settings,
    panelId: panelId,
    colors,
    gradients,
    disableCustomColors,
    disableCustomGradients,
    __experimentalIsRenderedInSidebar,
    enableAlpha
  }), !!children && (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_components.__experimentalSpacer, {
    marginY: 4
  }), " ", children));
};

exports.PanelColorGradientSettingsInner = PanelColorGradientSettingsInner;

const PanelColorGradientSettingsSelect = props => {
  const colorGradientSettings = (0, _useMultipleOriginColorsAndGradients.default)();
  return (0, _element.createElement)(PanelColorGradientSettingsInner, (0, _extends2.default)({}, colorGradientSettings, props));
};

const PanelColorGradientSettings = props => {
  if (colorsAndGradientKeys.every(key => props.hasOwnProperty(key))) {
    return (0, _element.createElement)(PanelColorGradientSettingsInner, props);
  }

  return (0, _element.createElement)(PanelColorGradientSettingsSelect, props);
};

var _default = PanelColorGradientSettings;
exports.default = _default;
//# sourceMappingURL=panel-color-gradient-settings.js.map
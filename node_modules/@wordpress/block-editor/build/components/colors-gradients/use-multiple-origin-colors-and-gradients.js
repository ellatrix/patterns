"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useMultipleOriginColorsAndGradients;

var _element = require("@wordpress/element");

var _i18n = require("@wordpress/i18n");

var _useSetting = _interopRequireDefault(require("../use-setting"));

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/**
 * Retrieves color and gradient related settings.
 *
 * The arrays for colors and gradients are made up of color palettes from each
 * origin i.e. "Core", "Theme", and "User".
 *
 * @return {Object} Color and gradient related settings.
 */
function useMultipleOriginColorsAndGradients() {
  const colorGradientSettings = {
    disableCustomColors: !(0, _useSetting.default)('color.custom'),
    disableCustomGradients: !(0, _useSetting.default)('color.customGradient')
  };
  const customColors = (0, _useSetting.default)('color.palette.custom');
  const themeColors = (0, _useSetting.default)('color.palette.theme');
  const defaultColors = (0, _useSetting.default)('color.palette.default');
  const shouldDisplayDefaultColors = (0, _useSetting.default)('color.defaultPalette');
  colorGradientSettings.colors = (0, _element.useMemo)(() => {
    const result = [];

    if (themeColors && themeColors.length) {
      result.push({
        name: (0, _i18n._x)('Theme', 'Indicates this palette comes from the theme.'),
        colors: themeColors
      });
    }

    if (shouldDisplayDefaultColors && defaultColors && defaultColors.length) {
      result.push({
        name: (0, _i18n._x)('Default', 'Indicates this palette comes from WordPress.'),
        colors: defaultColors
      });
    }

    if (customColors && customColors.length) {
      result.push({
        name: (0, _i18n._x)('Custom', 'Indicates this palette comes from the theme.'),
        colors: customColors
      });
    }

    return result;
  }, [defaultColors, themeColors, customColors]);
  const customGradients = (0, _useSetting.default)('color.gradients.custom');
  const themeGradients = (0, _useSetting.default)('color.gradients.theme');
  const defaultGradients = (0, _useSetting.default)('color.gradients.default');
  const shouldDisplayDefaultGradients = (0, _useSetting.default)('color.defaultGradients');
  colorGradientSettings.gradients = (0, _element.useMemo)(() => {
    const result = [];

    if (themeGradients && themeGradients.length) {
      result.push({
        name: (0, _i18n._x)('Theme', 'Indicates this palette comes from the theme.'),
        gradients: themeGradients
      });
    }

    if (shouldDisplayDefaultGradients && defaultGradients && defaultGradients.length) {
      result.push({
        name: (0, _i18n._x)('Default', 'Indicates this palette comes from WordPress.'),
        gradients: defaultGradients
      });
    }

    if (customGradients && customGradients.length) {
      result.push({
        name: (0, _i18n._x)('Custom', 'Indicates this palette is created by the user.'),
        gradients: customGradients
      });
    }

    return result;
  }, [customGradients, themeGradients, defaultGradients]);
  return colorGradientSettings;
}
//# sourceMappingURL=use-multiple-origin-colors-and-gradients.js.map
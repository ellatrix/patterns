"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addActiveFormats = addActiveFormats;
exports.createLinkInParagraph = createLinkInParagraph;
exports.getAllowedFormats = getAllowedFormats;
exports.getMultilineTag = getMultilineTag;
exports.isShortcode = void 0;

var _element = require("@wordpress/element");

var _shortcode = require("@wordpress/shortcode");

var _blocks = require("@wordpress/blocks");

/**
 * WordPress dependencies
 */
function addActiveFormats(value, activeFormats) {
  if (activeFormats !== null && activeFormats !== void 0 && activeFormats.length) {
    let index = value.formats.length;

    while (index--) {
      value.formats[index] = [...activeFormats, ...(value.formats[index] || [])];
    }
  }
}
/**
 * Get the multiline tag based on the multiline prop.
 *
 * @param {?(string|boolean)} multiline The multiline prop.
 *
 * @return {string | undefined} The multiline tag.
 */


function getMultilineTag(multiline) {
  if (multiline !== true && multiline !== 'p' && multiline !== 'li') {
    return;
  }

  return multiline === true ? 'p' : multiline;
}

function getAllowedFormats(_ref) {
  let {
    allowedFormats,
    disableFormats
  } = _ref;

  if (disableFormats) {
    return getAllowedFormats.EMPTY_ARRAY;
  }

  return allowedFormats;
}

getAllowedFormats.EMPTY_ARRAY = [];

const isShortcode = text => (0, _shortcode.regexp)('.*').test(text);
/**
 * Creates a link from pasted URL.
 * Creates a paragraph block containing a link to the URL, and calls `onReplace`.
 *
 * @param {string}   url       The URL that could not be embedded.
 * @param {Function} onReplace Function to call with the created fallback block.
 */


exports.isShortcode = isShortcode;

function createLinkInParagraph(url, onReplace) {
  const link = (0, _element.createElement)("a", {
    href: url
  }, url);
  onReplace((0, _blocks.createBlock)('core/paragraph', {
    content: (0, _element.renderToString)(link)
  }));
}
//# sourceMappingURL=utils.js.map
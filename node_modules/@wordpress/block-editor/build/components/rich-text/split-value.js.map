{"version":3,"sources":["@wordpress/block-editor/src/components/rich-text/split-value.js"],"names":["splitValue","value","pastedBlocks","onReplace","onSplit","onSplitMiddle","multilineTag","start","end","valueWithEnsuredSelection","blocks","before","after","hasPastedBlocks","length","lastPastedBlockIndex","isAfterOriginal","push","indexToSelect","initialPosition"],"mappings":";;;;;;;AAGA;;AAHA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACO,SAASA,UAAT,OAOH;AAAA,MAPwB;AAC3BC,IAAAA,KAD2B;AAE3BC,IAAAA,YAAY,GAAG,EAFY;AAG3BC,IAAAA,SAH2B;AAI3BC,IAAAA,OAJ2B;AAK3BC,IAAAA,aAL2B;AAM3BC,IAAAA;AAN2B,GAOxB;;AACH,MAAK,CAAEH,SAAF,IAAe,CAAEC,OAAtB,EAAgC;AAC/B;AACA,GAHE,CAKH;AACA;;;AACA,QAAM;AAAEG,IAAAA,KAAK,GAAG,CAAV;AAAaC,IAAAA,GAAG,GAAG;AAAnB,MAAyBP,KAA/B;AACA,QAAMQ,yBAAyB,GAAG,EAAE,GAAGR,KAAL;AAAYM,IAAAA,KAAZ;AAAmBC,IAAAA;AAAnB,GAAlC;AACA,QAAME,MAAM,GAAG,EAAf;AACA,QAAM,CAAEC,MAAF,EAAUC,KAAV,IAAoB,qBAAOH,yBAAP,CAA1B;AACA,QAAMI,eAAe,GAAGX,YAAY,CAACY,MAAb,GAAsB,CAA9C;AACA,MAAIC,oBAAoB,GAAG,CAAC,CAA5B,CAZG,CAcH;AACA;;AACA,QAAMC,eAAe,GAAG,uBAASL,MAAT,KAAqB,CAAE,uBAASC,KAAT,CAA/C,CAhBG,CAkBH;AACA;AACA;AACA;;AACA,MAAK,CAAEC,eAAF,IAAqB,CAAE,uBAASF,MAAT,CAA5B,EAAgD;AAC/CD,IAAAA,MAAM,CAACO,IAAP,CACCb,OAAO,CACN,4BAAc;AACbH,MAAAA,KAAK,EAAEU,MADM;AAEbL,MAAAA;AAFa,KAAd,CADM,EAKN,CAAEU,eALI,CADR;AASAD,IAAAA,oBAAoB,IAAI,CAAxB;AACA;;AAED,MAAKF,eAAL,EAAuB;AACtBH,IAAAA,MAAM,CAACO,IAAP,CAAa,GAAGf,YAAhB;AACAa,IAAAA,oBAAoB,IAAIb,YAAY,CAACY,MAArC;AACA,GAHD,MAGO,IAAKT,aAAL,EAAqB;AAC3BK,IAAAA,MAAM,CAACO,IAAP,CAAaZ,aAAa,EAA1B;AACA,GAxCE,CA0CH;AACA;AACA;AACA;;;AACA,MACCQ,eAAe,GACZ,CAAE,uBAASD,KAAT,CADU,GAEZ,CAAEP,aAAF,IAAmB,CAAE,uBAASO,KAAT,CAHzB,EAIE;AACDF,IAAAA,MAAM,CAACO,IAAP,CACCb,OAAO,CACN,4BAAc;AACbH,MAAAA,KAAK,EAAEW,KADM;AAEbN,MAAAA;AAFa,KAAd,CADM,EAKNU,eALM,CADR;AASA,GA5DE,CA8DH;AACA;;;AACA,QAAME,aAAa,GAAGL,eAAe,GAAGE,oBAAH,GAA0B,CAA/D,CAhEG,CAkEH;AACA;;AACA,QAAMI,eAAe,GAAGN,eAAe,GAAG,CAAC,CAAJ,GAAQ,CAA/C;AAEAV,EAAAA,SAAS,CAAEO,MAAF,EAAUQ,aAAV,EAAyBC,eAAzB,CAAT;AACA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { isEmpty, split, toHTMLString } from '@wordpress/rich-text';\n\n/*\n * Signals to the RichText owner that the block can be replaced with two blocks\n * as a result of splitting the block by pressing enter, or with blocks as a\n * result of splitting the block by pasting block content in the instance.\n */\nexport function splitValue( {\n\tvalue,\n\tpastedBlocks = [],\n\tonReplace,\n\tonSplit,\n\tonSplitMiddle,\n\tmultilineTag,\n} ) {\n\tif ( ! onReplace || ! onSplit ) {\n\t\treturn;\n\t}\n\n\t// Ensure the value has a selection. This might happen when trying to split\n\t// an empty value before there was a `selectionchange` event.\n\tconst { start = 0, end = 0 } = value;\n\tconst valueWithEnsuredSelection = { ...value, start, end };\n\tconst blocks = [];\n\tconst [ before, after ] = split( valueWithEnsuredSelection );\n\tconst hasPastedBlocks = pastedBlocks.length > 0;\n\tlet lastPastedBlockIndex = -1;\n\n\t// Consider the after value to be the original it is not empty and the\n\t// before value *is* empty.\n\tconst isAfterOriginal = isEmpty( before ) && ! isEmpty( after );\n\n\t// Create a block with the content before the caret if there's no pasted\n\t// blocks, or if there are pasted blocks and the value is not empty. We do\n\t// not want a leading empty block on paste, but we do if split with e.g. the\n\t// enter key.\n\tif ( ! hasPastedBlocks || ! isEmpty( before ) ) {\n\t\tblocks.push(\n\t\t\tonSplit(\n\t\t\t\ttoHTMLString( {\n\t\t\t\t\tvalue: before,\n\t\t\t\t\tmultilineTag,\n\t\t\t\t} ),\n\t\t\t\t! isAfterOriginal\n\t\t\t)\n\t\t);\n\t\tlastPastedBlockIndex += 1;\n\t}\n\n\tif ( hasPastedBlocks ) {\n\t\tblocks.push( ...pastedBlocks );\n\t\tlastPastedBlockIndex += pastedBlocks.length;\n\t} else if ( onSplitMiddle ) {\n\t\tblocks.push( onSplitMiddle() );\n\t}\n\n\t// If there's pasted blocks, append a block with non empty content / after\n\t// the caret. Otherwise, do append an empty block if there is no\n\t// `onSplitMiddle` prop, but if there is and the content is empty, the\n\t// middle block is enough to set focus in.\n\tif (\n\t\thasPastedBlocks\n\t\t\t? ! isEmpty( after )\n\t\t\t: ! onSplitMiddle || ! isEmpty( after )\n\t) {\n\t\tblocks.push(\n\t\t\tonSplit(\n\t\t\t\ttoHTMLString( {\n\t\t\t\t\tvalue: after,\n\t\t\t\t\tmultilineTag,\n\t\t\t\t} ),\n\t\t\t\tisAfterOriginal\n\t\t\t)\n\t\t);\n\t}\n\n\t// If there are pasted blocks, set the selection to the last one. Otherwise,\n\t// set the selection to the second block.\n\tconst indexToSelect = hasPastedBlocks ? lastPastedBlockIndex : 1;\n\n\t// If there are pasted blocks, move the caret to the end of the selected\n\t// block Otherwise, retain the default value.\n\tconst initialPosition = hasPastedBlocks ? -1 : 0;\n\n\tonReplace( blocks, indexToSelect, initialPosition );\n}\n"]}
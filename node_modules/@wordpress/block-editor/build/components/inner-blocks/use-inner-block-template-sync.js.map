{"version":3,"sources":["@wordpress/block-editor/src/components/inner-blocks/use-inner-block-template-sync.js"],"names":["useInnerBlockTemplateSync","clientId","template","templateLock","templateInsertUpdatesSelection","getBlocks","getSelectedBlocksInitialCaretPosition","isBlockSelected","blockEditorStore","replaceInnerBlocks","__unstableMarkNextChangeAsNotPersistent","innerBlocks","select","existingTemplate","isCancelled","window","queueMicrotask","currentInnerBlocks","shouldApplyTemplate","length","hasTemplateChanged","current","nextBlocks"],"mappings":";;;;;;;;;AAGA;;AAKA;;AACA;;AACA;;AAKA;;AAfA;AACA;AACA;;AAGA;AACA;AACA;;AAKA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,yBAAT,CACdC,QADc,EAEdC,QAFc,EAGdC,YAHc,EAIdC,8BAJc,EAKb;AACD,QAAM;AACLC,IAAAA,SADK;AAELC,IAAAA,qCAFK;AAGLC,IAAAA;AAHK,MAIF,qBAAWC,YAAX,CAJJ;AAKA,QAAM;AAAEC,IAAAA,kBAAF;AAAsBC,IAAAA;AAAtB,MACL,uBAAaF,YAAb,CADD;AAGA,QAAM;AAAEG,IAAAA;AAAF,MAAkB,qBACrBC,MAAF,KAAgB;AACfD,IAAAA,WAAW,EAAEC,MAAM,CAAEJ,YAAF,CAAN,CAA2BH,SAA3B,CAAsCJ,QAAtC;AADE,GAAhB,CADuB,EAIvB,CAAEA,QAAF,CAJuB,CAAxB,CATC,CAgBD;;AACA,QAAMY,gBAAgB,GAAG,qBAAQ,IAAR,CAAzB;AAEA,gCAAiB,MAAM;AACtB,QAAIC,WAAW,GAAG,KAAlB,CADsB,CAGtB;AACA;AACA;AACA;;AACAC,IAAAA,MAAM,CAACC,cAAP,CAAuB,MAAM;AAC5B,UAAKF,WAAL,EAAmB;AAClB;AACA,OAH2B,CAK5B;AACA;;;AACA,YAAMG,kBAAkB,GAAGZ,SAAS,CAAEJ,QAAF,CAApC;AACA,YAAMiB,mBAAmB,GACxBD,kBAAkB,CAACE,MAAnB,KAA8B,CAA9B,IACAhB,YAAY,KAAK,KADjB,IAEAA,YAAY,KAAK,aAHlB;AAKA,YAAMiB,kBAAkB,GAAG,CAAE,iBAC5BlB,QAD4B,EAE5BW,gBAAgB,CAACQ,OAFW,CAA7B;;AAKA,UAAK,CAAEH,mBAAF,IAAyB,CAAEE,kBAAhC,EAAqD;AACpD;AACA;;AAEDP,MAAAA,gBAAgB,CAACQ,OAAjB,GAA2BnB,QAA3B;AACA,YAAMoB,UAAU,GAAG,2CAClBL,kBADkB,EAElBf,QAFkB,CAAnB;;AAKA,UAAK,CAAE,iBAAeoB,UAAf,EAA2BL,kBAA3B,CAAP,EAAyD;AACxDP,QAAAA,uCAAuC;;AACvCD,QAAAA,kBAAkB,CACjBR,QADiB,EAEjBqB,UAFiB,EAGjBL,kBAAkB,CAACE,MAAnB,KAA8B,CAA9B,IACCf,8BADD,IAECkB,UAAU,CAACH,MAAX,KAAsB,CAFvB,IAGCZ,eAAe,CAAEN,QAAF,CANC,EAOjB;AACA;AACA;AACA;AACAK,QAAAA,qCAAqC,EAXpB,CAAlB;AAaA;AACD,KA5CD;AA8CA,WAAO,MAAM;AACZQ,MAAAA,WAAW,GAAG,IAAd;AACA,KAFD;AAGA,GAxDD,EAwDG,CAAEH,WAAF,EAAeT,QAAf,EAAyBC,YAAzB,EAAuCF,QAAvC,CAxDH;AAyDA","sourcesContent":["/**\n * External dependencies\n */\nimport fastDeepEqual from 'fast-deep-equal/es6';\n\n/**\n * WordPress dependencies\n */\nimport { useRef, useLayoutEffect } from '@wordpress/element';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { synchronizeBlocksWithTemplate } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport { store as blockEditorStore } from '../../store';\n\n/**\n * This hook makes sure that a block's inner blocks stay in sync with the given\n * block \"template\". The template is a block hierarchy to which inner blocks must\n * conform. If the blocks get \"out of sync\" with the template and the template\n * is meant to be locked (e.g. templateLock = \"all\" or templateLock = \"contentOnly\"),\n * then we replace the inner blocks with the correct value after synchronizing it with the template.\n *\n * @param {string}  clientId                       The block client ID.\n * @param {Object}  template                       The template to match.\n * @param {string}  templateLock                   The template lock state for the inner blocks. For\n *                                                 example, if the template lock is set to \"all\",\n *                                                 then the inner blocks will stay in sync with the\n *                                                 template. If not defined or set to false, then\n *                                                 the inner blocks will not be synchronized with\n *                                                 the given template.\n * @param {boolean} templateInsertUpdatesSelection Whether or not to update the\n *                                                 block-editor selection state when inner blocks\n *                                                 are replaced after template synchronization.\n */\nexport default function useInnerBlockTemplateSync(\n\tclientId,\n\ttemplate,\n\ttemplateLock,\n\ttemplateInsertUpdatesSelection\n) {\n\tconst {\n\t\tgetBlocks,\n\t\tgetSelectedBlocksInitialCaretPosition,\n\t\tisBlockSelected,\n\t} = useSelect( blockEditorStore );\n\tconst { replaceInnerBlocks, __unstableMarkNextChangeAsNotPersistent } =\n\t\tuseDispatch( blockEditorStore );\n\n\tconst { innerBlocks } = useSelect(\n\t\t( select ) => ( {\n\t\t\tinnerBlocks: select( blockEditorStore ).getBlocks( clientId ),\n\t\t} ),\n\t\t[ clientId ]\n\t);\n\n\t// Maintain a reference to the previous value so we can do a deep equality check.\n\tconst existingTemplate = useRef( null );\n\n\tuseLayoutEffect( () => {\n\t\tlet isCancelled = false;\n\n\t\t// There's an implicit dependency between useInnerBlockTemplateSync and useNestedSettingsUpdate\n\t\t// The former needs to happen after the latter and since the latter is using microtasks to batch updates (performance optimization),\n\t\t// we need to schedule this one in a microtask as well.\n\t\t// Example: If you remove queueMicrotask here, ctrl + click to insert quote block won't close the inserter.\n\t\twindow.queueMicrotask( () => {\n\t\t\tif ( isCancelled ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Only synchronize innerBlocks with template if innerBlocks are empty\n\t\t\t// or a locking \"all\" or \"contentOnly\" exists directly on the block.\n\t\t\tconst currentInnerBlocks = getBlocks( clientId );\n\t\t\tconst shouldApplyTemplate =\n\t\t\t\tcurrentInnerBlocks.length === 0 ||\n\t\t\t\ttemplateLock === 'all' ||\n\t\t\t\ttemplateLock === 'contentOnly';\n\n\t\t\tconst hasTemplateChanged = ! fastDeepEqual(\n\t\t\t\ttemplate,\n\t\t\t\texistingTemplate.current\n\t\t\t);\n\n\t\t\tif ( ! shouldApplyTemplate || ! hasTemplateChanged ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\texistingTemplate.current = template;\n\t\t\tconst nextBlocks = synchronizeBlocksWithTemplate(\n\t\t\t\tcurrentInnerBlocks,\n\t\t\t\ttemplate\n\t\t\t);\n\n\t\t\tif ( ! fastDeepEqual( nextBlocks, currentInnerBlocks ) ) {\n\t\t\t\t__unstableMarkNextChangeAsNotPersistent();\n\t\t\t\treplaceInnerBlocks(\n\t\t\t\t\tclientId,\n\t\t\t\t\tnextBlocks,\n\t\t\t\t\tcurrentInnerBlocks.length === 0 &&\n\t\t\t\t\t\ttemplateInsertUpdatesSelection &&\n\t\t\t\t\t\tnextBlocks.length !== 0 &&\n\t\t\t\t\t\tisBlockSelected( clientId ),\n\t\t\t\t\t// This ensures the \"initialPosition\" doesn't change when applying the template\n\t\t\t\t\t// If we're supposed to focus the block, we'll focus the first inner block\n\t\t\t\t\t// otherwise, we won't apply any auto-focus.\n\t\t\t\t\t// This ensures for instance that the focus stays in the inserter when inserting the \"buttons\" block.\n\t\t\t\t\tgetSelectedBlocksInitialCaretPosition()\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t\treturn () => {\n\t\t\tisCancelled = true;\n\t\t};\n\t}, [ innerBlocks, template, templateLock, clientId ] );\n}\n"]}
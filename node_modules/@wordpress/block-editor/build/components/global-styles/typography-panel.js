"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TypographyPanel;
exports.useHasTypographyPanel = useHasTypographyPanel;

var _element = require("@wordpress/element");

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _fontFamily = _interopRequireDefault(require("../font-family"));

var _fontAppearanceControl = _interopRequireDefault(require("../font-appearance-control"));

var _lineHeightControl = _interopRequireDefault(require("../line-height-control"));

var _letterSpacingControl = _interopRequireDefault(require("../letter-spacing-control"));

var _textTransformControl = _interopRequireDefault(require("../text-transform-control"));

var _textDecorationControl = _interopRequireDefault(require("../text-decoration-control"));

var _utils = require("./utils");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function useHasTypographyPanel(settings) {
  const hasFontFamily = useHasFontFamilyControl(settings);
  const hasLineHeight = useHasLineHeightControl(settings);
  const hasFontAppearance = useHasAppearanceControl(settings);
  const hasLetterSpacing = useHasLetterSpacingControl(settings);
  const hasTextTransform = useHasTextTransformControl(settings);
  const hasTextDecoration = useHasTextDecorationControl(settings);
  const hasFontSize = useHasFontSizeControl(settings);
  return hasFontFamily || hasLineHeight || hasFontAppearance || hasLetterSpacing || hasTextTransform || hasFontSize || hasTextDecoration;
}

function useHasFontSizeControl(settings) {
  var _settings$typography, _settings$typography$, _settings$typography2, _ref, _fontSizesPerOrigin$c;

  const disableCustomFontSizes = !(settings !== null && settings !== void 0 && (_settings$typography = settings.typography) !== null && _settings$typography !== void 0 && _settings$typography.customFontSize);
  const fontSizesPerOrigin = (_settings$typography$ = settings === null || settings === void 0 ? void 0 : (_settings$typography2 = settings.typography) === null || _settings$typography2 === void 0 ? void 0 : _settings$typography2.fontSizes) !== null && _settings$typography$ !== void 0 ? _settings$typography$ : {};
  const fontSizes = (_ref = (_fontSizesPerOrigin$c = fontSizesPerOrigin === null || fontSizesPerOrigin === void 0 ? void 0 : fontSizesPerOrigin.custom) !== null && _fontSizesPerOrigin$c !== void 0 ? _fontSizesPerOrigin$c : fontSizesPerOrigin === null || fontSizesPerOrigin === void 0 ? void 0 : fontSizesPerOrigin.theme) !== null && _ref !== void 0 ? _ref : fontSizesPerOrigin.default;
  return !!(fontSizes !== null && fontSizes !== void 0 && fontSizes.length) || !disableCustomFontSizes;
}

function useHasFontFamilyControl(settings) {
  var _settings$typography3, _ref2, _fontFamiliesPerOrigi;

  const fontFamiliesPerOrigin = settings === null || settings === void 0 ? void 0 : (_settings$typography3 = settings.typography) === null || _settings$typography3 === void 0 ? void 0 : _settings$typography3.fontFamilies;
  const fontFamilies = (_ref2 = (_fontFamiliesPerOrigi = fontFamiliesPerOrigin === null || fontFamiliesPerOrigin === void 0 ? void 0 : fontFamiliesPerOrigin.custom) !== null && _fontFamiliesPerOrigi !== void 0 ? _fontFamiliesPerOrigi : fontFamiliesPerOrigin === null || fontFamiliesPerOrigin === void 0 ? void 0 : fontFamiliesPerOrigin.theme) !== null && _ref2 !== void 0 ? _ref2 : fontFamiliesPerOrigin === null || fontFamiliesPerOrigin === void 0 ? void 0 : fontFamiliesPerOrigin.default;
  return !!(fontFamilies !== null && fontFamilies !== void 0 && fontFamilies.length);
}

function useHasLineHeightControl(settings) {
  var _settings$typography4;

  return settings === null || settings === void 0 ? void 0 : (_settings$typography4 = settings.typography) === null || _settings$typography4 === void 0 ? void 0 : _settings$typography4.lineHeight;
}

function useHasAppearanceControl(settings) {
  var _settings$typography5, _settings$typography6;

  const hasFontStyles = settings === null || settings === void 0 ? void 0 : (_settings$typography5 = settings.typography) === null || _settings$typography5 === void 0 ? void 0 : _settings$typography5.fontStyle;
  const hasFontWeights = settings === null || settings === void 0 ? void 0 : (_settings$typography6 = settings.typography) === null || _settings$typography6 === void 0 ? void 0 : _settings$typography6.fontWeight;
  return hasFontStyles || hasFontWeights;
}

function useAppearanceControlLabel(settings) {
  var _settings$typography7, _settings$typography8;

  const hasFontStyles = settings === null || settings === void 0 ? void 0 : (_settings$typography7 = settings.typography) === null || _settings$typography7 === void 0 ? void 0 : _settings$typography7.fontStyle;
  const hasFontWeights = settings === null || settings === void 0 ? void 0 : (_settings$typography8 = settings.typography) === null || _settings$typography8 === void 0 ? void 0 : _settings$typography8.fontWeight;

  if (!hasFontStyles) {
    return (0, _i18n.__)('Font weight');
  }

  if (!hasFontWeights) {
    return (0, _i18n.__)('Font style');
  }

  return (0, _i18n.__)('Appearance');
}

function useHasLetterSpacingControl(settings) {
  var _settings$typography9;

  return settings === null || settings === void 0 ? void 0 : (_settings$typography9 = settings.typography) === null || _settings$typography9 === void 0 ? void 0 : _settings$typography9.letterSpacing;
}

function useHasTextTransformControl(settings) {
  var _settings$typography10;

  return settings === null || settings === void 0 ? void 0 : (_settings$typography10 = settings.typography) === null || _settings$typography10 === void 0 ? void 0 : _settings$typography10.textTransform;
}

function useHasTextDecorationControl(settings) {
  var _settings$typography11;

  return settings === null || settings === void 0 ? void 0 : (_settings$typography11 = settings.typography) === null || _settings$typography11 === void 0 ? void 0 : _settings$typography11.textDecoration;
}

function TypographyToolsPanel(_ref3) {
  let {
    resetAllFilter,
    onChange,
    value,
    panelId,
    children
  } = _ref3;

  const resetAll = () => {
    const updatedValue = resetAllFilter(value);
    onChange(updatedValue);
  };

  return (0, _element.createElement)(_components.__experimentalToolsPanel, {
    label: (0, _i18n.__)('Typography'),
    resetAll: resetAll,
    panelId: panelId
  }, children);
}

const DEFAULT_CONTROLS = {
  fontFamily: true,
  fontSize: true,
  fontAppearance: true,
  lineHeight: true,
  letterSpacing: true,
  textTransform: true,
  textDecoration: true
};

function TypographyPanel(_ref4) {
  var _settings$typography12, _ref5, _fontFamiliesPerOrigi2, _inheritedValue$typog, _settings$typography13, _settings$typography$2, _settings$typography14, _ref7, _fontSizesPerOrigin$c2, _inheritedValue$typog2, _settings$typography15, _settings$typography16, _inheritedValue$typog3, _inheritedValue$typog4, _inheritedValue$typog5, _inheritedValue$typog6, _inheritedValue$typog7, _inheritedValue$typog8;

  let {
    as: Wrapper = TypographyToolsPanel,
    value,
    onChange,
    inheritedValue = value,
    settings,
    panelId,
    defaultControls = DEFAULT_CONTROLS
  } = _ref4;

  const decodeValue = rawValue => (0, _utils.getValueFromVariable)({
    settings
  }, '', rawValue); // Font Family


  const hasFontFamilyEnabled = useHasFontFamilyControl(settings);
  const fontFamiliesPerOrigin = settings === null || settings === void 0 ? void 0 : (_settings$typography12 = settings.typography) === null || _settings$typography12 === void 0 ? void 0 : _settings$typography12.fontFamilies;
  const fontFamilies = (_ref5 = (_fontFamiliesPerOrigi2 = fontFamiliesPerOrigin === null || fontFamiliesPerOrigin === void 0 ? void 0 : fontFamiliesPerOrigin.custom) !== null && _fontFamiliesPerOrigi2 !== void 0 ? _fontFamiliesPerOrigi2 : fontFamiliesPerOrigin === null || fontFamiliesPerOrigin === void 0 ? void 0 : fontFamiliesPerOrigin.theme) !== null && _ref5 !== void 0 ? _ref5 : fontFamiliesPerOrigin === null || fontFamiliesPerOrigin === void 0 ? void 0 : fontFamiliesPerOrigin.default;
  const fontFamily = decodeValue(inheritedValue === null || inheritedValue === void 0 ? void 0 : (_inheritedValue$typog = inheritedValue.typography) === null || _inheritedValue$typog === void 0 ? void 0 : _inheritedValue$typog.fontFamily);

  const setFontFamily = newValue => {
    var _fontFamilies$find;

    const slug = fontFamilies === null || fontFamilies === void 0 ? void 0 : (_fontFamilies$find = fontFamilies.find(_ref6 => {
      let {
        fontFamily: f
      } = _ref6;
      return f === newValue;
    })) === null || _fontFamilies$find === void 0 ? void 0 : _fontFamilies$find.slug;
    onChange({ ...value,
      typography: { ...(value === null || value === void 0 ? void 0 : value.typography),
        fontFamily: slug ? `var:preset|font-family|${slug}` : newValue
      }
    });
  };

  const hasFontFamily = () => {
    var _value$typography;

    return !!(value !== null && value !== void 0 && (_value$typography = value.typography) !== null && _value$typography !== void 0 && _value$typography.fontFamily);
  };

  const resetFontFamily = () => setFontFamily(undefined); // Font Size


  const hasFontSizeEnabled = useHasFontSizeControl(settings);
  const disableCustomFontSizes = !(settings !== null && settings !== void 0 && (_settings$typography13 = settings.typography) !== null && _settings$typography13 !== void 0 && _settings$typography13.customFontSize);
  const fontSizesPerOrigin = (_settings$typography$2 = settings === null || settings === void 0 ? void 0 : (_settings$typography14 = settings.typography) === null || _settings$typography14 === void 0 ? void 0 : _settings$typography14.fontSizes) !== null && _settings$typography$2 !== void 0 ? _settings$typography$2 : {};
  const fontSizes = (_ref7 = (_fontSizesPerOrigin$c2 = fontSizesPerOrigin === null || fontSizesPerOrigin === void 0 ? void 0 : fontSizesPerOrigin.custom) !== null && _fontSizesPerOrigin$c2 !== void 0 ? _fontSizesPerOrigin$c2 : fontSizesPerOrigin === null || fontSizesPerOrigin === void 0 ? void 0 : fontSizesPerOrigin.theme) !== null && _ref7 !== void 0 ? _ref7 : fontSizesPerOrigin.default;
  const fontSize = decodeValue(inheritedValue === null || inheritedValue === void 0 ? void 0 : (_inheritedValue$typog2 = inheritedValue.typography) === null || _inheritedValue$typog2 === void 0 ? void 0 : _inheritedValue$typog2.fontSize);

  const setFontSize = (newValue, metadata) => {
    const actualValue = !!(metadata !== null && metadata !== void 0 && metadata.slug) ? `var:preset|font-size|${metadata === null || metadata === void 0 ? void 0 : metadata.slug}` : newValue;
    onChange({ ...value,
      typography: { ...(value === null || value === void 0 ? void 0 : value.typography),
        fontSize: actualValue
      }
    });
  };

  const hasFontSize = () => {
    var _value$typography2;

    return !!(value !== null && value !== void 0 && (_value$typography2 = value.typography) !== null && _value$typography2 !== void 0 && _value$typography2.fontSize);
  };

  const resetFontSize = () => setFontSize(undefined); // Appearance


  const hasAppearanceControl = useHasAppearanceControl(settings);
  const appearanceControlLabel = useAppearanceControlLabel(settings);
  const hasFontStyles = settings === null || settings === void 0 ? void 0 : (_settings$typography15 = settings.typography) === null || _settings$typography15 === void 0 ? void 0 : _settings$typography15.fontStyle;
  const hasFontWeights = settings === null || settings === void 0 ? void 0 : (_settings$typography16 = settings.typography) === null || _settings$typography16 === void 0 ? void 0 : _settings$typography16.fontWeight;
  const fontStyle = decodeValue(inheritedValue === null || inheritedValue === void 0 ? void 0 : (_inheritedValue$typog3 = inheritedValue.typography) === null || _inheritedValue$typog3 === void 0 ? void 0 : _inheritedValue$typog3.fontStyle);
  const fontWeight = decodeValue(inheritedValue === null || inheritedValue === void 0 ? void 0 : (_inheritedValue$typog4 = inheritedValue.typography) === null || _inheritedValue$typog4 === void 0 ? void 0 : _inheritedValue$typog4.fontWeight);

  const setFontAppearance = _ref8 => {
    let {
      fontStyle: newFontStyle,
      fontWeight: newFontWeight
    } = _ref8;
    onChange({ ...value,
      typography: { ...(value === null || value === void 0 ? void 0 : value.typography),
        fontStyle: newFontStyle,
        fontWeight: newFontWeight
      }
    });
  };

  const hasFontAppearance = () => {
    var _value$typography3, _value$typography4;

    return !!(value !== null && value !== void 0 && (_value$typography3 = value.typography) !== null && _value$typography3 !== void 0 && _value$typography3.fontStyle) || !!(value !== null && value !== void 0 && (_value$typography4 = value.typography) !== null && _value$typography4 !== void 0 && _value$typography4.fontWeight);
  };

  const resetFontAppearance = () => {
    setFontAppearance({});
  }; // Line Height


  const hasLineHeightEnabled = useHasLineHeightControl(settings);
  const lineHeight = decodeValue(inheritedValue === null || inheritedValue === void 0 ? void 0 : (_inheritedValue$typog5 = inheritedValue.typography) === null || _inheritedValue$typog5 === void 0 ? void 0 : _inheritedValue$typog5.lineHeight);

  const setLineHeight = newValue => {
    onChange({ ...value,
      typography: { ...(value === null || value === void 0 ? void 0 : value.typography),
        lineHeight: newValue
      }
    });
  };

  const hasLineHeight = () => {
    var _value$typography5;

    return !!(value !== null && value !== void 0 && (_value$typography5 = value.typography) !== null && _value$typography5 !== void 0 && _value$typography5.lineHeight);
  };

  const resetLineHeight = () => setLineHeight(undefined); // Letter Spacing


  const hasLetterSpacingControl = useHasLetterSpacingControl(settings);
  const letterSpacing = decodeValue(inheritedValue === null || inheritedValue === void 0 ? void 0 : (_inheritedValue$typog6 = inheritedValue.typography) === null || _inheritedValue$typog6 === void 0 ? void 0 : _inheritedValue$typog6.letterSpacing);

  const setLetterSpacing = newValue => {
    onChange({ ...value,
      typography: { ...(value === null || value === void 0 ? void 0 : value.typography),
        letterSpacing: newValue
      }
    });
  };

  const hasLetterSpacing = () => {
    var _value$typography6;

    return !!(value !== null && value !== void 0 && (_value$typography6 = value.typography) !== null && _value$typography6 !== void 0 && _value$typography6.letterSpacing);
  };

  const resetLetterSpacing = () => setLetterSpacing(undefined); // Text Transform


  const hasTextTransformControl = useHasTextTransformControl(settings);
  const textTransform = decodeValue(inheritedValue === null || inheritedValue === void 0 ? void 0 : (_inheritedValue$typog7 = inheritedValue.typography) === null || _inheritedValue$typog7 === void 0 ? void 0 : _inheritedValue$typog7.textTransform);

  const setTextTransform = newValue => {
    onChange({ ...value,
      typography: { ...(value === null || value === void 0 ? void 0 : value.typography),
        textTransform: newValue
      }
    });
  };

  const hasTextTransform = () => {
    var _value$typography7;

    return !!(value !== null && value !== void 0 && (_value$typography7 = value.typography) !== null && _value$typography7 !== void 0 && _value$typography7.textTransform);
  };

  const resetTextTransform = () => setTextTransform(undefined); // Text Decoration


  const hasTextDecorationControl = useHasTextDecorationControl(settings);
  const textDecoration = decodeValue(inheritedValue === null || inheritedValue === void 0 ? void 0 : (_inheritedValue$typog8 = inheritedValue.typography) === null || _inheritedValue$typog8 === void 0 ? void 0 : _inheritedValue$typog8.textDecoration);

  const setTextDecoration = newValue => {
    onChange({ ...value,
      typography: { ...(value === null || value === void 0 ? void 0 : value.typography),
        textDecoration: newValue
      }
    });
  };

  const hasTextDecoration = () => {
    var _value$typography8;

    return !!(value !== null && value !== void 0 && (_value$typography8 = value.typography) !== null && _value$typography8 !== void 0 && _value$typography8.textDecoration);
  };

  const resetTextDecoration = () => setTextDecoration(undefined);

  const resetAllFilter = (0, _element.useCallback)(previousValue => {
    return { ...previousValue,
      typography: {}
    };
  }, []);
  return (0, _element.createElement)(Wrapper, {
    resetAllFilter: resetAllFilter,
    value: value,
    onChange: onChange,
    panelId: panelId
  }, hasFontFamilyEnabled && (0, _element.createElement)(_components.__experimentalToolsPanelItem, {
    label: (0, _i18n.__)('Font family'),
    hasValue: hasFontFamily,
    onDeselect: resetFontFamily,
    isShownByDefault: defaultControls.fontFamily,
    panelId: panelId
  }, (0, _element.createElement)(_fontFamily.default, {
    fontFamilies: fontFamilies,
    value: fontFamily,
    onChange: setFontFamily,
    size: "__unstable-large",
    __nextHasNoMarginBottom: true
  })), hasFontSizeEnabled && (0, _element.createElement)(_components.__experimentalToolsPanelItem, {
    label: (0, _i18n.__)('Font size'),
    hasValue: hasFontSize,
    onDeselect: resetFontSize,
    isShownByDefault: defaultControls.fontSize,
    panelId: panelId
  }, (0, _element.createElement)(_components.FontSizePicker, {
    value: fontSize,
    onChange: setFontSize,
    fontSizes: fontSizes,
    disableCustomFontSizes: disableCustomFontSizes,
    withReset: false,
    withSlider: true,
    size: "__unstable-large",
    __nextHasNoMarginBottom: true
  })), hasAppearanceControl && (0, _element.createElement)(_components.__experimentalToolsPanelItem, {
    className: "single-column",
    label: appearanceControlLabel,
    hasValue: hasFontAppearance,
    onDeselect: resetFontAppearance,
    isShownByDefault: defaultControls.fontAppearance,
    panelId: panelId
  }, (0, _element.createElement)(_fontAppearanceControl.default, {
    value: {
      fontStyle,
      fontWeight
    },
    onChange: setFontAppearance,
    hasFontStyles: hasFontStyles,
    hasFontWeights: hasFontWeights,
    size: "__unstable-large",
    __nextHasNoMarginBottom: true
  })), hasLineHeightEnabled && (0, _element.createElement)(_components.__experimentalToolsPanelItem, {
    className: "single-column",
    label: (0, _i18n.__)('Line height'),
    hasValue: hasLineHeight,
    onDeselect: resetLineHeight,
    isShownByDefault: defaultControls.lineHeight,
    panelId: panelId
  }, (0, _element.createElement)(_lineHeightControl.default, {
    __nextHasNoMarginBottom: true,
    __unstableInputWidth: "auto",
    value: lineHeight,
    onChange: setLineHeight,
    size: "__unstable-large"
  })), hasLetterSpacingControl && (0, _element.createElement)(_components.__experimentalToolsPanelItem, {
    className: "single-column",
    label: (0, _i18n.__)('Letter spacing'),
    hasValue: hasLetterSpacing,
    onDeselect: resetLetterSpacing,
    isShownByDefault: defaultControls.letterSpacing,
    panelId: panelId
  }, (0, _element.createElement)(_letterSpacingControl.default, {
    value: letterSpacing,
    onChange: setLetterSpacing,
    size: "__unstable-large",
    __unstableInputWidth: "auto"
  })), hasTextDecorationControl && (0, _element.createElement)(_components.__experimentalToolsPanelItem, {
    className: "single-column",
    label: (0, _i18n.__)('Text decoration'),
    hasValue: hasTextDecoration,
    onDeselect: resetTextDecoration,
    isShownByDefault: defaultControls.textDecoration,
    panelId: panelId
  }, (0, _element.createElement)(_textDecorationControl.default, {
    value: textDecoration,
    onChange: setTextDecoration,
    size: "__unstable-large",
    __unstableInputWidth: "auto"
  })), hasTextTransformControl && (0, _element.createElement)(_components.__experimentalToolsPanelItem, {
    label: (0, _i18n.__)('Letter case'),
    hasValue: hasTextTransform,
    onDeselect: resetTextTransform,
    isShownByDefault: defaultControls.textTransform,
    panelId: panelId
  }, (0, _element.createElement)(_textTransformControl.default, {
    value: textTransform,
    onChange: setTextTransform,
    showNone: true,
    isBlock: true,
    size: "__unstable-large",
    __nextHasNoMarginBottom: true
  })));
}
//# sourceMappingURL=typography-panel.js.map
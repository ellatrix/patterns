"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _data = require("@wordpress/data");

var _blocks = require("@wordpress/blocks");

var _components = require("@wordpress/components");

var _icons = require("@wordpress/icons");

var _i18n = require("@wordpress/i18n");

var _convertToGroupButtons = require("../convert-to-group-buttons");

var _store = require("../../store");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const layouts = {
  group: {
    type: 'constrained'
  },
  row: {
    type: 'flex',
    flexWrap: 'nowrap'
  },
  stack: {
    type: 'flex',
    orientation: 'vertical'
  }
};

function BlockGroupToolbar() {
  const {
    blocksSelection,
    clientIds,
    groupingBlockName,
    isGroupable
  } = (0, _convertToGroupButtons.useConvertToGroupButtonProps)();
  const {
    replaceBlocks
  } = (0, _data.useDispatch)(_store.store);
  const {
    canRemove,
    variations
  } = (0, _data.useSelect)(select => {
    const {
      canRemoveBlocks
    } = select(_store.store);
    const {
      getBlockVariations
    } = select(_blocks.store);
    return {
      canRemove: canRemoveBlocks(clientIds),
      variations: getBlockVariations(groupingBlockName, 'transform')
    };
  }, [clientIds, groupingBlockName]);

  const onConvertToGroup = layout => {
    const newBlocks = (0, _blocks.switchToBlockType)(blocksSelection, groupingBlockName);

    if (typeof layout !== 'string') {
      layout = 'group';
    }

    if (newBlocks && newBlocks.length > 0) {
      // Because the block is not in the store yet we can't use
      // updateBlockAttributes so need to manually update attributes.
      newBlocks[0].attributes.layout = layouts[layout];
      replaceBlocks(clientIds, newBlocks);
    }
  };

  const onConvertToRow = () => onConvertToGroup('row');

  const onConvertToStack = () => onConvertToGroup('stack'); // Don't render the button if the current selection cannot be grouped.
  // A good example is selecting multiple button blocks within a Buttons block:
  // The group block is not a valid child of Buttons, so we should not show the button.
  // Any blocks that are locked against removal also cannot be grouped.


  if (!isGroupable || !canRemove) {
    return null;
  }

  const canInsertRow = !!variations.find(_ref => {
    let {
      name
    } = _ref;
    return name === 'group-row';
  });
  const canInsertStack = !!variations.find(_ref2 => {
    let {
      name
    } = _ref2;
    return name === 'group-stack';
  });
  return (0, _element.createElement)(_components.ToolbarGroup, null, (0, _element.createElement)(_components.ToolbarButton, {
    icon: _icons.group,
    label: (0, _i18n._x)('Group', 'verb'),
    onClick: onConvertToGroup
  }), canInsertRow && (0, _element.createElement)(_components.ToolbarButton, {
    icon: _icons.row,
    label: (0, _i18n._x)('Row', 'single horizontal line'),
    onClick: onConvertToRow
  }), canInsertStack && (0, _element.createElement)(_components.ToolbarButton, {
    icon: _icons.stack,
    label: (0, _i18n._x)('Stack', 'verb'),
    onClick: onConvertToStack
  }));
}

var _default = BlockGroupToolbar;
exports.default = _default;
//# sourceMappingURL=toolbar.js.map
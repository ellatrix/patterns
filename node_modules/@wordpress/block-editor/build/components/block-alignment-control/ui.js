"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classnames = _interopRequireDefault(require("classnames"));

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _useAvailableAlignments = _interopRequireDefault(require("./use-available-alignments"));

var _constants = require("./constants");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function BlockAlignmentUI(_ref) {
  let {
    value,
    onChange,
    controls,
    isToolbar,
    isCollapsed = true
  } = _ref;
  const enabledControls = (0, _useAvailableAlignments.default)(controls);
  const hasEnabledControls = !!enabledControls.length;

  if (!hasEnabledControls) {
    return null;
  }

  function onChangeAlignment(align) {
    onChange([value, 'none'].includes(align) ? undefined : align);
  }

  const activeAlignmentControl = _constants.BLOCK_ALIGNMENTS_CONTROLS[value];
  const defaultAlignmentControl = _constants.BLOCK_ALIGNMENTS_CONTROLS[_constants.DEFAULT_CONTROL];
  const UIComponent = isToolbar ? _components.ToolbarGroup : _components.ToolbarDropdownMenu;
  const commonProps = {
    icon: activeAlignmentControl ? activeAlignmentControl.icon : defaultAlignmentControl.icon,
    label: (0, _i18n.__)('Align')
  };
  const extraProps = isToolbar ? {
    isCollapsed,
    controls: enabledControls.map(_ref2 => {
      let {
        name: controlName
      } = _ref2;
      return { ..._constants.BLOCK_ALIGNMENTS_CONTROLS[controlName],
        isActive: value === controlName || !value && controlName === 'none',
        role: isCollapsed ? 'menuitemradio' : undefined,
        onClick: () => onChangeAlignment(controlName)
      };
    })
  } : {
    toggleProps: {
      describedBy: (0, _i18n.__)('Change alignment')
    },
    popoverProps: _constants.POPOVER_PROPS,
    children: _ref3 => {
      let {
        onClose
      } = _ref3;
      return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_components.MenuGroup, {
        className: "block-editor-block-alignment-control__menu-group"
      }, enabledControls.map(_ref4 => {
        let {
          name: controlName,
          info
        } = _ref4;
        const {
          icon,
          title
        } = _constants.BLOCK_ALIGNMENTS_CONTROLS[controlName]; // If no value is provided, mark as selected the `none` option.

        const isSelected = controlName === value || !value && controlName === 'none';
        return (0, _element.createElement)(_components.MenuItem, {
          key: controlName,
          icon: icon,
          iconPosition: "left",
          className: (0, _classnames.default)('components-dropdown-menu__menu-item', {
            'is-active': isSelected
          }),
          isSelected: isSelected,
          onClick: () => {
            onChangeAlignment(controlName);
            onClose();
          },
          role: "menuitemradio",
          info: info
        }, title);
      })));
    }
  };
  return (0, _element.createElement)(UIComponent, (0, _extends2.default)({}, commonProps, extraProps));
}

var _default = BlockAlignmentUI;
exports.default = _default;
//# sourceMappingURL=ui.js.map
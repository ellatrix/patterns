"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classnames = _interopRequireDefault(require("classnames"));

var _i18n = require("@wordpress/i18n");

var _compose = require("@wordpress/compose");

var _components = require("@wordpress/components");

var _data = require("@wordpress/data");

var _blockSelectionClearer = require("../block-selection-clearer");

var _writingFlow = require("../writing-flow");

var _useCompatibilityStyles = require("./use-compatibility-styles");

var _store = require("../../store");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/**
 * Bubbles some event types (keydown, keypress, and dragover) to parent document
 * document to ensure that the keyboard shortcuts and drag and drop work.
 *
 * Ideally, we should remove event bubbling in the future. Keyboard shortcuts
 * should be context dependent, e.g. actions on blocks like Cmd+A should not
 * work globally outside the block editor.
 *
 * @param {Document} doc Document to attach listeners to.
 */
function bubbleEvents(doc) {
  const {
    defaultView
  } = doc;
  const {
    frameElement
  } = defaultView;

  function bubbleEvent(event) {
    const prototype = Object.getPrototypeOf(event);
    const constructorName = prototype.constructor.name;
    const Constructor = window[constructorName];
    const init = {};

    for (const key in event) {
      init[key] = event[key];
    }

    if (event instanceof defaultView.MouseEvent) {
      const rect = frameElement.getBoundingClientRect();
      init.clientX += rect.left;
      init.clientY += rect.top;
    }

    const newEvent = new Constructor(event.type, init);
    const cancelled = !frameElement.dispatchEvent(newEvent);

    if (cancelled) {
      event.preventDefault();
    }
  }

  const eventTypes = ['dragover'];

  for (const name of eventTypes) {
    doc.addEventListener(name, bubbleEvent);
  }
}

function useParsedAssets(html) {
  return (0, _element.useMemo)(() => {
    const doc = document.implementation.createHTMLDocument('');
    doc.body.innerHTML = html;
    return Array.from(doc.body.children);
  }, [html]);
}

async function loadScript(head, _ref) {
  let {
    id,
    src
  } = _ref;
  return new Promise((resolve, reject) => {
    const script = head.ownerDocument.createElement('script');
    script.id = id;

    if (src) {
      script.src = src;

      script.onload = () => resolve();

      script.onerror = () => reject();
    } else {
      resolve();
    }

    head.appendChild(script);
  });
}

function Iframe(_ref2) {
  var _props$style, _props$style2, _props$style3, _props$style4;

  let {
    contentRef,
    children,
    head,
    tabIndex = 0,
    scale = 1,
    frameSize = 0,
    expand = false,
    readonly,
    forwardedRef: ref,
    ...props
  } = _ref2;
  const assets = (0, _data.useSelect)(select => select(_store.store).getSettings().__unstableResolvedAssets, []);
  const [, forceRender] = (0, _element.useReducer)(() => ({}));
  const [iframeDocument, setIframeDocument] = (0, _element.useState)();
  const [bodyClasses, setBodyClasses] = (0, _element.useState)([]);
  const styles = useParsedAssets(assets === null || assets === void 0 ? void 0 : assets.styles);
  const styleIds = styles.map(style => style.id);
  const compatStyles = (0, _useCompatibilityStyles.useCompatibilityStyles)();
  const neededCompatStyles = compatStyles.filter(style => !styleIds.includes(style.id));
  const scripts = useParsedAssets(assets === null || assets === void 0 ? void 0 : assets.scripts);
  const clearerRef = (0, _blockSelectionClearer.useBlockSelectionClearer)();
  const [before, writingFlowRef, after] = (0, _writingFlow.useWritingFlow)();
  const [contentResizeListener, {
    height: contentHeight
  }] = (0, _compose.useResizeObserver)();
  const setRef = (0, _compose.useRefEffect)(node => {
    let iFrameDocument; // Prevent the default browser action for files dropped outside of dropzones.

    function preventFileDropDefault(event) {
      event.preventDefault();
    }

    function setDocumentIfReady() {
      const {
        contentDocument,
        ownerDocument
      } = node;
      const {
        readyState,
        documentElement
      } = contentDocument;
      iFrameDocument = contentDocument;

      if (readyState !== 'interactive' && readyState !== 'complete') {
        return false;
      }

      bubbleEvents(contentDocument);
      setIframeDocument(contentDocument);
      clearerRef(documentElement); // Ideally ALL classes that are added through get_body_class should
      // be added in the editor too, which we'll somehow have to get from
      // the server in the future (which will run the PHP filters).

      setBodyClasses(Array.from(ownerDocument.body.classList).filter(name => name.startsWith('admin-color-') || name.startsWith('post-type-') || name === 'wp-embed-responsive'));
      contentDocument.dir = ownerDocument.dir;
      documentElement.removeChild(contentDocument.head);
      documentElement.removeChild(contentDocument.body);
      iFrameDocument.addEventListener('dragover', preventFileDropDefault, false);
      iFrameDocument.addEventListener('drop', preventFileDropDefault, false);
      return true;
    } // Document set with srcDoc is not immediately ready.


    node.addEventListener('load', setDocumentIfReady);
    return () => {
      var _iFrameDocument, _iFrameDocument2;

      node.removeEventListener('load', setDocumentIfReady);
      (_iFrameDocument = iFrameDocument) === null || _iFrameDocument === void 0 ? void 0 : _iFrameDocument.removeEventListener('dragover', preventFileDropDefault);
      (_iFrameDocument2 = iFrameDocument) === null || _iFrameDocument2 === void 0 ? void 0 : _iFrameDocument2.removeEventListener('drop', preventFileDropDefault);
    };
  }, []);
  const headRef = (0, _compose.useRefEffect)(element => {
    scripts.reduce((promise, script) => promise.then(() => loadScript(element, script)), Promise.resolve()).finally(() => {
      // When script are loaded, re-render blocks to allow them
      // to initialise.
      forceRender();
    });
  }, []);
  const disabledRef = (0, _compose.useDisabled)({
    isDisabled: !readonly
  });
  const bodyRef = (0, _compose.useMergeRefs)([contentRef, clearerRef, writingFlowRef, disabledRef]);
  const styleAssets = (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)("style", null, 'html{height:auto!important;}body{margin:0}'), [...styles, ...neededCompatStyles].map(_ref3 => {
    let {
      tagName,
      href,
      id,
      rel,
      media,
      textContent
    } = _ref3;
    const TagName = tagName.toLowerCase();

    if (TagName === 'style') {
      return (0, _element.createElement)(TagName, {
        id,
        key: id
      }, textContent);
    }

    return (0, _element.createElement)(TagName, {
      href,
      id,
      rel,
      media,
      key: id
    });
  })); // Correct doctype is required to enable rendering in standards
  // mode. Also preload the styles to avoid a flash of unstyled
  // content.

  const srcDoc = (0, _element.useMemo)(() => {
    return '<!doctype html>' + (0, _element.renderToString)(styleAssets);
  }, []); // We need to counter the margin created by scaling the iframe. If the scale
  // is e.g. 0.45, then the top + bottom margin is 0.55 (1 - scale). Just the
  // top or bottom margin is 0.55 / 2 ((1 - scale) / 2).

  const marginFromScaling = contentHeight * (1 - scale) / 2;
  return (0, _element.createElement)(_element.Fragment, null, tabIndex >= 0 && before, (0, _element.createElement)("iframe", (0, _extends2.default)({}, props, {
    style: { ...props.style,
      height: expand ? contentHeight : (_props$style = props.style) === null || _props$style === void 0 ? void 0 : _props$style.height,
      marginTop: scale ? -marginFromScaling + frameSize : (_props$style2 = props.style) === null || _props$style2 === void 0 ? void 0 : _props$style2.marginTop,
      marginBottom: scale ? -marginFromScaling + frameSize : (_props$style3 = props.style) === null || _props$style3 === void 0 ? void 0 : _props$style3.marginBottom,
      transform: scale ? `scale( ${scale} )` : (_props$style4 = props.style) === null || _props$style4 === void 0 ? void 0 : _props$style4.transform,
      transition: 'all .3s'
    },
    ref: (0, _compose.useMergeRefs)([ref, setRef]),
    tabIndex: tabIndex // Correct doctype is required to enable rendering in standards
    // mode. Also preload the styles to avoid a flash of unstyled
    // content.
    ,
    srcDoc: srcDoc,
    title: (0, _i18n.__)('Editor canvas')
  }), iframeDocument && (0, _element.createPortal)((0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)("head", {
    ref: headRef
  }, styleAssets, head), (0, _element.createElement)("body", {
    ref: bodyRef,
    className: (0, _classnames.default)('block-editor-iframe__body', 'editor-styles-wrapper', ...bodyClasses)
  }, contentResizeListener, (0, _element.createElement)(_components.__experimentalStyleProvider, {
    document: iframeDocument
  }, children))), iframeDocument.documentElement)), tabIndex >= 0 && after);
}

function IframeIfReady(props, ref) {
  const isInitialised = (0, _data.useSelect)(select => select(_store.store).getSettings().__internalIsInitialized, []); // We shouldn't render the iframe until the editor settings are initialised.
  // The initial settings are needed to get the styles for the srcDoc, which
  // cannot be changed after the iframe is mounted. srcDoc is used to to set
  // the initial iframe HTML, which is required to avoid a flash of unstyled
  // content.

  if (!isInitialised) {
    return null;
  }

  return (0, _element.createElement)(Iframe, (0, _extends2.default)({}, props, {
    forwardedRef: ref
  }));
}

var _default = (0, _element.forwardRef)(IframeIfReady);

exports.default = _default;
//# sourceMappingURL=index.js.map
{"version":3,"sources":["@wordpress/block-editor/src/utils/sorting.js"],"names":["comparator","field","items","order","a","b","cmpA","cmpB","orderA","findIndex","item","orderB","orderBy","concat","sort"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,UAAU,GAAG,CAAEC,KAAF,EAASC,KAAT,EAAgBC,KAAhB,KAA2B;AAC7C,SAAO,CAAEC,CAAF,EAAKC,CAAL,KAAY;AAClB,QAAIC,IAAJ,EAAUC,IAAV;;AAEA,QAAK,OAAON,KAAP,KAAiB,UAAtB,EAAmC;AAClCK,MAAAA,IAAI,GAAGL,KAAK,CAAEG,CAAF,CAAZ;AACAG,MAAAA,IAAI,GAAGN,KAAK,CAAEI,CAAF,CAAZ;AACA,KAHD,MAGO;AACNC,MAAAA,IAAI,GAAGF,CAAC,CAAEH,KAAF,CAAR;AACAM,MAAAA,IAAI,GAAGF,CAAC,CAAEJ,KAAF,CAAR;AACA;;AAED,QAAKK,IAAI,GAAGC,IAAZ,EAAmB;AAClB,aAAOJ,KAAK,KAAK,KAAV,GAAkB,CAAlB,GAAsB,CAAC,CAA9B;AACA,KAFD,MAEO,IAAKI,IAAI,GAAGD,IAAZ,EAAmB;AACzB,aAAOH,KAAK,KAAK,KAAV,GAAkB,CAAC,CAAnB,GAAuB,CAA9B;AACA;;AAED,UAAMK,MAAM,GAAGN,KAAK,CAACO,SAAN,CAAmBC,IAAF,IAAYA,IAAI,KAAKN,CAAtC,CAAf;AACA,UAAMO,MAAM,GAAGT,KAAK,CAACO,SAAN,CAAmBC,IAAF,IAAYA,IAAI,KAAKL,CAAtC,CAAf,CAlBkB,CAoBlB;;AACA,QAAKG,MAAM,GAAGG,MAAd,EAAuB;AACtB,aAAO,CAAP;AACA,KAFD,MAEO,IAAKA,MAAM,GAAGH,MAAd,EAAuB;AAC7B,aAAO,CAAC,CAAR;AACA;;AAED,WAAO,CAAP;AACA,GA5BD;AA6BA,CA9BD;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASI,OAAT,CAAkBV,KAAlB,EAAyBD,KAAzB,EAAgD;AAAA,MAAhBE,KAAgB,uEAAR,KAAQ;AACtD,SAAOD,KAAK,CAACW,MAAN,GAAeC,IAAf,CAAqBd,UAAU,CAAEC,KAAF,EAASC,KAAT,EAAgBC,KAAhB,CAA/B,CAAP;AACA","sourcesContent":["/**\n * Recursive stable sorting comparator function.\n *\n * @param {string|Function} field Field to sort by.\n * @param {Array}           items Items to sort.\n * @param {string}          order Order, 'asc' or 'desc'.\n * @return {Function} Comparison function to be used in a `.sort()`.\n */\nconst comparator = ( field, items, order ) => {\n\treturn ( a, b ) => {\n\t\tlet cmpA, cmpB;\n\n\t\tif ( typeof field === 'function' ) {\n\t\t\tcmpA = field( a );\n\t\t\tcmpB = field( b );\n\t\t} else {\n\t\t\tcmpA = a[ field ];\n\t\t\tcmpB = b[ field ];\n\t\t}\n\n\t\tif ( cmpA > cmpB ) {\n\t\t\treturn order === 'asc' ? 1 : -1;\n\t\t} else if ( cmpB > cmpA ) {\n\t\t\treturn order === 'asc' ? -1 : 1;\n\t\t}\n\n\t\tconst orderA = items.findIndex( ( item ) => item === a );\n\t\tconst orderB = items.findIndex( ( item ) => item === b );\n\n\t\t// Stable sort: maintaining original array order\n\t\tif ( orderA > orderB ) {\n\t\t\treturn 1;\n\t\t} else if ( orderB > orderA ) {\n\t\t\treturn -1;\n\t\t}\n\n\t\treturn 0;\n\t};\n};\n\n/**\n * Order items by a certain key.\n * Supports decorator functions that allow complex picking of a comparison field.\n * Sorts in ascending order by default, but supports descending as well.\n * Stable sort - maintains original order of equal items.\n *\n * @param {Array}           items Items to order.\n * @param {string|Function} field Field to order by.\n * @param {string}          order Sorting order, `asc` or `desc`.\n * @return {Array} Sorted items.\n */\nexport function orderBy( items, field, order = 'asc' ) {\n\treturn items.concat().sort( comparator( field, items, order ) );\n}\n"]}
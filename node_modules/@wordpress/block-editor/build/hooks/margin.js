"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MarginVisualizer = MarginVisualizer;

var _element = require("@wordpress/element");

var _isShallowEqual = _interopRequireDefault(require("@wordpress/is-shallow-equal"));

var _blockPopover = _interopRequireDefault(require("../components/block-popover"));

var _utils = require("../components/spacing-sizes-control/utils");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function MarginVisualizer(_ref) {
  var _attributes$style, _attributes$style$spa;

  let {
    clientId,
    attributes,
    forceShow
  } = _ref;
  const margin = attributes === null || attributes === void 0 ? void 0 : (_attributes$style = attributes.style) === null || _attributes$style === void 0 ? void 0 : (_attributes$style$spa = _attributes$style.spacing) === null || _attributes$style$spa === void 0 ? void 0 : _attributes$style$spa.margin;
  const style = (0, _element.useMemo)(() => {
    const marginTop = margin !== null && margin !== void 0 && margin.top ? (0, _utils.getSpacingPresetCssVar)(margin === null || margin === void 0 ? void 0 : margin.top) : 0;
    const marginRight = margin !== null && margin !== void 0 && margin.right ? (0, _utils.getSpacingPresetCssVar)(margin === null || margin === void 0 ? void 0 : margin.right) : 0;
    const marginBottom = margin !== null && margin !== void 0 && margin.bottom ? (0, _utils.getSpacingPresetCssVar)(margin === null || margin === void 0 ? void 0 : margin.bottom) : 0;
    const marginLeft = margin !== null && margin !== void 0 && margin.left ? (0, _utils.getSpacingPresetCssVar)(margin === null || margin === void 0 ? void 0 : margin.left) : 0;
    return {
      borderTopWidth: marginTop,
      borderRightWidth: marginRight,
      borderBottomWidth: marginBottom,
      borderLeftWidth: marginLeft,
      top: marginTop ? `calc(${marginTop} * -1)` : 0,
      right: marginRight ? `calc(${marginRight} * -1)` : 0,
      bottom: marginBottom ? `calc(${marginBottom} * -1)` : 0,
      left: marginLeft ? `calc(${marginLeft} * -1)` : 0
    };
  }, [margin]);
  const [isActive, setIsActive] = (0, _element.useState)(false);
  const valueRef = (0, _element.useRef)(margin);
  const timeoutRef = (0, _element.useRef)();

  const clearTimer = () => {
    if (timeoutRef.current) {
      window.clearTimeout(timeoutRef.current);
    }
  };

  (0, _element.useEffect)(() => {
    if (!(0, _isShallowEqual.default)(margin, valueRef.current) && !forceShow) {
      setIsActive(true);
      valueRef.current = margin;
      timeoutRef.current = setTimeout(() => {
        setIsActive(false);
      }, 400);
    }

    return () => {
      setIsActive(false);
      clearTimer();
    };
  }, [margin, forceShow]);

  if (!isActive && !forceShow) {
    return null;
  }

  return (0, _element.createElement)(_blockPopover.default, {
    clientId: clientId,
    __unstableCoverTarget: true,
    __unstableRefreshSize: margin,
    __unstablePopoverSlot: "block-toolbar",
    shift: false
  }, (0, _element.createElement)("div", {
    className: "block-editor__padding-visualizer",
    style: style
  }));
}
//# sourceMappingURL=margin.js.map
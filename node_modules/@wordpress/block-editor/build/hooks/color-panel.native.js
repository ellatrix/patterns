"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _data = require("@wordpress/data");

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _blockEditor = require("@wordpress/block-editor");

var _panelColorGradientSettings = _interopRequireDefault(require("../components/colors-gradients/panel-color-gradient-settings"));

var _contrastChecker = _interopRequireDefault(require("../components/contrast-checker"));

var _inspectorControls = _interopRequireDefault(require("../components/inspector-controls"));

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const ColorPanel = _ref => {
  let {
    settings
  } = _ref;
  const globalStyles = (0, _components.useGlobalStyles)();
  const [detectedBackgroundColor, setDetectedBackgroundColor] = (0, _element.useState)();
  const [detectedTextColor, setDetectedTextColor] = (0, _element.useState)();
  const {
    baseGlobalStyles
  } = (0, _data.useSelect)(select => {
    var _getSettings, _getSettings$__experi;

    const {
      getSettings
    } = select(_blockEditor.store);
    return {
      baseGlobalStyles: (_getSettings = getSettings()) === null || _getSettings === void 0 ? void 0 : (_getSettings$__experi = _getSettings.__experimentalGlobalStylesBaseStyles) === null || _getSettings$__experi === void 0 ? void 0 : _getSettings$__experi.color
    };
  });
  (0, _element.useEffect)(() => {
    // The following logic is used to determine current text/background colors:
    // 1. The globalStyles object is queried to determine whether a color has been
    // set via a block's settings.
    // 2. If a block-based theme is in use and no globalStyles exist, the theme's
    // default/base colors are used.
    // 3. If no globalStyles exist and a theme isn't block-based, there is no way
    // to determine the default text/background color and the checker won't run.
    const textColor = (globalStyles === null || globalStyles === void 0 ? void 0 : globalStyles.color) || (baseGlobalStyles === null || baseGlobalStyles === void 0 ? void 0 : baseGlobalStyles.text);
    const backgroundColor = (globalStyles === null || globalStyles === void 0 ? void 0 : globalStyles.backgroundColor) || (baseGlobalStyles === null || baseGlobalStyles === void 0 ? void 0 : baseGlobalStyles.background);
    setDetectedTextColor(textColor);
    setDetectedBackgroundColor(backgroundColor);
  }, [globalStyles, baseGlobalStyles]);
  return (0, _element.createElement)(_inspectorControls.default, null, (0, _element.createElement)(_panelColorGradientSettings.default, {
    title: (0, _i18n.__)('Color'),
    initialOpen: false,
    settings: settings
  }, (0, _element.createElement)(_contrastChecker.default, {
    backgroundColor: detectedBackgroundColor,
    textColor: detectedTextColor
  })));
};

var _default = ColorPanel;
exports.default = _default;
//# sourceMappingURL=color-panel.native.js.map
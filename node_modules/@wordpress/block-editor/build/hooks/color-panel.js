"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ColorPanel;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _dropdown = _interopRequireDefault(require("../components/colors-gradients/dropdown"));

var _contrastChecker = _interopRequireDefault(require("../components/contrast-checker"));

var _inspectorControls = _interopRequireDefault(require("../components/inspector-controls"));

var _useMultipleOriginColorsAndGradients = _interopRequireDefault(require("../components/colors-gradients/use-multiple-origin-colors-and-gradients"));

var _useBlockRefs = require("../components/block-list/use-block-props/use-block-refs");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function getComputedStyle(node) {
  return node.ownerDocument.defaultView.getComputedStyle(node);
}

function ColorPanel(_ref) {
  let {
    enableAlpha = false,
    settings,
    clientId,
    enableContrastChecking = true
  } = _ref;
  const [detectedBackgroundColor, setDetectedBackgroundColor] = (0, _element.useState)();
  const [detectedColor, setDetectedColor] = (0, _element.useState)();
  const [detectedLinkColor, setDetectedLinkColor] = (0, _element.useState)();
  const ref = (0, _useBlockRefs.__unstableUseBlockRef)(clientId);
  const definedColors = settings.filter(setting => setting === null || setting === void 0 ? void 0 : setting.colorValue);
  (0, _element.useEffect)(() => {
    var _ref$current;

    if (!enableContrastChecking) {
      return;
    }

    if (!definedColors.length) {
      if (detectedBackgroundColor) {
        setDetectedBackgroundColor();
      }

      if (detectedColor) {
        setDetectedColor();
      }

      if (detectedLinkColor) {
        setDetectedColor();
      }

      return;
    }

    if (!ref.current) {
      return;
    }

    setDetectedColor(getComputedStyle(ref.current).color);
    const firstLinkElement = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.querySelector('a');

    if (firstLinkElement && !!firstLinkElement.innerText) {
      setDetectedLinkColor(getComputedStyle(firstLinkElement).color);
    }

    let backgroundColorNode = ref.current;
    let backgroundColor = getComputedStyle(backgroundColorNode).backgroundColor;

    while (backgroundColor === 'rgba(0, 0, 0, 0)' && backgroundColorNode.parentNode && backgroundColorNode.parentNode.nodeType === backgroundColorNode.parentNode.ELEMENT_NODE) {
      backgroundColorNode = backgroundColorNode.parentNode;
      backgroundColor = getComputedStyle(backgroundColorNode).backgroundColor;
    }

    setDetectedBackgroundColor(backgroundColor);
  });
  const colorGradientSettings = (0, _useMultipleOriginColorsAndGradients.default)();
  return (0, _element.createElement)(_inspectorControls.default, {
    group: "color"
  }, (0, _element.createElement)(_dropdown.default, (0, _extends2.default)({
    enableAlpha: enableAlpha,
    panelId: clientId,
    settings: settings,
    __experimentalIsItemGroup: false,
    __experimentalIsRenderedInSidebar: true
  }, colorGradientSettings)), enableContrastChecking && (0, _element.createElement)(_contrastChecker.default, {
    backgroundColor: detectedBackgroundColor,
    textColor: detectedColor,
    enableAlphaChecker: enableAlpha,
    linkColor: detectedLinkColor
  }));
}
//# sourceMappingURL=color-panel.js.map
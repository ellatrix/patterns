export function getAuthors(query: any | undefined): ({ dispatch }: {
    dispatch: any;
}) => Promise<void>;
export function getCurrentUser(): ({ dispatch }: {
    dispatch: any;
}) => Promise<void>;
export function getEntityRecord(kind: string, name: string, key: string | number | undefined, query: any | undefined): ({ select, dispatch }: {
    select: any;
    dispatch: any;
}) => Promise<void>;
/**
 * Requests an entity's record from the REST API.
 */
export const getRawEntityRecord: Function;
/**
 * Requests an entity's record from the REST API.
 */
export const getEditedEntityRecord: Function;
export function getEntityRecords(kind: string, name: string, query?: any | null): ({ dispatch }: {
    dispatch: any;
}) => Promise<void>;
export namespace getEntityRecords {
    function shouldInvalidate(action: any, kind: any, name: any): any;
}
export function getCurrentTheme(): ({ dispatch, resolveSelect }: {
    dispatch: any;
    resolveSelect: any;
}) => Promise<void>;
/**
 * Requests theme supports data from the index.
 */
export const getThemeSupports: Function;
export function getEmbedPreview(url: string): ({ dispatch }: {
    dispatch: any;
}) => Promise<void>;
export function canUser(requestedAction: string, resource: string, id: string | null): ({ dispatch, registry }: {
    dispatch: any;
    registry: any;
}) => Promise<void>;
export function canUserEditEntityRecord(kind: string, name: string, recordId: string): ({ dispatch }: {
    dispatch: any;
}) => Promise<void>;
export function getAutosaves(postType: string, postId: number): ({ dispatch, resolveSelect }: {
    dispatch: any;
    resolveSelect: any;
}) => Promise<void>;
export function getAutosave(postType: string, postId: number): ({ resolveSelect }: {
    resolveSelect: any;
}) => Promise<void>;
export function __experimentalGetTemplateForLink(link: string): ({ dispatch, resolveSelect }: {
    dispatch: any;
    resolveSelect: any;
}) => Promise<void>;
export namespace __experimentalGetTemplateForLink {
    function shouldInvalidate(action: any): any;
}
export function __experimentalGetCurrentGlobalStylesId(): ({ dispatch, resolveSelect }: {
    dispatch: any;
    resolveSelect: any;
}) => Promise<void>;
export function __experimentalGetCurrentThemeBaseGlobalStyles(): ({ resolveSelect, dispatch }: {
    resolveSelect: any;
    dispatch: any;
}) => Promise<void>;
export function __experimentalGetCurrentThemeGlobalStylesVariations(): ({ resolveSelect, dispatch }: {
    resolveSelect: any;
    dispatch: any;
}) => Promise<void>;
export function getBlockPatterns(): ({ dispatch }: {
    dispatch: any;
}) => Promise<void>;
export function getBlockPatternCategories(): ({ dispatch }: {
    dispatch: any;
}) => Promise<void>;
//# sourceMappingURL=resolvers.d.ts.map
import { Status } from './constants';
interface GlobalResourcePermissionsResolution {
    /** Can the current user create new resources of this type? */
    canCreate: boolean;
}
interface SpecificResourcePermissionsResolution {
    /** Can the current user update resources of this type? */
    canUpdate: boolean;
    /** Can the current user delete resources of this type? */
    canDelete: boolean;
}
interface ResolutionDetails {
    /** Resolution status */
    status: Status;
    /**
     * Is the data still being resolved?
     */
    isResolving: boolean;
}
/**
 * Is the data resolved by now?
 */
declare type HasResolved = boolean;
declare type ResourcePermissionsResolution<IdType> = [
    HasResolved,
    ResolutionDetails & GlobalResourcePermissionsResolution & (IdType extends void ? SpecificResourcePermissionsResolution : {})
];
/**
 * Resolves resource permissions.
 *
 * @since 6.1.0 Introduced in WordPress core.
 *
 * @param    resource The resource in question, e.g. media.
 * @param    id       ID of a specific resource entry, if needed, e.g. 10.
 *
 * @example
 * ```js
 * import { useResourcePermissions } from '@wordpress/core-data';
 *
 * function PagesList() {
 *   const { canCreate, isResolving } = useResourcePermissions( 'pages' );
 *
 *   if ( isResolving ) {
 *     return 'Loading ...';
 *   }
 *
 *   return (
 *     <div>
 *       {canCreate ? (<button>+ Create a new page</button>) : false}
 *       // ...
 *     </div>
 *   );
 * }
 *
 * // Rendered in the application:
 * // <PagesList />
 * ```
 *
 * @example
 * ```js
 * import { useResourcePermissions } from '@wordpress/core-data';
 *
 * function Page({ pageId }) {
 *   const {
 *     canCreate,
 *     canUpdate,
 *     canDelete,
 *     isResolving
 *   } = useResourcePermissions( 'pages', pageId );
 *
 *   if ( isResolving ) {
 *     return 'Loading ...';
 *   }
 *
 *   return (
 *     <div>
 *       {canCreate ? (<button>+ Create a new page</button>) : false}
 *       {canUpdate ? (<button>Edit page</button>) : false}
 *       {canDelete ? (<button>Delete page</button>) : false}
 *       // ...
 *     </div>
 *   );
 * }
 *
 * // Rendered in the application:
 * // <Page pageId={ 15 } />
 * ```
 *
 * In the above example, when `PagesList` is rendered into an
 * application, the appropriate permissions and the resolution details will be retrieved from
 * the store state using `canUser()`, or resolved if missing.
 *
 * @return Entity records data.
 * @template IdType
 */
export default function useResourcePermissions<IdType = void>(resource: string, id?: IdType): ResourcePermissionsResolution<IdType>;
export declare function __experimentalUseResourcePermissions(resource: string, id?: unknown): ResourcePermissionsResolution<unknown>;
export {};
//# sourceMappingURL=use-resource-permissions.d.ts.map
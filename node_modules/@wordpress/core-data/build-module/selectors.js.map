{"version":3,"sources":["@wordpress/core-data/src/selectors.ts"],"names":["createSelector","set","createRegistrySelector","addQueryArgs","deprecated","STORE_NAME","getQueriedItems","DEFAULT_ENTITY_KEY","getNormalizedCommaSeparable","isRawAttribute","EMPTY_OBJECT","isRequestingEmbedPreview","select","state","url","isResolving","getAuthors","query","since","alternative","path","getUserQueryResults","getCurrentUser","currentUser","queryID","queryResults","users","queries","map","id","byId","getEntitiesByKind","kind","getEntitiesConfig","entities","config","filter","entity","getEntity","name","getEntityConfig","find","getEntityRecord","key","queriedState","records","queriedData","undefined","context","itemIsComplete","items","item","_fields","filteredItem","fields","f","length","field","split","value","forEach","fieldName","recordId","__experimentalGetEntityRecordNoResolver","getRawEntityRecord","record","Object","keys","reduce","accumulator","_key","raw","hasEntityRecords","Array","isArray","getEntityRecords","__experimentalGetDirtyEntityRecords","dirtyRecords","primaryKeys","edits","primaryKey","hasEditsForEntityRecord","entityConfig","entityRecord","getEditedEntityRecord","push","title","getTitle","__experimentalGetEntitiesBeingSaved","recordsBeingSaved","saving","isSavingEntityRecord","getEntityRecordEdits","getEntityRecordNonTransientEdits","transientEdits","acc","isAutosavingEntityRecord","pending","isAutosave","Boolean","isDeletingEntityRecord","deleting","getLastEntitySaveError","error","getLastEntityDeleteError","getCurrentUndoOffset","undo","offset","getUndoEdit","getRedoEdit","hasUndo","hasRedo","getCurrentTheme","currentTheme","__experimentalGetCurrentGlobalStylesId","currentGlobalStylesId","getThemeSupports","theme_supports","getEmbedPreview","embedPreviews","isPreviewEmbedFallback","preview","oEmbedLinkCheck","html","canUser","action","resource","join","userPermissions","canUserEditEntityRecord","__unstable_rest_base","getAutosaves","postType","postId","autosaves","getAutosave","authorId","autosave","author","hasFetchedAutosaves","hasFinishedResolution","getReferenceByDistinctEdits","flattenedUndo","__experimentalGetTemplateForLink","link","__experimentalGetCurrentThemeBaseGlobalStyles","themeBaseGlobalStyles","stylesheet","__experimentalGetCurrentThemeGlobalStylesVariations","themeGlobalStyleVariations","getBlockPatterns","blockPatterns","getBlockPatternCategories","blockPatternCategories"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,cAAP,MAA2B,QAA3B;AACA,SAASC,GAAT,QAAoB,QAApB;AAEA;AACA;AACA;;AACA,SAASC,sBAAT,QAAuC,iBAAvC;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAEA;AACA;AACA;;AACA,SAASC,UAAT,QAA2B,QAA3B;AACA,SAASC,eAAT,QAAgC,gBAAhC;AACA,SAASC,kBAAT,QAAmC,YAAnC;AACA,SAASC,2BAAT,EAAsCC,cAAtC,QAA4D,SAA5D;;AAoEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAG,EAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,wBAAwB,GAAGT,sBAAsB,CAC3DU,MAAF,IACC,CAAEC,KAAF,EAAgBC,GAAhB,KAA0C;AACzC,SAAOF,MAAM,CAAEP,UAAF,CAAN,CAAqBU,WAArB,CAAkC,iBAAlC,EAAqD,CAC3DD,GAD2D,CAArD,CAAP;AAGA,CAN2D,CAAvD;AASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,UAAT,CACNH,KADM,EAENI,KAFM,EAGM;AACZb,EAAAA,UAAU,CAAE,+BAAF,EAAmC;AAC5Cc,IAAAA,KAAK,EAAE,KADqC;AAE5CC,IAAAA,WAAW,EAAE;AAF+B,GAAnC,CAAV;AAKA,QAAMC,IAAI,GAAGjB,YAAY,CACxB,wCADwB,EAExBc,KAFwB,CAAzB;AAIA,SAAOI,mBAAmB,CAAER,KAAF,EAASO,IAAT,CAA1B;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,cAAT,CAAyBT,KAAzB,EAA2D;AACjE,SAAOA,KAAK,CAACU,WAAb;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMF,mBAAmB,GAAGrB,cAAc,CAChD,CAAEa,KAAF,EAAgBW,OAAhB,KAA0D;AAAA;;AACzD,QAAMC,YAAY,4BAAGZ,KAAK,CAACa,KAAN,CAAYC,OAAZ,CAAqBH,OAArB,CAAH,yEAAqC,EAAvD;AAEA,SAAOC,YAAY,CAACG,GAAb,CAAoBC,EAAF,IAAUhB,KAAK,CAACa,KAAN,CAAYI,IAAZ,CAAkBD,EAAlB,CAA5B,CAAP;AACA,CAL+C,EAMhD,CAAEhB,KAAF,EAAgBW,OAAhB,KAAqC,CACpCX,KAAK,CAACa,KAAN,CAAYC,OAAZ,CAAqBH,OAArB,CADoC,EAEpCX,KAAK,CAACa,KAAN,CAAYI,IAFwB,CANW,CAA1C;AAYP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,iBAAT,CAA4BlB,KAA5B,EAA0CmB,IAA1C,EAAuE;AAC7E5B,EAAAA,UAAU,CAAE,8CAAF,EAAkD;AAC3Dc,IAAAA,KAAK,EAAE,KADoD;AAE3DC,IAAAA,WAAW,EAAE;AAF8C,GAAlD,CAAV;AAIA,SAAOc,iBAAiB,CAAEpB,KAAF,EAASmB,IAAT,CAAxB;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,iBAAT,CAA4BpB,KAA5B,EAA0CmB,IAA1C,EAAuE;AAC7E,SAAOnB,KAAK,CAACqB,QAAN,CAAeC,MAAf,CAAsBC,MAAtB,CAAgCC,MAAF,IAAcA,MAAM,CAACL,IAAP,KAAgBA,IAA5D,CAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASM,SAAT,CAAoBzB,KAApB,EAAkCmB,IAAlC,EAAgDO,IAAhD,EAAoE;AAC1EnC,EAAAA,UAAU,CAAE,sCAAF,EAA0C;AACnDc,IAAAA,KAAK,EAAE,KAD4C;AAEnDC,IAAAA,WAAW,EAAE;AAFsC,GAA1C,CAAV;AAIA,SAAOqB,eAAe,CAAE3B,KAAF,EAASmB,IAAT,EAAeO,IAAf,CAAtB;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,eAAT,CACN3B,KADM,EAENmB,IAFM,EAGNO,IAHM,EAIA;AAAA;;AACN,kCAAO1B,KAAK,CAACqB,QAAN,CAAeC,MAAtB,0DAAO,sBAAuBM,IAAvB,CACJN,MAAF,IAAcA,MAAM,CAACH,IAAP,KAAgBA,IAAhB,IAAwBG,MAAM,CAACI,IAAP,KAAgBA,IADhD,CAAP;AAGA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,eAAe,GAAG1C,cAAc,CAC1C,CAKDa,KALC,EAMDmB,IANC,EAODO,IAPC,EAQDI,GARC,EASD1B,KATC,KAU6B;AAAA;;AAC9B,QAAM2B,YAAY,4BACjB/B,KAAK,CAACqB,QAAN,CAAeW,OADE,oFACjB,sBAA0Bb,IAA1B,CADiB,qFACjB,uBAAoCO,IAApC,CADiB,2DACjB,uBAA4CO,WAD7C;;AAEA,MAAK,CAAEF,YAAP,EAAsB;AACrB,WAAOG,SAAP;AACA;;AACD,QAAMC,OAAO,qBAAG/B,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAE+B,OAAV,2DAAqB,SAAlC;;AAEA,MAAK/B,KAAK,KAAK8B,SAAf,EAA2B;AAAA;;AAC1B;AACA,QAAK,2BAAEH,YAAY,CAACK,cAAb,CAA6BD,OAA7B,CAAF,kDAAE,sBAA0CL,GAA1C,CAAF,CAAL,EAAyD;AACxD,aAAOI,SAAP;AACA;;AAED,WAAOH,YAAY,CAACM,KAAb,CAAoBF,OAApB,EAA+BL,GAA/B,CAAP;AACA;;AAED,QAAMQ,IAAI,4BAAGP,YAAY,CAACM,KAAb,CAAoBF,OAApB,CAAH,0DAAG,sBAAiCL,GAAjC,CAAb;;AACA,MAAKQ,IAAI,IAAIlC,KAAK,CAACmC,OAAnB,EAA6B;AAAA;;AAC5B,UAAMC,YAAY,GAAG,EAArB;AACA,UAAMC,MAAM,4BAAG9C,2BAA2B,CAAES,KAAK,CAACmC,OAAR,CAA9B,yEAAmD,EAA/D;;AACA,SAAM,IAAIG,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGD,MAAM,CAACE,MAA5B,EAAoCD,CAAC,EAArC,EAA0C;AACzC,YAAME,KAAK,GAAGH,MAAM,CAAEC,CAAF,CAAN,CAAYG,KAAZ,CAAmB,GAAnB,CAAd;AACA,UAAIC,KAAK,GAAGR,IAAZ;AACAM,MAAAA,KAAK,CAACG,OAAN,CAAiBC,SAAF,IAAiB;AAC/BF,QAAAA,KAAK,GAAGA,KAAK,CAAEE,SAAF,CAAb;AACA,OAFD;AAGA5D,MAAAA,GAAG,CAAEoD,YAAF,EAAgBI,KAAhB,EAAuBE,KAAvB,CAAH;AACA;;AACD,WAAON,YAAP;AACA;;AAED,SAAOF,IAAP;AACA,CA5C2C,EA6C5C,CAAEtC,KAAF,EAAgBmB,IAAhB,EAAsBO,IAAtB,EAA4BuB,QAA5B,EAAsC7C,KAAtC,KAAiD;AAAA;;AAChD,QAAM+B,OAAO,sBAAG/B,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAE+B,OAAV,6DAAqB,SAAlC;AACA,SAAO,2BACNnC,KAAK,CAACqB,QAAN,CAAeW,OADT,qFACN,uBAA0Bb,IAA1B,CADM,qFACN,uBAAoCO,IAApC,CADM,qFACN,uBAA4CO,WADtC,qFACN,uBAAyDI,KAAzD,CACCF,OADD,CADM,2DACN,uBAEKc,QAFL,CADM,4BAINjD,KAAK,CAACqB,QAAN,CAAeW,OAJT,sFAIN,uBAA0Bb,IAA1B,CAJM,uFAIN,wBAAoCO,IAApC,CAJM,uFAIN,wBAA4CO,WAJtC,uFAIN,wBACGG,cADH,CACmBD,OADnB,CAJM,4DAIN,wBACgCc,QADhC,CAJM,CAAP;AAOA,CAtD2C,CAAtC;AAyDP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,uCAAT,CAEJlD,KAFI,EAEUmB,IAFV,EAEwBO,IAFxB,EAEsCI,GAFtC,EAE6D;AACnE,SAAOD,eAAe,CAAkB7B,KAAlB,EAAyBmB,IAAzB,EAA+BO,IAA/B,EAAqCI,GAArC,CAAtB;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMqB,kBAAkB,GAAGhE,cAAc,CAC/C,CACCa,KADD,EAECmB,IAFD,EAGCO,IAHD,EAICI,GAJD,KAK+B;AAC9B,QAAMsB,MAAM,GAAGvB,eAAe,CAC7B7B,KAD6B,EAE7BmB,IAF6B,EAG7BO,IAH6B,EAI7BI,GAJ6B,CAA9B;AAMA,SACCsB,MAAM,IACNC,MAAM,CAACC,IAAP,CAAaF,MAAb,EAAsBG,MAAtB,CAA8B,CAAEC,WAAF,EAAeC,IAAf,KAAyB;AACtD,QACC7D,cAAc,CAAE+B,eAAe,CAAE3B,KAAF,EAASmB,IAAT,EAAeO,IAAf,CAAjB,EAAwC+B,IAAxC,CADf,EAEE;AAAA;;AACD;AACA;AACA;AACAD,MAAAA,WAAW,CAAEC,IAAF,CAAX,uCAAsBL,MAAM,CAAEK,IAAF,CAA5B,iDAAsB,aAAgBC,GAAtC,+DAA6CN,MAAM,CAAEK,IAAF,CAAnD;AACA,KAPD,MAOO;AACND,MAAAA,WAAW,CAAEC,IAAF,CAAX,GAAsBL,MAAM,CAAEK,IAAF,CAA5B;AACA;;AACD,WAAOD,WAAP;AACA,GAZD,EAYG,EAZH,CAFD;AAgBA,CA7B8C,EA8B/C,CACCxD,KADD,EAECmB,IAFD,EAGCO,IAHD,EAICuB,QAJD,EAKC7C,KALD,KAMK;AAAA;;AACJ,QAAM+B,OAAO,sBAAG/B,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAE+B,OAAV,6DAAqB,SAAlC;AACA,SAAO,CACNnC,KAAK,CAACqB,QAAN,CAAeC,MADT,6BAENtB,KAAK,CAACqB,QAAN,CAAeW,OAFT,uFAEN,wBAA0Bb,IAA1B,CAFM,uFAEN,wBAAoCO,IAApC,CAFM,uFAEN,wBAA4CO,WAFtC,uFAEN,wBAAyDI,KAAzD,CACCF,OADD,CAFM,4DAEN,wBAEKc,QAFL,CAFM,6BAKNjD,KAAK,CAACqB,QAAN,CAAeW,OALT,uFAKN,wBAA0Bb,IAA1B,CALM,uFAKN,wBAAoCO,IAApC,CALM,uFAKN,wBAA4CO,WALtC,uFAKN,wBACGG,cADH,CACmBD,OADnB,CALM,4DAKN,wBACgCc,QADhC,CALM,CAAP;AAQA,CA9C8C,CAAzC;AAiDP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASU,gBAAT,CACN3D,KADM,EAENmB,IAFM,EAGNO,IAHM,EAINtB,KAJM,EAKI;AACV,SAAOwD,KAAK,CAACC,OAAN,CAAeC,gBAAgB,CAAE9D,KAAF,EAASmB,IAAT,EAAeO,IAAf,EAAqBtB,KAArB,CAA/B,CAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM0D,gBAAgB,GAAK,CAKjC9D,KALiC,EAMjCmB,IANiC,EAOjCO,IAPiC,EAQjCtB,KARiC,KASN;AAAA;;AAC3B;AACA;AACA,QAAM2B,YAAY,8BACjB/B,KAAK,CAACqB,QAAN,CAAeW,OADE,uFACjB,wBAA0Bb,IAA1B,CADiB,uFACjB,wBAAoCO,IAApC,CADiB,4DACjB,wBAA4CO,WAD7C;;AAEA,MAAK,CAAEF,YAAP,EAAsB;AACrB,WAAO,IAAP;AACA;;AACD,SAAOtC,eAAe,CAAEsC,YAAF,EAAgB3B,KAAhB,CAAtB;AACA,CAlBM;;AA0BP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM2D,mCAAmC,GAAG5E,cAAc,CAC9Da,KAAF,IAAgD;AAC/C,QAAM;AACLqB,IAAAA,QAAQ,EAAE;AAAEW,MAAAA;AAAF;AADL,MAEFhC,KAFJ;AAGA,QAAMgE,YAAiC,GAAG,EAA1C;AACAX,EAAAA,MAAM,CAACC,IAAP,CAAatB,OAAb,EAAuBe,OAAvB,CAAkC5B,IAAF,IAAY;AAC3CkC,IAAAA,MAAM,CAACC,IAAP,CAAatB,OAAO,CAAEb,IAAF,CAApB,EAA+B4B,OAA/B,CAA0CrB,IAAF,IAAY;AACnD,YAAMuC,WAAW,GAChBZ,MAAM,CAACC,IAAP,CAAatB,OAAO,CAAEb,IAAF,CAAP,CAAiBO,IAAjB,EAAwBwC,KAArC,CADmB,CAEjB3C,MAFiB,CAGjB4C,UAAF,IACC;AACA;AACAtC,MAAAA,eAAe,CAAE7B,KAAF,EAASmB,IAAT,EAAeO,IAAf,EAAqByC,UAArB,CAAf,IACAC,uBAAuB,CAAEpE,KAAF,EAASmB,IAAT,EAAeO,IAAf,EAAqByC,UAArB,CAPL,CAApB;;AAUA,UAAKF,WAAW,CAACtB,MAAjB,EAA0B;AACzB,cAAM0B,YAAY,GAAG1C,eAAe,CAAE3B,KAAF,EAASmB,IAAT,EAAeO,IAAf,CAApC;AACAuC,QAAAA,WAAW,CAAClB,OAAZ,CAAuBoB,UAAF,IAAkB;AAAA;;AACtC,gBAAMG,YAAY,GAAGC,qBAAqB,CACzCvE,KADyC,EAEzCmB,IAFyC,EAGzCO,IAHyC,EAIzCyC,UAJyC,CAA1C;AAMAH,UAAAA,YAAY,CAACQ,IAAb,CAAmB;AAClB;AACA;AACA1C,YAAAA,GAAG,EAAEwC,YAAY,GACdA,YAAY,CACZD,YAAY,CAACvC,GAAb,IAAoBpC,kBADR,CADE,GAIdwC,SAPe;AAQlBuC,YAAAA,KAAK,EACJ,CAAAJ,YAAY,SAAZ,IAAAA,YAAY,WAAZ,qCAAAA,YAAY,CAAEK,QAAd,qFAAAL,YAAY,EAAcC,YAAd,CAAZ,KAA4C,EAT3B;AAUlB5C,YAAAA,IAVkB;AAWlBP,YAAAA;AAXkB,WAAnB;AAaA,SApBD;AAqBA;AACD,KAnCD;AAoCA,GArCD;AAuCA,SAAO6C,YAAP;AACA,CA9C+D,EA+C9DhE,KAAF,IAAa,CAAEA,KAAK,CAACqB,QAAN,CAAeW,OAAjB,CA/CmD,CAA1D;AAkDP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAM2C,mCAAmC,GAAGxF,cAAc,CAC9Da,KAAF,IAAgD;AAC/C,QAAM;AACLqB,IAAAA,QAAQ,EAAE;AAAEW,MAAAA;AAAF;AADL,MAEFhC,KAFJ;AAGA,QAAM4E,iBAAsC,GAAG,EAA/C;AACAvB,EAAAA,MAAM,CAACC,IAAP,CAAatB,OAAb,EAAuBe,OAAvB,CAAkC5B,IAAF,IAAY;AAC3CkC,IAAAA,MAAM,CAACC,IAAP,CAAatB,OAAO,CAAEb,IAAF,CAApB,EAA+B4B,OAA/B,CAA0CrB,IAAF,IAAY;AACnD,YAAMuC,WAAW,GAChBZ,MAAM,CAACC,IAAP,CAAatB,OAAO,CAAEb,IAAF,CAAP,CAAiBO,IAAjB,EAAwBmD,MAArC,CADmB,CAEjBtD,MAFiB,CAEP4C,UAAF,IACVW,oBAAoB,CAAE9E,KAAF,EAASmB,IAAT,EAAeO,IAAf,EAAqByC,UAArB,CAHD,CAApB;;AAMA,UAAKF,WAAW,CAACtB,MAAjB,EAA0B;AACzB,cAAM0B,YAAY,GAAG1C,eAAe,CAAE3B,KAAF,EAASmB,IAAT,EAAeO,IAAf,CAApC;AACAuC,QAAAA,WAAW,CAAClB,OAAZ,CAAuBoB,UAAF,IAAkB;AAAA;;AACtC,gBAAMG,YAAY,GAAGC,qBAAqB,CACzCvE,KADyC,EAEzCmB,IAFyC,EAGzCO,IAHyC,EAIzCyC,UAJyC,CAA1C;AAMAS,UAAAA,iBAAiB,CAACJ,IAAlB,CAAwB;AACvB;AACA;AACA1C,YAAAA,GAAG,EAAEwC,YAAY,GACdA,YAAY,CACZD,YAAY,CAACvC,GAAb,IAAoBpC,kBADR,CADE,GAIdwC,SAPoB;AAQvBuC,YAAAA,KAAK,EACJ,CAAAJ,YAAY,SAAZ,IAAAA,YAAY,WAAZ,sCAAAA,YAAY,CAAEK,QAAd,uFAAAL,YAAY,EAAcC,YAAd,CAAZ,KAA4C,EATtB;AAUvB5C,YAAAA,IAVuB;AAWvBP,YAAAA;AAXuB,WAAxB;AAaA,SApBD;AAqBA;AACD,KA/BD;AAgCA,GAjCD;AAkCA,SAAOyD,iBAAP;AACA,CAzC+D,EA0C9D5E,KAAF,IAAa,CAAEA,KAAK,CAACqB,QAAN,CAAeW,OAAjB,CA1CmD,CAA1D;AA6CP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS+C,oBAAT,CACN/E,KADM,EAENmB,IAFM,EAGNO,IAHM,EAINuB,QAJM,EAKY;AAAA;;AAClB,oCAAOjD,KAAK,CAACqB,QAAN,CAAeW,OAAtB,uFAAO,wBAA0Bb,IAA1B,CAAP,uFAAO,wBAAoCO,IAApC,CAAP,uFAAO,wBAA4CwC,KAAnD,4DAAO,wBACNjB,QADM,CAAP;AAGA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAM+B,gCAAgC,GAAG7F,cAAc,CAC7D,CACCa,KADD,EAECmB,IAFD,EAGCO,IAHD,EAICuB,QAJD,KAKsB;AACrB,QAAM;AAAEgC,IAAAA;AAAF,MAAqBtD,eAAe,CAAE3B,KAAF,EAASmB,IAAT,EAAeO,IAAf,CAAf,IAAwC,EAAnE;AACA,QAAMwC,KAAK,GAAGa,oBAAoB,CAAE/E,KAAF,EAASmB,IAAT,EAAeO,IAAf,EAAqBuB,QAArB,CAApB,IAAuD,EAArE;;AACA,MAAK,CAAEgC,cAAP,EAAwB;AACvB,WAAOf,KAAP;AACA;;AACD,SAAOb,MAAM,CAACC,IAAP,CAAaY,KAAb,EAAqBX,MAArB,CAA6B,CAAE2B,GAAF,EAAOpD,GAAP,KAAgB;AACnD,QAAK,CAAEmD,cAAc,CAAEnD,GAAF,CAArB,EAA+B;AAC9BoD,MAAAA,GAAG,CAAEpD,GAAF,CAAH,GAAaoC,KAAK,CAAEpC,GAAF,CAAlB;AACA;;AACD,WAAOoD,GAAP;AACA,GALM,EAKJ,EALI,CAAP;AAMA,CAlB4D,EAmB7D,CAAElF,KAAF,EAAgBmB,IAAhB,EAA8BO,IAA9B,EAA4CuB,QAA5C;AAAA;;AAAA,SAA2E,CAC1EjD,KAAK,CAACqB,QAAN,CAAeC,MAD2D,6BAE1EtB,KAAK,CAACqB,QAAN,CAAeW,OAF2D,uFAE1E,wBAA0Bb,IAA1B,CAF0E,uFAE1E,wBAAoCO,IAApC,CAF0E,uFAE1E,wBAA4CwC,KAF8B,4DAE1E,wBAAqDjB,QAArD,CAF0E,CAA3E;AAAA,CAnB6D,CAAvD;AAyBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASmB,uBAAT,CACNpE,KADM,EAENmB,IAFM,EAGNO,IAHM,EAINuB,QAJM,EAKI;AACV,SACC6B,oBAAoB,CAAE9E,KAAF,EAASmB,IAAT,EAAeO,IAAf,EAAqBuB,QAArB,CAApB,IACAI,MAAM,CAACC,IAAP,CACC0B,gCAAgC,CAAEhF,KAAF,EAASmB,IAAT,EAAeO,IAAf,EAAqBuB,QAArB,CADjC,EAEEN,MAFF,GAEW,CAJZ;AAMA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAM4B,qBAAqB,GAAGpF,cAAc,CAClD,CACCa,KADD,EAECmB,IAFD,EAGCO,IAHD,EAICuB,QAJD,MAKiD,EAChD,GAAGE,kBAAkB,CAAEnD,KAAF,EAASmB,IAAT,EAAeO,IAAf,EAAqBuB,QAArB,CAD2B;AAEhD,KAAG8B,oBAAoB,CAAE/E,KAAF,EAASmB,IAAT,EAAeO,IAAf,EAAqBuB,QAArB;AAFyB,CALjD,CADkD,EAUlD,CACCjD,KADD,EAECmB,IAFD,EAGCO,IAHD,EAICuB,QAJD,EAKC7C,KALD,KAMK;AAAA;;AACJ,QAAM+B,OAAO,sBAAG/B,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAE+B,OAAV,6DAAqB,SAAlC;AACA,SAAO,CACNnC,KAAK,CAACqB,QAAN,CAAeC,MADT,6BAENtB,KAAK,CAACqB,QAAN,CAAeW,OAFT,uFAEN,wBAA0Bb,IAA1B,CAFM,uFAEN,wBAAoCO,IAApC,CAFM,uFAEN,wBAA4CO,WAA5C,CAAwDI,KAAxD,CACCF,OADD,CAFM,4DAEN,wBAEKc,QAFL,CAFM,6BAKNjD,KAAK,CAACqB,QAAN,CAAeW,OALT,uFAKN,wBAA0Bb,IAA1B,CALM,uFAKN,wBAAoCO,IAApC,CALM,uFAKN,wBAA4CO,WAA5C,CACEG,cADF,CACkBD,OADlB,CALM,4DAKN,wBAC+Bc,QAD/B,CALM,6BAONjD,KAAK,CAACqB,QAAN,CAAeW,OAPT,uFAON,wBAA0Bb,IAA1B,CAPM,uFAON,wBAAoCO,IAApC,CAPM,uFAON,wBAA4CwC,KAPtC,4DAON,wBAAqDjB,QAArD,CAPM,CAAP;AASA,CA3BiD,CAA5C;AA8BP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASkC,wBAAT,CACNnF,KADM,EAENmB,IAFM,EAGNO,IAHM,EAINuB,QAJM,EAKI;AAAA;;AACV,QAAM;AAAEmC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,4DACLrF,KAAK,CAACqB,QAAN,CAAeW,OADV,uFACL,wBAA0Bb,IAA1B,CADK,uFACL,wBAAoCO,IAApC,CADK,uFACL,wBAA4CmD,MADvC,4DACL,wBAAsD5B,QAAtD,CADK,6EAC+D,EADrE;AAEA,SAAOqC,OAAO,CAAEF,OAAO,IAAIC,UAAb,CAAd;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASP,oBAAT,CACN9E,KADM,EAENmB,IAFM,EAGNO,IAHM,EAINuB,QAJM,EAKI;AAAA;;AACV,+DACCjD,KAAK,CAACqB,QAAN,CAAeW,OADhB,uFACC,wBAA0Bb,IAA1B,CADD,uFACC,wBAAoCO,IAApC,CADD,uFACC,wBAA4CmD,MAD7C,uFACC,wBACC5B,QADD,CADD,4DACC,wBAEGmC,OAHJ,6EAGe,KAHf;AAKA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,sBAAT,CACNvF,KADM,EAENmB,IAFM,EAGNO,IAHM,EAINuB,QAJM,EAKI;AAAA;;AACV,+DACCjD,KAAK,CAACqB,QAAN,CAAeW,OADhB,uFACC,wBAA0Bb,IAA1B,CADD,uFACC,wBAAoCO,IAApC,CADD,uFACC,wBAA4C8D,QAD7C,uFACC,wBACCvC,QADD,CADD,4DACC,wBAEGmC,OAHJ,6EAGe,KAHf;AAKA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,sBAAT,CACNzF,KADM,EAENmB,IAFM,EAGNO,IAHM,EAINuB,QAJM,EAKA;AAAA;;AACN,oCAAOjD,KAAK,CAACqB,QAAN,CAAeW,OAAtB,uFAAO,wBAA0Bb,IAA1B,CAAP,uFAAO,wBAAoCO,IAApC,CAAP,uFAAO,wBAA4CmD,MAAnD,uFAAO,wBAAsD5B,QAAtD,CAAP,4DAAO,wBACJyC,KADH;AAEA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,wBAAT,CACN3F,KADM,EAENmB,IAFM,EAGNO,IAHM,EAINuB,QAJM,EAKA;AAAA;;AACN,oCAAOjD,KAAK,CAACqB,QAAN,CAAeW,OAAtB,uFAAO,wBAA0Bb,IAA1B,CAAP,uFAAO,wBAAoCO,IAApC,CAAP,uFAAO,wBAA4C8D,QAAnD,uFAAO,wBAAwDvC,QAAxD,CAAP,4DAAO,wBACJyC,KADH;AAEA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASE,oBAAT,CAA+B5F,KAA/B,EAAsD;AACrD,SAAOA,KAAK,CAAC6F,IAAN,CAAWC,MAAlB;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASC,WAAT,CAAsB/F,KAAtB,EAAsD;AAC5D,SAAOA,KAAK,CAAC6F,IAAN,CAAY7F,KAAK,CAAC6F,IAAN,CAAWlD,MAAX,GAAoB,CAApB,GAAwBiD,oBAAoB,CAAE5F,KAAF,CAAxD,CAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASgG,WAAT,CAAsBhG,KAAtB,EAAsD;AAC5D,SAAOA,KAAK,CAAC6F,IAAN,CAAY7F,KAAK,CAAC6F,IAAN,CAAWlD,MAAX,GAAoBiD,oBAAoB,CAAE5F,KAAF,CAApD,CAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASiG,OAAT,CAAkBjG,KAAlB,EAA0C;AAChD,SAAOsF,OAAO,CAAES,WAAW,CAAE/F,KAAF,CAAb,CAAd;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASkG,OAAT,CAAkBlG,KAAlB,EAA0C;AAChD,SAAOsF,OAAO,CAAEU,WAAW,CAAEhG,KAAF,CAAb,CAAd;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASmG,eAAT,CAA0BnG,KAA1B,EAA8C;AACpD,SAAO6B,eAAe,CAAE7B,KAAF,EAAS,MAAT,EAAiB,OAAjB,EAA0BA,KAAK,CAACoG,YAAhC,CAAtB;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,sCAAT,CAAiDrG,KAAjD,EAAwE;AAC9E,SAAOA,KAAK,CAACsG,qBAAb;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,gBAAT,CAA2BvG,KAA3B,EAA+C;AAAA;;AACrD,sDAAOmG,eAAe,CAAEnG,KAAF,CAAtB,qDAAO,iBAA0BwG,cAAjC,yEAAmD3G,YAAnD;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS4G,eAAT,CAA0BzG,KAA1B,EAAwCC,GAAxC,EAA2D;AACjE,SAAOD,KAAK,CAAC0G,aAAN,CAAqBzG,GAArB,CAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS0G,sBAAT,CAAiC3G,KAAjC,EAA+CC,GAA/C,EAAsE;AAC5E,QAAM2G,OAAO,GAAG5G,KAAK,CAAC0G,aAAN,CAAqBzG,GAArB,CAAhB;AACA,QAAM4G,eAAe,GAAG,cAAc5G,GAAd,GAAoB,IAApB,GAA2BA,GAA3B,GAAiC,MAAzD;;AACA,MAAK,CAAE2G,OAAP,EAAiB;AAChB,WAAO,KAAP;AACA;;AACD,SAAOA,OAAO,CAACE,IAAR,KAAiBD,eAAxB;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,OAAT,CACN/G,KADM,EAENgH,MAFM,EAGNC,QAHM,EAINjG,EAJM,EAKgB;AACtB,QAAMc,GAAG,GAAG,CAAEkF,MAAF,EAAUC,QAAV,EAAoBjG,EAApB,EAAyBO,MAAzB,CAAiC+D,OAAjC,EAA2C4B,IAA3C,CAAiD,GAAjD,CAAZ;AACA,SAAOlH,KAAK,CAACmH,eAAN,CAAuBrF,GAAvB,CAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASsF,uBAAT,CACNpH,KADM,EAENmB,IAFM,EAGNO,IAHM,EAINuB,QAJM,EAKgB;AACtB,QAAMoB,YAAY,GAAG1C,eAAe,CAAE3B,KAAF,EAASmB,IAAT,EAAeO,IAAf,CAApC;;AACA,MAAK,CAAE2C,YAAP,EAAsB;AACrB,WAAO,KAAP;AACA;;AACD,QAAM4C,QAAQ,GAAG5C,YAAY,CAACgD,oBAA9B;AAEA,SAAON,OAAO,CAAE/G,KAAF,EAAS,QAAT,EAAmBiH,QAAnB,EAA6BhE,QAA7B,CAAd;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASqE,YAAT,CACNtH,KADM,EAENuH,QAFM,EAGNC,MAHM,EAIqB;AAC3B,SAAOxH,KAAK,CAACyH,SAAN,CAAiBD,MAAjB,CAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,WAAT,CACN1H,KADM,EAENuH,QAFM,EAGNC,MAHM,EAING,QAJM,EAKqB;AAC3B,MAAKA,QAAQ,KAAKzF,SAAlB,EAA8B;AAC7B;AACA;;AAED,QAAMuF,SAAS,GAAGzH,KAAK,CAACyH,SAAN,CAAiBD,MAAjB,CAAlB;AAEA,SAAOC,SAAP,aAAOA,SAAP,uBAAOA,SAAS,CAAE7F,IAAX,CACJgG,QAAF,IAAqBA,QAAQ,CAACC,MAAT,KAAoBF,QADnC,CAAP;AAGA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMG,mBAAmB,GAAGzI,sBAAsB,CACtDU,MAAF,IACC,CACCC,KADD,EAECuH,QAFD,EAGCC,MAHD,KAIc;AACb,SAAOzH,MAAM,CAAEP,UAAF,CAAN,CAAqBuI,qBAArB,CAA4C,cAA5C,EAA4D,CAClER,QADkE,EAElEC,MAFkE,CAA5D,CAAP;AAIA,CAXsD,CAAlD;AAcP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMQ,2BAA2B,GAAG7I,cAAc,EACxD;AACEa,KAAF,IAAoB,EAFoC,EAGtDA,KAAF,IAAoB,CACnBA,KAAK,CAAC6F,IAAN,CAAWlD,MADQ,EAEnB3C,KAAK,CAAC6F,IAAN,CAAWC,MAFQ,EAGnB9F,KAAK,CAAC6F,IAAN,CAAWoC,aAHQ,CAHoC,CAAlD;AAUP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,gCAAT,CACNlI,KADM,EAENmI,IAFM,EAG6C;AACnD,QAAMnG,OAAO,GAAG8B,gBAAgB,CAC/B9D,KAD+B,EAE/B,UAF+B,EAG/B,aAH+B,EAI/B;AACC,qBAAiBmI;AADlB,GAJ+B,CAAhC;;AASA,MAAKnG,OAAL,aAAKA,OAAL,eAAKA,OAAO,CAAEW,MAAd,EAAuB;AACtB,WAAO4B,qBAAqB,CAC3BvE,KAD2B,EAE3B,UAF2B,EAG3B,aAH2B,EAI3BgC,OAAO,CAAE,CAAF,CAAP,CAAahB,EAJc,CAA5B;AAMA;;AACD,SAAO,IAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASoH,6CAAT,CACNpI,KADM,EAEA;AACN,QAAMoG,YAAY,GAAGD,eAAe,CAAEnG,KAAF,CAApC;;AACA,MAAK,CAAEoG,YAAP,EAAsB;AACrB,WAAO,IAAP;AACA;;AACD,SAAOpG,KAAK,CAACqI,qBAAN,CAA6BjC,YAAY,CAACkC,UAA1C,CAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,mDAAT,CACNvI,KADM,EAEU;AAChB,QAAMoG,YAAY,GAAGD,eAAe,CAAEnG,KAAF,CAApC;;AACA,MAAK,CAAEoG,YAAP,EAAsB;AACrB,WAAO,IAAP;AACA;;AACD,SAAOpG,KAAK,CAACwI,0BAAN,CAAkCpC,YAAY,CAACkC,UAA/C,CAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,gBAAT,CAA2BzI,KAA3B,EAAwD;AAC9D,SAAOA,KAAK,CAAC0I,aAAb;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,yBAAT,CAAoC3I,KAApC,EAAiE;AACvE,SAAOA,KAAK,CAAC4I,sBAAb;AACA","sourcesContent":["/**\n * External dependencies\n */\nimport createSelector from 'rememo';\nimport { set } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { createRegistrySelector } from '@wordpress/data';\nimport { addQueryArgs } from '@wordpress/url';\nimport deprecated from '@wordpress/deprecated';\n\n/**\n * Internal dependencies\n */\nimport { STORE_NAME } from './name';\nimport { getQueriedItems } from './queried-data';\nimport { DEFAULT_ENTITY_KEY } from './entities';\nimport { getNormalizedCommaSeparable, isRawAttribute } from './utils';\nimport type * as ET from './entity-types';\n\n// This is an incomplete, high-level approximation of the State type.\n// It makes the selectors slightly more safe, but is intended to evolve\n// into a more detailed representation over time.\n// See https://github.com/WordPress/gutenberg/pull/40025#discussion_r865410589 for more context.\nexport interface State {\n\tautosaves: Record< string | number, Array< unknown > >;\n\tblockPatterns: Array< unknown >;\n\tblockPatternCategories: Array< unknown >;\n\tcurrentGlobalStylesId: string;\n\tcurrentTheme: string;\n\tcurrentUser: ET.User< 'edit' >;\n\tembedPreviews: Record< string, { html: string } >;\n\tentities: EntitiesState;\n\tthemeBaseGlobalStyles: Record< string, Object >;\n\tthemeGlobalStyleVariations: Record< string, string >;\n\tundo: UndoState;\n\tuserPermissions: Record< string, boolean >;\n\tusers: UserState;\n}\n\ntype EntityRecordKey = string | number;\n\ninterface EntitiesState {\n\tconfig: EntityConfig[];\n\trecords: Record< string, Record< string, EntityState< ET.EntityRecord > > >;\n}\n\ninterface QueriedData {\n\titems: Record< ET.Context, Record< number, ET.EntityRecord > >;\n\titemIsComplete: Record< ET.Context, Record< number, boolean > >;\n\tqueries: Record< ET.Context, Record< string, Array< number > > >;\n}\n\ninterface EntityState< EntityRecord extends ET.EntityRecord > {\n\tedits: Record< string, Partial< EntityRecord > >;\n\tsaving: Record<\n\t\tstring,\n\t\tPartial< { pending: boolean; isAutosave: boolean; error: Error } >\n\t>;\n\tdeleting: Record< string, Partial< { pending: boolean; error: Error } > >;\n\tqueriedData: QueriedData;\n}\n\ninterface EntityConfig {\n\tname: string;\n\tkind: string;\n}\n\ninterface UndoState extends Array< Object > {\n\tflattenedUndo: unknown;\n\toffset: number;\n}\n\ninterface UserState {\n\tqueries: Record< string, EntityRecordKey[] >;\n\tbyId: Record< EntityRecordKey, ET.User< 'edit' > >;\n}\n\ntype Optional< T > = T | undefined;\n\n/**\n * HTTP Query parameters sent with the API request to fetch the entity records.\n */\ntype GetRecordsHttpQuery = Record< string, any >;\n\n/**\n * Shared reference to an empty object for cases where it is important to avoid\n * returning a new object reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n */\nconst EMPTY_OBJECT = {};\n\n/**\n * Returns true if a request is in progress for embed preview data, or false\n * otherwise.\n *\n * @param state Data state.\n * @param url   URL the preview would be for.\n *\n * @return Whether a request is in progress for an embed preview.\n */\nexport const isRequestingEmbedPreview = createRegistrySelector(\n\t( select: any ) =>\n\t\t( state: State, url: string ): boolean => {\n\t\t\treturn select( STORE_NAME ).isResolving( 'getEmbedPreview', [\n\t\t\t\turl,\n\t\t\t] );\n\t\t}\n);\n\n/**\n * Returns all available authors.\n *\n * @deprecated since 11.3. Callers should use `select( 'core' ).getUsers({ who: 'authors' })` instead.\n *\n * @param      state Data state.\n * @param      query Optional object of query parameters to\n *                   include with request.\n * @return Authors list.\n */\nexport function getAuthors(\n\tstate: State,\n\tquery?: GetRecordsHttpQuery\n): ET.User[] {\n\tdeprecated( \"select( 'core' ).getAuthors()\", {\n\t\tsince: '5.9',\n\t\talternative: \"select( 'core' ).getUsers({ who: 'authors' })\",\n\t} );\n\n\tconst path = addQueryArgs(\n\t\t'/wp/v2/users/?who=authors&per_page=100',\n\t\tquery\n\t);\n\treturn getUserQueryResults( state, path );\n}\n\n/**\n * Returns the current user.\n *\n * @param state Data state.\n *\n * @return Current user object.\n */\nexport function getCurrentUser( state: State ): ET.User< 'edit' > {\n\treturn state.currentUser;\n}\n\n/**\n * Returns all the users returned by a query ID.\n *\n * @param state   Data state.\n * @param queryID Query ID.\n *\n * @return Users list.\n */\nexport const getUserQueryResults = createSelector(\n\t( state: State, queryID: string ): ET.User< 'edit' >[] => {\n\t\tconst queryResults = state.users.queries[ queryID ] ?? [];\n\n\t\treturn queryResults.map( ( id ) => state.users.byId[ id ] );\n\t},\n\t( state: State, queryID: string ) => [\n\t\tstate.users.queries[ queryID ],\n\t\tstate.users.byId,\n\t]\n);\n\n/**\n * Returns the loaded entities for the given kind.\n *\n * @deprecated since WordPress 6.0. Use getEntitiesConfig instead\n * @param      state Data state.\n * @param      kind  Entity kind.\n *\n * @return Array of entities with config matching kind.\n */\nexport function getEntitiesByKind( state: State, kind: string ): Array< any > {\n\tdeprecated( \"wp.data.select( 'core' ).getEntitiesByKind()\", {\n\t\tsince: '6.0',\n\t\talternative: \"wp.data.select( 'core' ).getEntitiesConfig()\",\n\t} );\n\treturn getEntitiesConfig( state, kind );\n}\n\n/**\n * Returns the loaded entities for the given kind.\n *\n * @param state Data state.\n * @param kind  Entity kind.\n *\n * @return Array of entities with config matching kind.\n */\nexport function getEntitiesConfig( state: State, kind: string ): Array< any > {\n\treturn state.entities.config.filter( ( entity ) => entity.kind === kind );\n}\n\n/**\n * Returns the entity config given its kind and name.\n *\n * @deprecated since WordPress 6.0. Use getEntityConfig instead\n * @param      state Data state.\n * @param      kind  Entity kind.\n * @param      name  Entity name.\n *\n * @return Entity config\n */\nexport function getEntity( state: State, kind: string, name: string ): any {\n\tdeprecated( \"wp.data.select( 'core' ).getEntity()\", {\n\t\tsince: '6.0',\n\t\talternative: \"wp.data.select( 'core' ).getEntityConfig()\",\n\t} );\n\treturn getEntityConfig( state, kind, name );\n}\n\n/**\n * Returns the entity config given its kind and name.\n *\n * @param state Data state.\n * @param kind  Entity kind.\n * @param name  Entity name.\n *\n * @return Entity config\n */\nexport function getEntityConfig(\n\tstate: State,\n\tkind: string,\n\tname: string\n): any {\n\treturn state.entities.config?.find(\n\t\t( config ) => config.kind === kind && config.name === name\n\t);\n}\n\n/**\n * GetEntityRecord is declared as a *callable interface* with\n * two signatures to work around the fact that TypeScript doesn't\n * allow currying generic functions:\n *\n * ```ts\n * \t\ttype CurriedState = F extends ( state: any, ...args: infer P ) => infer R\n * \t\t\t? ( ...args: P ) => R\n * \t\t\t: F;\n * \t\ttype Selector = <K extends string | number>(\n *         state: any,\n *         kind: K,\n *         key: K extends string ? 'string value' : false\n *    ) => K;\n * \t\ttype BadlyInferredSignature = CurriedState< Selector >\n *    // BadlyInferredSignature evaluates to:\n *    // (kind: string number, key: false | \"string value\") => string number\n * ```\n *\n * The signature without the state parameter shipped as CurriedSignature\n * is used in the return value of `select( coreStore )`.\n *\n * See https://github.com/WordPress/gutenberg/pull/41578 for more details.\n */\nexport interface GetEntityRecord {\n\t<\n\t\tEntityRecord extends\n\t\t\t| ET.EntityRecord< any >\n\t\t\t| Partial< ET.EntityRecord< any > >\n\t>(\n\t\tstate: State,\n\t\tkind: string,\n\t\tname: string,\n\t\tkey: EntityRecordKey,\n\t\tquery?: GetRecordsHttpQuery\n\t): EntityRecord | undefined;\n\n\tCurriedSignature: <\n\t\tEntityRecord extends\n\t\t\t| ET.EntityRecord< any >\n\t\t\t| Partial< ET.EntityRecord< any > >\n\t>(\n\t\tkind: string,\n\t\tname: string,\n\t\tkey: EntityRecordKey,\n\t\tquery?: GetRecordsHttpQuery\n\t) => EntityRecord | undefined;\n}\n\n/**\n * Returns the Entity's record object by key. Returns `null` if the value is not\n * yet received, undefined if the value entity is known to not exist, or the\n * entity object if it exists and is received.\n *\n * @param state State tree\n * @param kind  Entity kind.\n * @param name  Entity name.\n * @param key   Record's key\n * @param query Optional query. If requesting specific\n *              fields, fields must always include the ID.\n *\n * @return Record.\n */\nexport const getEntityRecord = createSelector(\n\t( <\n\t\tEntityRecord extends\n\t\t\t| ET.EntityRecord< any >\n\t\t\t| Partial< ET.EntityRecord< any > >\n\t>(\n\t\tstate: State,\n\t\tkind: string,\n\t\tname: string,\n\t\tkey: EntityRecordKey,\n\t\tquery?: GetRecordsHttpQuery\n\t): EntityRecord | undefined => {\n\t\tconst queriedState =\n\t\t\tstate.entities.records?.[ kind ]?.[ name ]?.queriedData;\n\t\tif ( ! queriedState ) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst context = query?.context ?? 'default';\n\n\t\tif ( query === undefined ) {\n\t\t\t// If expecting a complete item, validate that completeness.\n\t\t\tif ( ! queriedState.itemIsComplete[ context ]?.[ key ] ) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\treturn queriedState.items[ context ][ key ];\n\t\t}\n\n\t\tconst item = queriedState.items[ context ]?.[ key ];\n\t\tif ( item && query._fields ) {\n\t\t\tconst filteredItem = {};\n\t\t\tconst fields = getNormalizedCommaSeparable( query._fields ) ?? [];\n\t\t\tfor ( let f = 0; f < fields.length; f++ ) {\n\t\t\t\tconst field = fields[ f ].split( '.' );\n\t\t\t\tlet value = item;\n\t\t\t\tfield.forEach( ( fieldName ) => {\n\t\t\t\t\tvalue = value[ fieldName ];\n\t\t\t\t} );\n\t\t\t\tset( filteredItem, field, value );\n\t\t\t}\n\t\t\treturn filteredItem as EntityRecord;\n\t\t}\n\n\t\treturn item;\n\t} ) as GetEntityRecord,\n\t( state: State, kind, name, recordId, query ) => {\n\t\tconst context = query?.context ?? 'default';\n\t\treturn [\n\t\t\tstate.entities.records?.[ kind ]?.[ name ]?.queriedData?.items[\n\t\t\t\tcontext\n\t\t\t]?.[ recordId ],\n\t\t\tstate.entities.records?.[ kind ]?.[ name ]?.queriedData\n\t\t\t\t?.itemIsComplete[ context ]?.[ recordId ],\n\t\t];\n\t}\n) as GetEntityRecord;\n\n/**\n * Returns the Entity's record object by key. Doesn't trigger a resolver nor requests the entity records from the API if the entity record isn't available in the local state.\n *\n * @param state State tree\n * @param kind  Entity kind.\n * @param name  Entity name.\n * @param key   Record's key\n *\n * @return Record.\n */\nexport function __experimentalGetEntityRecordNoResolver<\n\tEntityRecord extends ET.EntityRecord< any >\n>( state: State, kind: string, name: string, key: EntityRecordKey ) {\n\treturn getEntityRecord< EntityRecord >( state, kind, name, key );\n}\n\n/**\n * Returns the entity's record object by key,\n * with its attributes mapped to their raw values.\n *\n * @param state State tree.\n * @param kind  Entity kind.\n * @param name  Entity name.\n * @param key   Record's key.\n *\n * @return Object with the entity's raw attributes.\n */\nexport const getRawEntityRecord = createSelector(\n\t< EntityRecord extends ET.EntityRecord< any > >(\n\t\tstate: State,\n\t\tkind: string,\n\t\tname: string,\n\t\tkey: EntityRecordKey\n\t): EntityRecord | undefined => {\n\t\tconst record = getEntityRecord< EntityRecord >(\n\t\t\tstate,\n\t\t\tkind,\n\t\t\tname,\n\t\t\tkey\n\t\t);\n\t\treturn (\n\t\t\trecord &&\n\t\t\tObject.keys( record ).reduce( ( accumulator, _key ) => {\n\t\t\t\tif (\n\t\t\t\t\tisRawAttribute( getEntityConfig( state, kind, name ), _key )\n\t\t\t\t) {\n\t\t\t\t\t// Because edits are the \"raw\" attribute values,\n\t\t\t\t\t// we return those from record selectors to make rendering,\n\t\t\t\t\t// comparisons, and joins with edits easier.\n\t\t\t\t\taccumulator[ _key ] = record[ _key ]?.raw ?? record[ _key ];\n\t\t\t\t} else {\n\t\t\t\t\taccumulator[ _key ] = record[ _key ];\n\t\t\t\t}\n\t\t\t\treturn accumulator;\n\t\t\t}, {} as any )\n\t\t);\n\t},\n\t(\n\t\tstate: State,\n\t\tkind: string,\n\t\tname: string,\n\t\trecordId: EntityRecordKey,\n\t\tquery?: GetRecordsHttpQuery\n\t) => {\n\t\tconst context = query?.context ?? 'default';\n\t\treturn [\n\t\t\tstate.entities.config,\n\t\t\tstate.entities.records?.[ kind ]?.[ name ]?.queriedData?.items[\n\t\t\t\tcontext\n\t\t\t]?.[ recordId ],\n\t\t\tstate.entities.records?.[ kind ]?.[ name ]?.queriedData\n\t\t\t\t?.itemIsComplete[ context ]?.[ recordId ],\n\t\t];\n\t}\n);\n\n/**\n * Returns true if records have been received for the given set of parameters,\n * or false otherwise.\n *\n * @param state State tree\n * @param kind  Entity kind.\n * @param name  Entity name.\n * @param query Optional terms query.\n *\n * @return  Whether entity records have been received.\n */\nexport function hasEntityRecords(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\tquery?: GetRecordsHttpQuery\n): boolean {\n\treturn Array.isArray( getEntityRecords( state, kind, name, query ) );\n}\n\n/**\n * GetEntityRecord is declared as a *callable interface* with\n * two signatures to work around the fact that TypeScript doesn't\n * allow currying generic functions.\n *\n * @see GetEntityRecord\n * @see https://github.com/WordPress/gutenberg/pull/41578\n */\nexport interface GetEntityRecords {\n\t<\n\t\tEntityRecord extends\n\t\t\t| ET.EntityRecord< any >\n\t\t\t| Partial< ET.EntityRecord< any > >\n\t>(\n\t\tstate: State,\n\t\tkind: string,\n\t\tname: string,\n\t\tquery?: GetRecordsHttpQuery\n\t): EntityRecord[] | null;\n\n\tCurriedSignature: <\n\t\tEntityRecord extends\n\t\t\t| ET.EntityRecord< any >\n\t\t\t| Partial< ET.EntityRecord< any > >\n\t>(\n\t\tkind: string,\n\t\tname: string,\n\t\tquery?: GetRecordsHttpQuery\n\t) => EntityRecord[] | null;\n}\n\n/**\n * Returns the Entity's records.\n *\n * @param state State tree\n * @param kind  Entity kind.\n * @param name  Entity name.\n * @param query Optional terms query. If requesting specific\n *              fields, fields must always include the ID.\n *\n * @return Records.\n */\nexport const getEntityRecords = ( <\n\tEntityRecord extends\n\t\t| ET.EntityRecord< any >\n\t\t| Partial< ET.EntityRecord< any > >\n>(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\tquery: GetRecordsHttpQuery\n): EntityRecord[] | null => {\n\t// Queried data state is prepopulated for all known entities. If this is not\n\t// assigned for the given parameters, then it is known to not exist.\n\tconst queriedState =\n\t\tstate.entities.records?.[ kind ]?.[ name ]?.queriedData;\n\tif ( ! queriedState ) {\n\t\treturn null;\n\t}\n\treturn getQueriedItems( queriedState, query );\n} ) as GetEntityRecords;\n\ntype DirtyEntityRecord = {\n\ttitle: string;\n\tkey: EntityRecordKey;\n\tname: string;\n\tkind: string;\n};\n/**\n * Returns the list of dirty entity records.\n *\n * @param state State tree.\n *\n * @return The list of updated records\n */\nexport const __experimentalGetDirtyEntityRecords = createSelector(\n\t( state: State ): Array< DirtyEntityRecord > => {\n\t\tconst {\n\t\t\tentities: { records },\n\t\t} = state;\n\t\tconst dirtyRecords: DirtyEntityRecord[] = [];\n\t\tObject.keys( records ).forEach( ( kind ) => {\n\t\t\tObject.keys( records[ kind ] ).forEach( ( name ) => {\n\t\t\t\tconst primaryKeys = (\n\t\t\t\t\tObject.keys( records[ kind ][ name ].edits ) as string[]\n\t\t\t\t ).filter(\n\t\t\t\t\t( primaryKey ) =>\n\t\t\t\t\t\t// The entity record must exist (not be deleted),\n\t\t\t\t\t\t// and it must have edits.\n\t\t\t\t\t\tgetEntityRecord( state, kind, name, primaryKey ) &&\n\t\t\t\t\t\thasEditsForEntityRecord( state, kind, name, primaryKey )\n\t\t\t\t);\n\n\t\t\t\tif ( primaryKeys.length ) {\n\t\t\t\t\tconst entityConfig = getEntityConfig( state, kind, name );\n\t\t\t\t\tprimaryKeys.forEach( ( primaryKey ) => {\n\t\t\t\t\t\tconst entityRecord = getEditedEntityRecord(\n\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tprimaryKey\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdirtyRecords.push( {\n\t\t\t\t\t\t\t// We avoid using primaryKey because it's transformed into a string\n\t\t\t\t\t\t\t// when it's used as an object key.\n\t\t\t\t\t\t\tkey: entityRecord\n\t\t\t\t\t\t\t\t? entityRecord[\n\t\t\t\t\t\t\t\t\t\tentityConfig.key || DEFAULT_ENTITY_KEY\n\t\t\t\t\t\t\t\t  ]\n\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\ttitle:\n\t\t\t\t\t\t\t\tentityConfig?.getTitle?.( entityRecord ) || '',\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t} );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\n\t\treturn dirtyRecords;\n\t},\n\t( state ) => [ state.entities.records ]\n);\n\n/**\n * Returns the list of entities currently being saved.\n *\n * @param state State tree.\n *\n * @return The list of records being saved.\n */\nexport const __experimentalGetEntitiesBeingSaved = createSelector(\n\t( state: State ): Array< DirtyEntityRecord > => {\n\t\tconst {\n\t\t\tentities: { records },\n\t\t} = state;\n\t\tconst recordsBeingSaved: DirtyEntityRecord[] = [];\n\t\tObject.keys( records ).forEach( ( kind ) => {\n\t\t\tObject.keys( records[ kind ] ).forEach( ( name ) => {\n\t\t\t\tconst primaryKeys = (\n\t\t\t\t\tObject.keys( records[ kind ][ name ].saving ) as string[]\n\t\t\t\t ).filter( ( primaryKey ) =>\n\t\t\t\t\tisSavingEntityRecord( state, kind, name, primaryKey )\n\t\t\t\t);\n\n\t\t\t\tif ( primaryKeys.length ) {\n\t\t\t\t\tconst entityConfig = getEntityConfig( state, kind, name );\n\t\t\t\t\tprimaryKeys.forEach( ( primaryKey ) => {\n\t\t\t\t\t\tconst entityRecord = getEditedEntityRecord(\n\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tprimaryKey\n\t\t\t\t\t\t);\n\t\t\t\t\t\trecordsBeingSaved.push( {\n\t\t\t\t\t\t\t// We avoid using primaryKey because it's transformed into a string\n\t\t\t\t\t\t\t// when it's used as an object key.\n\t\t\t\t\t\t\tkey: entityRecord\n\t\t\t\t\t\t\t\t? entityRecord[\n\t\t\t\t\t\t\t\t\t\tentityConfig.key || DEFAULT_ENTITY_KEY\n\t\t\t\t\t\t\t\t  ]\n\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\ttitle:\n\t\t\t\t\t\t\t\tentityConfig?.getTitle?.( entityRecord ) || '',\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t} );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t\treturn recordsBeingSaved;\n\t},\n\t( state ) => [ state.entities.records ]\n);\n\n/**\n * Returns the specified entity record's edits.\n *\n * @param state    State tree.\n * @param kind     Entity kind.\n * @param name     Entity name.\n * @param recordId Record ID.\n *\n * @return The entity record's edits.\n */\nexport function getEntityRecordEdits(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\trecordId: EntityRecordKey\n): Optional< any > {\n\treturn state.entities.records?.[ kind ]?.[ name ]?.edits?.[\n\t\trecordId as string | number\n\t];\n}\n\n/**\n * Returns the specified entity record's non transient edits.\n *\n * Transient edits don't create an undo level, and\n * are not considered for change detection.\n * They are defined in the entity's config.\n *\n * @param state    State tree.\n * @param kind     Entity kind.\n * @param name     Entity name.\n * @param recordId Record ID.\n *\n * @return The entity record's non transient edits.\n */\nexport const getEntityRecordNonTransientEdits = createSelector(\n\t(\n\t\tstate: State,\n\t\tkind: string,\n\t\tname: string,\n\t\trecordId: EntityRecordKey\n\t): Optional< any > => {\n\t\tconst { transientEdits } = getEntityConfig( state, kind, name ) || {};\n\t\tconst edits = getEntityRecordEdits( state, kind, name, recordId ) || {};\n\t\tif ( ! transientEdits ) {\n\t\t\treturn edits;\n\t\t}\n\t\treturn Object.keys( edits ).reduce( ( acc, key ) => {\n\t\t\tif ( ! transientEdits[ key ] ) {\n\t\t\t\tacc[ key ] = edits[ key ];\n\t\t\t}\n\t\t\treturn acc;\n\t\t}, {} );\n\t},\n\t( state: State, kind: string, name: string, recordId: EntityRecordKey ) => [\n\t\tstate.entities.config,\n\t\tstate.entities.records?.[ kind ]?.[ name ]?.edits?.[ recordId ],\n\t]\n);\n\n/**\n * Returns true if the specified entity record has edits,\n * and false otherwise.\n *\n * @param state    State tree.\n * @param kind     Entity kind.\n * @param name     Entity name.\n * @param recordId Record ID.\n *\n * @return Whether the entity record has edits or not.\n */\nexport function hasEditsForEntityRecord(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\trecordId: EntityRecordKey\n): boolean {\n\treturn (\n\t\tisSavingEntityRecord( state, kind, name, recordId ) ||\n\t\tObject.keys(\n\t\t\tgetEntityRecordNonTransientEdits( state, kind, name, recordId )\n\t\t).length > 0\n\t);\n}\n\n/**\n * Returns the specified entity record, merged with its edits.\n *\n * @param state    State tree.\n * @param kind     Entity kind.\n * @param name     Entity name.\n * @param recordId Record ID.\n *\n * @return The entity record, merged with its edits.\n */\nexport const getEditedEntityRecord = createSelector(\n\t< EntityRecord extends ET.EntityRecord< any > >(\n\t\tstate: State,\n\t\tkind: string,\n\t\tname: string,\n\t\trecordId: EntityRecordKey\n\t): ET.Updatable< EntityRecord > | undefined => ( {\n\t\t...getRawEntityRecord( state, kind, name, recordId ),\n\t\t...getEntityRecordEdits( state, kind, name, recordId ),\n\t} ),\n\t(\n\t\tstate: State,\n\t\tkind: string,\n\t\tname: string,\n\t\trecordId: EntityRecordKey,\n\t\tquery?: GetRecordsHttpQuery\n\t) => {\n\t\tconst context = query?.context ?? 'default';\n\t\treturn [\n\t\t\tstate.entities.config,\n\t\t\tstate.entities.records?.[ kind ]?.[ name ]?.queriedData.items[\n\t\t\t\tcontext\n\t\t\t]?.[ recordId ],\n\t\t\tstate.entities.records?.[ kind ]?.[ name ]?.queriedData\n\t\t\t\t.itemIsComplete[ context ]?.[ recordId ],\n\t\t\tstate.entities.records?.[ kind ]?.[ name ]?.edits?.[ recordId ],\n\t\t];\n\t}\n);\n\n/**\n * Returns true if the specified entity record is autosaving, and false otherwise.\n *\n * @param state    State tree.\n * @param kind     Entity kind.\n * @param name     Entity name.\n * @param recordId Record ID.\n *\n * @return Whether the entity record is autosaving or not.\n */\nexport function isAutosavingEntityRecord(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\trecordId: EntityRecordKey\n): boolean {\n\tconst { pending, isAutosave } =\n\t\tstate.entities.records?.[ kind ]?.[ name ]?.saving?.[ recordId ] ?? {};\n\treturn Boolean( pending && isAutosave );\n}\n\n/**\n * Returns true if the specified entity record is saving, and false otherwise.\n *\n * @param state    State tree.\n * @param kind     Entity kind.\n * @param name     Entity name.\n * @param recordId Record ID.\n *\n * @return Whether the entity record is saving or not.\n */\nexport function isSavingEntityRecord(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\trecordId: EntityRecordKey\n): boolean {\n\treturn (\n\t\tstate.entities.records?.[ kind ]?.[ name ]?.saving?.[\n\t\t\trecordId as EntityRecordKey\n\t\t]?.pending ?? false\n\t);\n}\n\n/**\n * Returns true if the specified entity record is deleting, and false otherwise.\n *\n * @param state    State tree.\n * @param kind     Entity kind.\n * @param name     Entity name.\n * @param recordId Record ID.\n *\n * @return Whether the entity record is deleting or not.\n */\nexport function isDeletingEntityRecord(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\trecordId: EntityRecordKey\n): boolean {\n\treturn (\n\t\tstate.entities.records?.[ kind ]?.[ name ]?.deleting?.[\n\t\t\trecordId as EntityRecordKey\n\t\t]?.pending ?? false\n\t);\n}\n\n/**\n * Returns the specified entity record's last save error.\n *\n * @param state    State tree.\n * @param kind     Entity kind.\n * @param name     Entity name.\n * @param recordId Record ID.\n *\n * @return The entity record's save error.\n */\nexport function getLastEntitySaveError(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\trecordId: EntityRecordKey\n): any {\n\treturn state.entities.records?.[ kind ]?.[ name ]?.saving?.[ recordId ]\n\t\t?.error;\n}\n\n/**\n * Returns the specified entity record's last delete error.\n *\n * @param state    State tree.\n * @param kind     Entity kind.\n * @param name     Entity name.\n * @param recordId Record ID.\n *\n * @return The entity record's save error.\n */\nexport function getLastEntityDeleteError(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\trecordId: EntityRecordKey\n): any {\n\treturn state.entities.records?.[ kind ]?.[ name ]?.deleting?.[ recordId ]\n\t\t?.error;\n}\n\n/**\n * Returns the current undo offset for the\n * entity records edits history. The offset\n * represents how many items from the end\n * of the history stack we are at. 0 is the\n * last edit, -1 is the second last, and so on.\n *\n * @param state State tree.\n *\n * @return The current undo offset.\n */\nfunction getCurrentUndoOffset( state: State ): number {\n\treturn state.undo.offset;\n}\n\n/**\n * Returns the previous edit from the current undo offset\n * for the entity records edits history, if any.\n *\n * @param state State tree.\n *\n * @return The edit.\n */\nexport function getUndoEdit( state: State ): Optional< any > {\n\treturn state.undo[ state.undo.length - 2 + getCurrentUndoOffset( state ) ];\n}\n\n/**\n * Returns the next edit from the current undo offset\n * for the entity records edits history, if any.\n *\n * @param state State tree.\n *\n * @return The edit.\n */\nexport function getRedoEdit( state: State ): Optional< any > {\n\treturn state.undo[ state.undo.length + getCurrentUndoOffset( state ) ];\n}\n\n/**\n * Returns true if there is a previous edit from the current undo offset\n * for the entity records edits history, and false otherwise.\n *\n * @param state State tree.\n *\n * @return Whether there is a previous edit or not.\n */\nexport function hasUndo( state: State ): boolean {\n\treturn Boolean( getUndoEdit( state ) );\n}\n\n/**\n * Returns true if there is a next edit from the current undo offset\n * for the entity records edits history, and false otherwise.\n *\n * @param state State tree.\n *\n * @return Whether there is a next edit or not.\n */\nexport function hasRedo( state: State ): boolean {\n\treturn Boolean( getRedoEdit( state ) );\n}\n\n/**\n * Return the current theme.\n *\n * @param state Data state.\n *\n * @return The current theme.\n */\nexport function getCurrentTheme( state: State ): any {\n\treturn getEntityRecord( state, 'root', 'theme', state.currentTheme );\n}\n\n/**\n * Return the ID of the current global styles object.\n *\n * @param state Data state.\n *\n * @return The current global styles ID.\n */\nexport function __experimentalGetCurrentGlobalStylesId( state: State ): string {\n\treturn state.currentGlobalStylesId;\n}\n\n/**\n * Return theme supports data in the index.\n *\n * @param state Data state.\n *\n * @return Index data.\n */\nexport function getThemeSupports( state: State ): any {\n\treturn getCurrentTheme( state )?.theme_supports ?? EMPTY_OBJECT;\n}\n\n/**\n * Returns the embed preview for the given URL.\n *\n * @param state Data state.\n * @param url   Embedded URL.\n *\n * @return Undefined if the preview has not been fetched, otherwise, the preview fetched from the embed preview API.\n */\nexport function getEmbedPreview( state: State, url: string ): any {\n\treturn state.embedPreviews[ url ];\n}\n\n/**\n * Determines if the returned preview is an oEmbed link fallback.\n *\n * WordPress can be configured to return a simple link to a URL if it is not embeddable.\n * We need to be able to determine if a URL is embeddable or not, based on what we\n * get back from the oEmbed preview API.\n *\n * @param state Data state.\n * @param url   Embedded URL.\n *\n * @return Is the preview for the URL an oEmbed link fallback.\n */\nexport function isPreviewEmbedFallback( state: State, url: string ): boolean {\n\tconst preview = state.embedPreviews[ url ];\n\tconst oEmbedLinkCheck = '<a href=\"' + url + '\">' + url + '</a>';\n\tif ( ! preview ) {\n\t\treturn false;\n\t}\n\treturn preview.html === oEmbedLinkCheck;\n}\n\n/**\n * Returns whether the current user can perform the given action on the given\n * REST resource.\n *\n * Calling this may trigger an OPTIONS request to the REST API via the\n * `canUser()` resolver.\n *\n * https://developer.wordpress.org/rest-api/reference/\n *\n * @param state    Data state.\n * @param action   Action to check. One of: 'create', 'read', 'update', 'delete'.\n * @param resource REST resource to check, e.g. 'media' or 'posts'.\n * @param id       Optional ID of the rest resource to check.\n *\n * @return Whether or not the user can perform the action,\n *                             or `undefined` if the OPTIONS request is still being made.\n */\nexport function canUser(\n\tstate: State,\n\taction: string,\n\tresource: string,\n\tid?: EntityRecordKey\n): boolean | undefined {\n\tconst key = [ action, resource, id ].filter( Boolean ).join( '/' );\n\treturn state.userPermissions[ key ];\n}\n\n/**\n * Returns whether the current user can edit the given entity.\n *\n * Calling this may trigger an OPTIONS request to the REST API via the\n * `canUser()` resolver.\n *\n * https://developer.wordpress.org/rest-api/reference/\n *\n * @param state    Data state.\n * @param kind     Entity kind.\n * @param name     Entity name.\n * @param recordId Record's id.\n * @return Whether or not the user can edit,\n * or `undefined` if the OPTIONS request is still being made.\n */\nexport function canUserEditEntityRecord(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\trecordId: EntityRecordKey\n): boolean | undefined {\n\tconst entityConfig = getEntityConfig( state, kind, name );\n\tif ( ! entityConfig ) {\n\t\treturn false;\n\t}\n\tconst resource = entityConfig.__unstable_rest_base;\n\n\treturn canUser( state, 'update', resource, recordId );\n}\n\n/**\n * Returns the latest autosaves for the post.\n *\n * May return multiple autosaves since the backend stores one autosave per\n * author for each post.\n *\n * @param state    State tree.\n * @param postType The type of the parent post.\n * @param postId   The id of the parent post.\n *\n * @return An array of autosaves for the post, or undefined if there is none.\n */\nexport function getAutosaves(\n\tstate: State,\n\tpostType: string,\n\tpostId: EntityRecordKey\n): Array< any > | undefined {\n\treturn state.autosaves[ postId ];\n}\n\n/**\n * Returns the autosave for the post and author.\n *\n * @param state    State tree.\n * @param postType The type of the parent post.\n * @param postId   The id of the parent post.\n * @param authorId The id of the author.\n *\n * @return The autosave for the post and author.\n */\nexport function getAutosave< EntityRecord extends ET.EntityRecord< any > >(\n\tstate: State,\n\tpostType: string,\n\tpostId: EntityRecordKey,\n\tauthorId: EntityRecordKey\n): EntityRecord | undefined {\n\tif ( authorId === undefined ) {\n\t\treturn;\n\t}\n\n\tconst autosaves = state.autosaves[ postId ];\n\n\treturn autosaves?.find(\n\t\t( autosave: any ) => autosave.author === authorId\n\t) as EntityRecord | undefined;\n}\n\n/**\n * Returns true if the REST request for autosaves has completed.\n *\n * @param state    State tree.\n * @param postType The type of the parent post.\n * @param postId   The id of the parent post.\n *\n * @return True if the REST request was completed. False otherwise.\n */\nexport const hasFetchedAutosaves = createRegistrySelector(\n\t( select ) =>\n\t\t(\n\t\t\tstate: State,\n\t\t\tpostType: string,\n\t\t\tpostId: EntityRecordKey\n\t\t): boolean => {\n\t\t\treturn select( STORE_NAME ).hasFinishedResolution( 'getAutosaves', [\n\t\t\t\tpostType,\n\t\t\t\tpostId,\n\t\t\t] );\n\t\t}\n);\n\n/**\n * Returns a new reference when edited values have changed. This is useful in\n * inferring where an edit has been made between states by comparison of the\n * return values using strict equality.\n *\n * @example\n *\n * ```\n * const hasEditOccurred = (\n *    getReferenceByDistinctEdits( beforeState ) !==\n *    getReferenceByDistinctEdits( afterState )\n * );\n * ```\n *\n * @param state Editor state.\n *\n * @return A value whose reference will change only when an edit occurs.\n */\nexport const getReferenceByDistinctEdits = createSelector(\n\t// This unused state argument is listed here for the documentation generating tool (docgen).\n\t( state: State ) => [],\n\t( state: State ) => [\n\t\tstate.undo.length,\n\t\tstate.undo.offset,\n\t\tstate.undo.flattenedUndo,\n\t]\n);\n\n/**\n * Retrieve the frontend template used for a given link.\n *\n * @param state Editor state.\n * @param link  Link.\n *\n * @return The template record.\n */\nexport function __experimentalGetTemplateForLink(\n\tstate: State,\n\tlink: string\n): Optional< ET.Updatable< ET.WpTemplate > > | null {\n\tconst records = getEntityRecords< ET.WpTemplate >(\n\t\tstate,\n\t\t'postType',\n\t\t'wp_template',\n\t\t{\n\t\t\t'find-template': link,\n\t\t}\n\t);\n\n\tif ( records?.length ) {\n\t\treturn getEditedEntityRecord< ET.WpTemplate >(\n\t\t\tstate,\n\t\t\t'postType',\n\t\t\t'wp_template',\n\t\t\trecords[ 0 ].id\n\t\t);\n\t}\n\treturn null;\n}\n\n/**\n * Retrieve the current theme's base global styles\n *\n * @param state Editor state.\n *\n * @return The Global Styles object.\n */\nexport function __experimentalGetCurrentThemeBaseGlobalStyles(\n\tstate: State\n): any {\n\tconst currentTheme = getCurrentTheme( state );\n\tif ( ! currentTheme ) {\n\t\treturn null;\n\t}\n\treturn state.themeBaseGlobalStyles[ currentTheme.stylesheet ];\n}\n\n/**\n * Return the ID of the current global styles object.\n *\n * @param state Data state.\n *\n * @return The current global styles ID.\n */\nexport function __experimentalGetCurrentThemeGlobalStylesVariations(\n\tstate: State\n): string | null {\n\tconst currentTheme = getCurrentTheme( state );\n\tif ( ! currentTheme ) {\n\t\treturn null;\n\t}\n\treturn state.themeGlobalStyleVariations[ currentTheme.stylesheet ];\n}\n\n/**\n * Retrieve the list of registered block patterns.\n *\n * @param state Data state.\n *\n * @return Block pattern list.\n */\nexport function getBlockPatterns( state: State ): Array< any > {\n\treturn state.blockPatterns;\n}\n\n/**\n * Retrieve the list of registered block pattern categories.\n *\n * @param state Data state.\n *\n * @return Block pattern category list.\n */\nexport function getBlockPatternCategories( state: State ): Array< any > {\n\treturn state.blockPatternCategories;\n}\n"]}
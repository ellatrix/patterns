{"version":3,"sources":["@wordpress/wordcount/src/index.js"],"names":["loadSettings","type","userSettings","settings","Object","assign","defaultSettings","shortcodes","l10n","length","shortcodesRegExp","RegExp","join","countWords","text","regex","stripTags","bind","stripHTMLComments","stripShortcodes","stripSpaces","stripHTMLEntities","stripConnectors","stripRemovables","reduce","result","fn","match","countCharacters","transposeAstralsToCountableChar","transposeHTMLEntitiesToCountableChars","count","matchRegExp","wordsRegExp","characters_including_spacesRegExp","characters_excluding_spacesRegExp"],"mappings":"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","sourcesContent":["/**\n * Internal dependencies\n */\nimport { defaultSettings } from './defaultSettings';\nimport stripTags from './stripTags';\nimport transposeAstralsToCountableChar from './transposeAstralsToCountableChar';\nimport stripHTMLEntities from './stripHTMLEntities';\nimport stripConnectors from './stripConnectors';\nimport stripRemovables from './stripRemovables';\nimport stripHTMLComments from './stripHTMLComments';\nimport stripShortcodes from './stripShortcodes';\nimport stripSpaces from './stripSpaces';\nimport transposeHTMLEntitiesToCountableChars from './transposeHTMLEntitiesToCountableChars';\n\n/**\n * @typedef {import('./defaultSettings').WPWordCountDefaultSettings}  WPWordCountSettings\n * @typedef {import('./defaultSettings').WPWordCountUserSettings}     WPWordCountUserSettings\n */\n\n/**\n * Possible ways of counting.\n *\n * @typedef {'words'|'characters_excluding_spaces'|'characters_including_spaces'} WPWordCountStrategy\n */\n\n/**\n * Private function to manage the settings.\n *\n * @param {WPWordCountStrategy}     type         The type of count to be done.\n * @param {WPWordCountUserSettings} userSettings Custom settings for the count.\n *\n * @return {WPWordCountSettings} The combined settings object to be used.\n */\nfunction loadSettings( type, userSettings ) {\n\tconst settings = Object.assign( {}, defaultSettings, userSettings );\n\n\tsettings.shortcodes = settings.l10n?.shortcodes ?? [];\n\n\tif ( settings.shortcodes && settings.shortcodes.length ) {\n\t\tsettings.shortcodesRegExp = new RegExp(\n\t\t\t'\\\\[\\\\/?(?:' + settings.shortcodes.join( '|' ) + ')[^\\\\]]*?\\\\]',\n\t\t\t'g'\n\t\t);\n\t}\n\n\tsettings.type = type;\n\n\tif (\n\t\tsettings.type !== 'characters_excluding_spaces' &&\n\t\tsettings.type !== 'characters_including_spaces'\n\t) {\n\t\tsettings.type = 'words';\n\t}\n\n\treturn settings;\n}\n\n/**\n * Count the words in text\n *\n * @param {string}              text     The text being processed\n * @param {RegExp}              regex    The regular expression pattern being matched\n * @param {WPWordCountSettings} settings Settings object containing regular expressions for each strip function\n *\n * @return {number} Count of words.\n */\nfunction countWords( text, regex, settings ) {\n\ttext = [\n\t\tstripTags.bind( null, settings ),\n\t\tstripHTMLComments.bind( null, settings ),\n\t\tstripShortcodes.bind( null, settings ),\n\t\tstripSpaces.bind( null, settings ),\n\t\tstripHTMLEntities.bind( null, settings ),\n\t\tstripConnectors.bind( null, settings ),\n\t\tstripRemovables.bind( null, settings ),\n\t].reduce( ( result, fn ) => fn( result ), text );\n\ttext = text + '\\n';\n\treturn text.match( regex )?.length ?? 0;\n}\n\n/**\n * Count the characters in text\n *\n * @param {string}              text     The text being processed\n * @param {RegExp}              regex    The regular expression pattern being matched\n * @param {WPWordCountSettings} settings Settings object containing regular expressions for each strip function\n *\n * @return {number} Count of characters.\n */\nfunction countCharacters( text, regex, settings ) {\n\ttext = [\n\t\tstripTags.bind( null, settings ),\n\t\tstripHTMLComments.bind( null, settings ),\n\t\tstripShortcodes.bind( null, settings ),\n\t\ttransposeAstralsToCountableChar.bind( null, settings ),\n\t\tstripSpaces.bind( null, settings ),\n\t\ttransposeHTMLEntitiesToCountableChars.bind( null, settings ),\n\t].reduce( ( result, fn ) => fn( result ), text );\n\ttext = text + '\\n';\n\treturn text.match( regex )?.length ?? 0;\n}\n\n/**\n * Count some words.\n *\n * @param {string}                  text         The text being processed\n * @param {WPWordCountStrategy}     type         The type of count. Accepts 'words', 'characters_excluding_spaces', or 'characters_including_spaces'.\n * @param {WPWordCountUserSettings} userSettings Custom settings object.\n *\n * @example\n * ```js\n * import { count } from '@wordpress/wordcount';\n * const numberOfWords = count( 'Words to count', 'words', {} )\n * ```\n *\n * @return {number} The word or character count.\n */\nexport function count( text, type, userSettings ) {\n\tconst settings = loadSettings( type, userSettings );\n\tlet matchRegExp;\n\tswitch ( settings.type ) {\n\t\tcase 'words':\n\t\t\tmatchRegExp = settings.wordsRegExp;\n\t\t\treturn countWords( text, matchRegExp, settings );\n\t\tcase 'characters_including_spaces':\n\t\t\tmatchRegExp = settings.characters_including_spacesRegExp;\n\t\t\treturn countCharacters( text, matchRegExp, settings );\n\t\tcase 'characters_excluding_spaces':\n\t\t\tmatchRegExp = settings.characters_excluding_spacesRegExp;\n\t\t\treturn countCharacters( text, matchRegExp, settings );\n\t\tdefault:\n\t\t\treturn 0;\n\t}\n}\n"]}
{"version":3,"sources":["@wordpress/block-library/src/columns/columnCalculations.native.js"],"names":["ALIGNMENT_BREAKPOINTS","convertUnitToMobile","getColumnWidths","getWidths","styles","MAX_COLUMNS_NUM_IN_ROW","MIN_WIDTH","columnsContainer","minWidth","MARGIN","marginLeft","getColumnsInRow","width","columnCount","mobile","medium","Math","min","max","calculateContainerWidth","containerWidth","columnsInRow","getContentWidths","innerColumns","globalStyles","widths","columnWidthsWithUnits","columnWidths","columnWidthsValues","map","v","columnWidthsSum","reduce","acc","curr","columnRatios","colWidth","columnWidthsPerRatio","columnRatio","filteredColumnWidthsPerRatio","filter","columnWidthPerRatio","baseContainerWidth","length","minPercentageRatio","largeColumnsWidthsSum","ratio","index","columnWidth","maxColumnWidth","forEach","attributes","innerColumnAttributes","clientId","attributeWidth","proportionalRatio","percentageRatio","initialColumnWidth","round","newColumnWidth","floor","maxWidth"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport {\n\tALIGNMENT_BREAKPOINTS,\n\tconvertUnitToMobile,\n} from '@wordpress/components';\n\n/**\n * Internal dependencies\n */\nimport { getColumnWidths, getWidths } from './utils';\nimport styles from './editor.scss';\n\n/**\n * Maximum number of columns in a row\n *\n * @type {number}\n */\nconst MAX_COLUMNS_NUM_IN_ROW = 3;\n\n/**\n * Minimum width of column\n *\n * @type {number}\n */\nconst MIN_WIDTH = styles.columnsContainer?.minWidth;\n\n/**\n * Container margin value\n *\n * @type {number}\n */\nconst MARGIN = styles.columnsContainer?.marginLeft;\n\nexport const getColumnsInRow = ( width, columnCount ) => {\n\tif ( width ) {\n\t\tif ( width < ALIGNMENT_BREAKPOINTS.mobile ) {\n\t\t\t// show only 1 Column in row for mobile breakpoint container width\n\t\t\treturn 1;\n\t\t} else if ( width <= ALIGNMENT_BREAKPOINTS.medium ) {\n\t\t\t// show the maximum number of columns in a row for large breakpoint container width\n\t\t\treturn Math.min(\n\t\t\t\tMath.max( 1, columnCount ),\n\t\t\t\tMAX_COLUMNS_NUM_IN_ROW\n\t\t\t);\n\t\t}\n\t\t// Show all Column in one row.\n\t\treturn columnCount;\n\t}\n};\n\nexport const calculateContainerWidth = ( containerWidth, columnsInRow ) =>\n\t2 * MARGIN + containerWidth - columnsInRow * 2 * MARGIN;\n\nexport const getContentWidths = (\n\tcolumnsInRow,\n\twidth,\n\tcolumnCount,\n\tinnerColumns,\n\tglobalStyles\n) => {\n\tconst widths = {};\n\tconst columnWidthsWithUnits = getWidths( innerColumns, false );\n\tconst columnWidths = getColumnWidths( innerColumns, columnCount );\n\n\t// Array of column width attribute values\n\tconst columnWidthsValues = columnWidthsWithUnits.map( ( v ) =>\n\t\tconvertUnitToMobile( { width }, globalStyles, v )\n\t);\n\n\t// The sum of column width attribute values\n\tconst columnWidthsSum = columnWidthsValues.reduce(\n\t\t( acc, curr ) => acc + curr,\n\t\t0\n\t);\n\n\t// Array of ratios of each column width attribute value to their sum\n\tconst columnRatios = columnWidthsValues.map(\n\t\t( colWidth ) => colWidth / columnWidthsSum\n\t);\n\n\t// Array of calculated column width for its ratio\n\tconst columnWidthsPerRatio = columnRatios.map(\n\t\t( columnRatio ) =>\n\t\t\tcolumnRatio * calculateContainerWidth( width, columnsInRow )\n\t);\n\n\t//  Array of columns whose calculated width is lower than minimum width value\n\tconst filteredColumnWidthsPerRatio = columnWidthsPerRatio.filter(\n\t\t( columnWidthPerRatio ) => columnWidthPerRatio <= MIN_WIDTH\n\t);\n\n\t// Container width to be divided. If there are some results within `filteredColumnWidthsPerRatio`\n\t// there is a need to reduce the main width by multiplying number\n\t// of results in `filteredColumnWidthsPerRatio` and minimum width value\n\tconst baseContainerWidth =\n\t\twidth - filteredColumnWidthsPerRatio.length * MIN_WIDTH;\n\n\t// The minimum percentage ratio for which column width is equal minimum width value\n\tconst minPercentageRatio =\n\t\tMIN_WIDTH / calculateContainerWidth( width, columnsInRow );\n\n\t// The sum of column widths which ratio is higher than `minPercentageRatio`\n\tconst largeColumnsWidthsSum = columnRatios\n\t\t.map( ( ratio, index ) => {\n\t\t\tif ( ratio > minPercentageRatio ) {\n\t\t\t\treturn columnWidthsValues[ index ];\n\t\t\t}\n\t\t\treturn 0;\n\t\t} )\n\t\t.reduce( ( acc, curr ) => acc + curr, 0 );\n\n\tconst containerWidth = calculateContainerWidth(\n\t\tbaseContainerWidth,\n\t\tcolumnsInRow\n\t);\n\n\tlet columnWidth =\n\t\tcalculateContainerWidth( width, columnsInRow ) / columnsInRow;\n\tlet maxColumnWidth = columnWidth;\n\n\tinnerColumns.forEach(\n\t\t( { attributes: innerColumnAttributes, clientId } ) => {\n\t\t\tconst attributeWidth = convertUnitToMobile(\n\t\t\t\t{ width },\n\t\t\t\tglobalStyles,\n\t\t\t\tinnerColumnAttributes.width || columnWidths[ clientId ]\n\t\t\t);\n\t\t\tconst proportionalRatio = attributeWidth / columnWidthsSum;\n\t\t\tconst percentageRatio = attributeWidth / width;\n\t\t\tconst initialColumnWidth = proportionalRatio * containerWidth;\n\n\t\t\tif ( columnCount === 1 && width > ALIGNMENT_BREAKPOINTS.medium ) {\n\t\t\t\t// Exactly one column inside columns on the breakpoint higher than medium\n\t\t\t\t// has to take a percentage of the full width\n\t\t\t\tcolumnWidth = percentageRatio * containerWidth;\n\t\t\t} else if ( columnsInRow > 1 ) {\n\t\t\t\tif ( width > ALIGNMENT_BREAKPOINTS.medium ) {\n\t\t\t\t\tif ( initialColumnWidth <= MIN_WIDTH ) {\n\t\t\t\t\t\t// Column width cannot be lower than minimum 32px\n\t\t\t\t\t\tcolumnWidth = MIN_WIDTH;\n\t\t\t\t\t} else if ( initialColumnWidth > MIN_WIDTH ) {\n\t\t\t\t\t\t// Column width has to be the result of multiplying the container width and\n\t\t\t\t\t\t// the ratio of attribute and the sum of widths of columns wider than 32px\n\t\t\t\t\t\tcolumnWidth =\n\t\t\t\t\t\t\t( attributeWidth / largeColumnsWidthsSum ) *\n\t\t\t\t\t\t\tcontainerWidth;\n\t\t\t\t\t}\n\n\t\t\t\t\tmaxColumnWidth = columnWidth;\n\n\t\t\t\t\tif ( Math.round( columnWidthsSum ) < width ) {\n\t\t\t\t\t\t// In case that column width attribute values does not exceed 100, each column\n\t\t\t\t\t\t// should have attribute percentage of container width\n\t\t\t\t\t\tconst newColumnWidth = percentageRatio * containerWidth;\n\t\t\t\t\t\tif ( newColumnWidth <= MIN_WIDTH ) {\n\t\t\t\t\t\t\tcolumnWidth = MIN_WIDTH;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcolumnWidth = newColumnWidth;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if ( width < ALIGNMENT_BREAKPOINTS.medium ) {\n\t\t\t\t\t// On the breakpoint lower than medium each column inside columns\n\t\t\t\t\t// has to take equal part of container width\n\t\t\t\t\tcolumnWidth =\n\t\t\t\t\t\tcalculateContainerWidth( width, columnsInRow ) /\n\t\t\t\t\t\tcolumnsInRow;\n\t\t\t\t}\n\t\t\t}\n\t\t\twidths[ clientId ] = {\n\t\t\t\twidth: Math.floor( columnWidth ),\n\t\t\t\tmaxWidth: Math.floor( maxColumnWidth ),\n\t\t\t};\n\t\t}\n\t);\n\treturn widths;\n};\n"]}
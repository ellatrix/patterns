import { createElement, Fragment } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { BlockControls, store } from '@wordpress/block-editor';
import { ToolbarGroup, ToolbarButton, Modal, Button } from '@wordpress/components';
import { useEffect, useState, RawHTML } from '@wordpress/element';
import { __ } from '@wordpress/i18n';
import { useSelect } from '@wordpress/data';

function ClassicEdit(props) {
  const styles = useSelect(select => select(store).getSettings().styles);
  useEffect(() => {
    const {
      baseURL,
      suffix,
      settings
    } = window.wpEditorL10n.tinymce;
    window.tinymce.EditorManager.overrideDefaults({
      base_url: baseURL,
      suffix
    });
    window.wp.oldEditor.initialize(props.id, {
      tinymce: { ...settings,
        height: 500,

        setup(editor) {
          editor.on('init', () => {
            const doc = editor.getDoc();
            styles.forEach(_ref => {
              let {
                css
              } = _ref;
              const styleEl = doc.createElement('style');
              styleEl.innerHTML = css;
              doc.head.appendChild(styleEl);
            });
          });
        }

      }
    });
    return () => {
      window.wp.oldEditor.remove(props.id);
    };
  }, []);
  return createElement("textarea", props);
}

export default function ModalEdit(props) {
  const {
    clientId,
    attributes: {
      content
    },
    setAttributes,
    onReplace
  } = props;
  const [isOpen, setOpen] = useState(false);
  const id = `editor-${clientId}`;

  const label = __('Classic Edit');

  return createElement(Fragment, null, createElement(BlockControls, null, createElement(ToolbarGroup, null, createElement(ToolbarButton, {
    onClick: () => setOpen(true)
  }, label))), content && createElement(RawHTML, null, content), (isOpen || !content) && createElement(Modal, {
    title: label,
    __experimentalHideHeader: true
  }, createElement("h2", {
    style: {
      display: 'flex',
      justifyContent: 'space-between'
    }
  }, createElement("div", null, label), createElement("div", null, createElement(Button, {
    onClick: () => content ? setOpen(false) : onReplace([])
  }, __('Cancel')), createElement(Button, {
    variant: "primary",
    onClick: () => {
      setAttributes({
        content: window.wp.oldEditor.getContent(id)
      });
      setOpen(false);
    }
  }, __('Save')))), createElement(ClassicEdit, {
    id: id,
    defaultValue: content
  })));
}
//# sourceMappingURL=modal.js.map
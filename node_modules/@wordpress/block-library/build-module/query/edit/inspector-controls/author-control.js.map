{"version":3,"sources":["@wordpress/block-library/src/query/edit/inspector-controls/author-control.js"],"names":["__","FormTokenField","useSelect","store","coreStore","getEntitiesInfo","AUTHORS_QUERY","who","per_page","_fields","context","AuthorControl","value","onChange","authorsList","select","getUsers","authorsInfo","normalizedValue","toString","split","sanitizedValue","reduce","accumulator","authorId","author","mapById","push","id","name","getIdByValue","entitiesMappedByName","authorValue","onAuthorChange","newValue","ids","Array","from","mapByName","add","Set","join","names"],"mappings":";;AAAA;AACA;AACA;AACA,SAASA,EAAT,QAAmB,iBAAnB;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,KAAK,IAAIC,SAAlB,QAAmC,sBAAnC;AAEA;AACA;AACA;;AACA,SAASC,eAAT,QAAgC,aAAhC;AAEA,MAAMC,aAAa,GAAG;AACrBC,EAAAA,GAAG,EAAE,SADgB;AAErBC,EAAAA,QAAQ,EAAE,CAAC,CAFU;AAGrBC,EAAAA,OAAO,EAAE,SAHY;AAIrBC,EAAAA,OAAO,EAAE;AAJY,CAAtB;;AAOA,SAASC,aAAT,OAA8C;AAAA,MAAtB;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAsB;AAC7C,QAAMC,WAAW,GAAGZ,SAAS,CAAIa,MAAF,IAAc;AAC5C,UAAM;AAAEC,MAAAA;AAAF,QAAeD,MAAM,CAAEX,SAAF,CAA3B;AACA,WAAOY,QAAQ,CAAEV,aAAF,CAAf;AACA,GAH4B,EAG1B,EAH0B,CAA7B;;AAKA,MAAK,CAAEQ,WAAP,EAAqB;AACpB,WAAO,IAAP;AACA;;AACD,QAAMG,WAAW,GAAGZ,eAAe,CAAES,WAAF,CAAnC;AACA;AACD;AACA;AACA;AACA;;AACC,QAAMI,eAAe,GAAG,CAAEN,KAAF,GAAU,EAAV,GAAeA,KAAK,CAACO,QAAN,GAAiBC,KAAjB,CAAwB,GAAxB,CAAvC,CAf6C,CAgB7C;AACA;;AACA,QAAMC,cAAc,GAAGH,eAAe,CAACI,MAAhB,CACtB,CAAEC,WAAF,EAAeC,QAAf,KAA6B;AAC5B,UAAMC,MAAM,GAAGR,WAAW,CAACS,OAAZ,CAAqBF,QAArB,CAAf;;AACA,QAAKC,MAAL,EAAc;AACbF,MAAAA,WAAW,CAACI,IAAZ,CAAkB;AACjBC,QAAAA,EAAE,EAAEJ,QADa;AAEjBZ,QAAAA,KAAK,EAAEa,MAAM,CAACI;AAFG,OAAlB;AAIA;;AACD,WAAON,WAAP;AACA,GAVqB,EAWtB,EAXsB,CAAvB;;AAcA,QAAMO,YAAY,GAAG,CAAEC,oBAAF,EAAwBC,WAAxB,KAAyC;AAAA;;AAC7D,UAAMJ,EAAE,GAAG,CAAAI,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEJ,EAAb,+BAAmBG,oBAAoB,CAAEC,WAAF,CAAvC,0DAAmB,sBAAqCJ,EAAxD,CAAX;AACA,QAAKA,EAAL,EAAU,OAAOA,EAAP;AACV,GAHD;;AAIA,QAAMK,cAAc,GAAKC,QAAF,IAAgB;AACtC,UAAMC,GAAG,GAAGC,KAAK,CAACC,IAAN,CACXH,QAAQ,CAACZ,MAAT,CAAiB,CAAEC,WAAF,EAAeE,MAAf,KAA2B;AAC3C;AACA,YAAMG,EAAE,GAAGE,YAAY,CAAEb,WAAW,CAACqB,SAAd,EAAyBb,MAAzB,CAAvB;AACA,UAAKG,EAAL,EAAUL,WAAW,CAACgB,GAAZ,CAAiBX,EAAjB;AACV,aAAOL,WAAP;AACA,KALD,EAKG,IAAIiB,GAAJ,EALH,CADW,CAAZ;AAQA3B,IAAAA,QAAQ,CAAE;AAAEY,MAAAA,MAAM,EAAEU,GAAG,CAACM,IAAJ,CAAU,GAAV;AAAV,KAAF,CAAR;AACA,GAVD;;AAWA,SACC,cAAC,cAAD;AACC,IAAA,KAAK,EAAGzC,EAAE,CAAE,SAAF,CADX;AAEC,IAAA,KAAK,EAAGqB,cAFT;AAGC,IAAA,WAAW,EAAGJ,WAAW,CAACyB,KAH3B;AAIC,IAAA,QAAQ,EAAGT,cAJZ;AAKC,IAAA,uBAAuB,EAAG;AAL3B,IADD;AASA;;AAED,eAAetB,aAAf","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { FormTokenField } from '@wordpress/components';\nimport { useSelect } from '@wordpress/data';\nimport { store as coreStore } from '@wordpress/core-data';\n\n/**\n * Internal dependencies\n */\nimport { getEntitiesInfo } from '../../utils';\n\nconst AUTHORS_QUERY = {\n\twho: 'authors',\n\tper_page: -1,\n\t_fields: 'id,name',\n\tcontext: 'view',\n};\n\nfunction AuthorControl( { value, onChange } ) {\n\tconst authorsList = useSelect( ( select ) => {\n\t\tconst { getUsers } = select( coreStore );\n\t\treturn getUsers( AUTHORS_QUERY );\n\t}, [] );\n\n\tif ( ! authorsList ) {\n\t\treturn null;\n\t}\n\tconst authorsInfo = getEntitiesInfo( authorsList );\n\t/**\n\t * We need to normalize the value because the block operates on a\n\t * comma(`,`) separated string value and `FormTokenFiels` needs an\n\t * array.\n\t */\n\tconst normalizedValue = ! value ? [] : value.toString().split( ',' );\n\t// Returns only the existing authors ids. This prevents the component\n\t// from crashing in the editor, when non existing ids are provided.\n\tconst sanitizedValue = normalizedValue.reduce(\n\t\t( accumulator, authorId ) => {\n\t\t\tconst author = authorsInfo.mapById[ authorId ];\n\t\t\tif ( author ) {\n\t\t\t\taccumulator.push( {\n\t\t\t\t\tid: authorId,\n\t\t\t\t\tvalue: author.name,\n\t\t\t\t} );\n\t\t\t}\n\t\t\treturn accumulator;\n\t\t},\n\t\t[]\n\t);\n\n\tconst getIdByValue = ( entitiesMappedByName, authorValue ) => {\n\t\tconst id = authorValue?.id || entitiesMappedByName[ authorValue ]?.id;\n\t\tif ( id ) return id;\n\t};\n\tconst onAuthorChange = ( newValue ) => {\n\t\tconst ids = Array.from(\n\t\t\tnewValue.reduce( ( accumulator, author ) => {\n\t\t\t\t// Verify that new values point to existing entities.\n\t\t\t\tconst id = getIdByValue( authorsInfo.mapByName, author );\n\t\t\t\tif ( id ) accumulator.add( id );\n\t\t\t\treturn accumulator;\n\t\t\t}, new Set() )\n\t\t);\n\t\tonChange( { author: ids.join( ',' ) } );\n\t};\n\treturn (\n\t\t<FormTokenField\n\t\t\tlabel={ __( 'Authors' ) }\n\t\t\tvalue={ sanitizedValue }\n\t\t\tsuggestions={ authorsInfo.names }\n\t\t\tonChange={ onAuthorChange }\n\t\t\t__experimentalShowHowTo={ false }\n\t\t/>\n\t);\n}\n\nexport default AuthorControl;\n"]}
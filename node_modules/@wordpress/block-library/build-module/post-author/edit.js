import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { AlignmentControl, BlockControls, InspectorControls, RichText, useBlockProps } from '@wordpress/block-editor';
import { ComboboxControl, PanelBody, SelectControl, ToggleControl } from '@wordpress/components';
import { useSelect, useDispatch } from '@wordpress/data';
import { __ } from '@wordpress/i18n';
import { store as coreStore } from '@wordpress/core-data';
const minimumUsersForCombobox = 25;
const AUTHORS_QUERY = {
  who: 'authors',
  per_page: 100
};

function PostAuthorEdit(_ref) {
  let {
    isSelected,
    context: {
      postType,
      postId,
      queryId
    },
    attributes,
    setAttributes
  } = _ref;
  const isDescendentOfQueryLoop = Number.isFinite(queryId);
  const {
    authorId,
    authorDetails,
    authors
  } = useSelect(select => {
    var _getEditedEntityRecor;

    const {
      getEditedEntityRecord,
      getUser,
      getUsers
    } = select(coreStore);

    const _authorId = (_getEditedEntityRecor = getEditedEntityRecord('postType', postType, postId)) === null || _getEditedEntityRecor === void 0 ? void 0 : _getEditedEntityRecor.author;

    return {
      authorId: _authorId,
      authorDetails: _authorId ? getUser(_authorId) : null,
      authors: getUsers(AUTHORS_QUERY)
    };
  }, [postType, postId]);
  const {
    editEntityRecord
  } = useDispatch(coreStore);
  const {
    textAlign,
    showAvatar,
    showBio,
    byline,
    isLink,
    linkTarget
  } = attributes;
  const avatarSizes = [];

  const authorName = (authorDetails === null || authorDetails === void 0 ? void 0 : authorDetails.name) || __('Post Author');

  if (authorDetails !== null && authorDetails !== void 0 && authorDetails.avatar_urls) {
    Object.keys(authorDetails.avatar_urls).forEach(size => {
      avatarSizes.push({
        value: size,
        label: `${size} x ${size}`
      });
    });
  }

  const blockProps = useBlockProps({
    className: classnames({
      [`has-text-align-${textAlign}`]: textAlign
    })
  });
  const authorOptions = authors !== null && authors !== void 0 && authors.length ? authors.map(_ref2 => {
    let {
      id,
      name
    } = _ref2;
    return {
      value: id,
      label: name
    };
  }) : [];

  const handleSelect = nextAuthorId => {
    editEntityRecord('postType', postType, postId, {
      author: nextAuthorId
    });
  };

  const showCombobox = authorOptions.length >= minimumUsersForCombobox;
  return createElement(Fragment, null, createElement(InspectorControls, null, createElement(PanelBody, {
    title: __('Settings')
  }, !!postId && !isDescendentOfQueryLoop && authorOptions.length && (showCombobox && createElement(ComboboxControl, {
    __nextHasNoMarginBottom: true,
    label: __('Author'),
    options: authorOptions,
    value: authorId,
    onChange: handleSelect,
    allowReset: false
  }) || createElement(SelectControl, {
    __nextHasNoMarginBottom: true,
    label: __('Author'),
    value: authorId,
    options: authorOptions,
    onChange: handleSelect
  })), createElement(ToggleControl, {
    __nextHasNoMarginBottom: true,
    label: __('Show avatar'),
    checked: showAvatar,
    onChange: () => setAttributes({
      showAvatar: !showAvatar
    })
  }), showAvatar && createElement(SelectControl, {
    __nextHasNoMarginBottom: true,
    label: __('Avatar size'),
    value: attributes.avatarSize,
    options: avatarSizes,
    onChange: size => {
      setAttributes({
        avatarSize: Number(size)
      });
    }
  }), createElement(ToggleControl, {
    __nextHasNoMarginBottom: true,
    label: __('Show bio'),
    checked: showBio,
    onChange: () => setAttributes({
      showBio: !showBio
    })
  }), createElement(ToggleControl, {
    __nextHasNoMarginBottom: true,
    label: __('Link author name to author page'),
    checked: isLink,
    onChange: () => setAttributes({
      isLink: !isLink
    })
  }), isLink && createElement(ToggleControl, {
    __nextHasNoMarginBottom: true,
    label: __('Open in new tab'),
    onChange: value => setAttributes({
      linkTarget: value ? '_blank' : '_self'
    }),
    checked: linkTarget === '_blank'
  }))), createElement(BlockControls, {
    group: "block"
  }, createElement(AlignmentControl, {
    value: textAlign,
    onChange: nextAlign => {
      setAttributes({
        textAlign: nextAlign
      });
    }
  })), createElement("div", blockProps, showAvatar && (authorDetails === null || authorDetails === void 0 ? void 0 : authorDetails.avatar_urls) && createElement("div", {
    className: "wp-block-post-author__avatar"
  }, createElement("img", {
    width: attributes.avatarSize,
    src: authorDetails.avatar_urls[attributes.avatarSize],
    alt: authorDetails.name
  })), createElement("div", {
    className: "wp-block-post-author__content"
  }, (!RichText.isEmpty(byline) || isSelected) && createElement(RichText, {
    className: "wp-block-post-author__byline",
    multiline: false,
    "aria-label": __('Post author byline text'),
    placeholder: __('Write bylineâ€¦'),
    value: byline,
    onChange: value => setAttributes({
      byline: value
    })
  }), createElement("p", {
    className: "wp-block-post-author__name"
  }, isLink ? createElement("a", {
    href: "#post-author-pseudo-link",
    onClick: event => event.preventDefault()
  }, authorName) : authorName), showBio && createElement("p", {
    className: "wp-block-post-author__bio",
    dangerouslySetInnerHTML: {
      __html: authorDetails === null || authorDetails === void 0 ? void 0 : authorDetails.description
    }
  }))));
}

export default PostAuthorEdit;
//# sourceMappingURL=edit.js.map
{"version":3,"sources":["@wordpress/block-library/src/post-time-to-read/edit.js"],"names":["classnames","_x","_n","sprintf","useMemo","AlignmentControl","BlockControls","useBlockProps","__unstableSerializeAndClean","useEntityProp","useEntityBlockEditor","count","wordCount","AVERAGE_READING_RATE","PostTimeToReadEdit","attributes","setAttributes","context","textAlign","postId","postType","contentStructure","blocks","id","minutesToReadString","content","Function","wordCountType","minutesToRead","Math","max","round","blockProps","className","nextAlign"],"mappings":";;AAAA;AACA;AACA;AACA,OAAOA,UAAP,MAAuB,YAAvB;AAEA;AACA;AACA;;AACA,SAASC,EAAT,EAAaC,EAAb,EAAiBC,OAAjB,QAAgC,iBAAhC;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SACCC,gBADD,EAECC,aAFD,EAGCC,aAHD,QAIO,yBAJP;AAKA,SAASC,2BAAT,QAA4C,mBAA5C;AACA,SAASC,aAAT,EAAwBC,oBAAxB,QAAoD,sBAApD;AACA,SAASC,KAAK,IAAIC,SAAlB,QAAmC,sBAAnC;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,oBAAoB,GAAG,GAA7B;;AAEA,SAASC,kBAAT,OAAsE;AAAA,MAAzC;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,aAAd;AAA6BC,IAAAA;AAA7B,GAAyC;AACrE,QAAM;AAAEC,IAAAA;AAAF,MAAgBH,UAAtB;AACA,QAAM;AAAEI,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAuBH,OAA7B;AAEA,QAAM,CAAEI,gBAAF,IAAuBZ,aAAa,CACzC,UADyC,EAEzCW,QAFyC,EAGzC,SAHyC,EAIzCD,MAJyC,CAA1C;AAOA,QAAM,CAAEG,MAAF,IAAaZ,oBAAoB,CAAE,UAAF,EAAcU,QAAd,EAAwB;AAC9DG,IAAAA,EAAE,EAAEJ;AAD0D,GAAxB,CAAvC;AAIA,QAAMK,mBAAmB,GAAGpB,OAAO,CAAE,MAAM;AAC1C;AACA,QAAIqB,OAAJ;;AACA,QAAKJ,gBAAgB,YAAYK,QAAjC,EAA4C;AAC3CD,MAAAA,OAAO,GAAGJ,gBAAgB,CAAE;AAAEC,QAAAA;AAAF,OAAF,CAA1B;AACA,KAFD,MAEO,IAAKA,MAAL,EAAc;AACpB;AACA;AACA;AACAG,MAAAA,OAAO,GAAGjB,2BAA2B,CAAEc,MAAF,CAArC;AACA,KALM,MAKA;AACNG,MAAAA,OAAO,GAAGJ,gBAAV;AACA;AAED;AACF;AACA;AACA;AACA;;;AACE,UAAMM,aAAa,GAAG1B,EAAE,CACvB,OADuB,EAEvB,oCAFuB,CAAxB;;AAKA,UAAM2B,aAAa,GAAGC,IAAI,CAACC,GAAL,CACrB,CADqB,EAErBD,IAAI,CAACE,KAAL,CACCnB,SAAS,CAAEa,OAAF,EAAWE,aAAX,CAAT,GAAsCd,oBADvC,CAFqB,CAAtB;AAOA,WAAOV,OAAO;AACb;AACAD,IAAAA,EAAE,CAAE,WAAF,EAAe,YAAf,EAA6B0B,aAA7B,CAFW,EAGbA,aAHa,CAAd;AAKA,GApCkC,EAoChC,CAAEP,gBAAF,EAAoBC,MAApB,CApCgC,CAAnC;AAsCA,QAAMU,UAAU,GAAGzB,aAAa,CAAE;AACjC0B,IAAAA,SAAS,EAAEjC,UAAU,CAAE;AACtB,OAAG,kBAAkBkB,SAAW,EAAhC,GAAqCA;AADf,KAAF;AADY,GAAF,CAAhC;AAMA,SACC,8BACC,cAAC,aAAD;AAAe,IAAA,KAAK,EAAC;AAArB,KACC,cAAC,gBAAD;AACC,IAAA,KAAK,EAAGA,SADT;AAEC,IAAA,QAAQ,EAAKgB,SAAF,IAAiB;AAC3BlB,MAAAA,aAAa,CAAE;AAAEE,QAAAA,SAAS,EAAEgB;AAAb,OAAF,CAAb;AACA;AAJF,IADD,CADD,EASC,mBAAQF,UAAR,EAAuBR,mBAAvB,CATD,CADD;AAaA;;AAED,eAAeV,kBAAf","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\n\n/**\n * WordPress dependencies\n */\nimport { _x, _n, sprintf } from '@wordpress/i18n';\nimport { useMemo } from '@wordpress/element';\nimport {\n\tAlignmentControl,\n\tBlockControls,\n\tuseBlockProps,\n} from '@wordpress/block-editor';\nimport { __unstableSerializeAndClean } from '@wordpress/blocks';\nimport { useEntityProp, useEntityBlockEditor } from '@wordpress/core-data';\nimport { count as wordCount } from '@wordpress/wordcount';\n\n/**\n * Average reading rate - based on average taken from\n * https://irisreading.com/average-reading-speed-in-various-languages/\n * (Characters/minute used for Chinese rather than words).\n */\nconst AVERAGE_READING_RATE = 189;\n\nfunction PostTimeToReadEdit( { attributes, setAttributes, context } ) {\n\tconst { textAlign } = attributes;\n\tconst { postId, postType } = context;\n\n\tconst [ contentStructure ] = useEntityProp(\n\t\t'postType',\n\t\tpostType,\n\t\t'content',\n\t\tpostId\n\t);\n\n\tconst [ blocks ] = useEntityBlockEditor( 'postType', postType, {\n\t\tid: postId,\n\t} );\n\n\tconst minutesToReadString = useMemo( () => {\n\t\t// Replicates the logic found in getEditedPostContent().\n\t\tlet content;\n\t\tif ( contentStructure instanceof Function ) {\n\t\t\tcontent = contentStructure( { blocks } );\n\t\t} else if ( blocks ) {\n\t\t\t// If we have parsed blocks already, they should be our source of truth.\n\t\t\t// Parsing applies block deprecations and legacy block conversions that\n\t\t\t// unparsed content will not have.\n\t\t\tcontent = __unstableSerializeAndClean( blocks );\n\t\t} else {\n\t\t\tcontent = contentStructure;\n\t\t}\n\n\t\t/*\n\t\t * translators: If your word count is based on single characters (e.g. East Asian characters),\n\t\t * enter 'characters_excluding_spaces' or 'characters_including_spaces'. Otherwise, enter 'words'.\n\t\t * Do not translate into your own language.\n\t\t */\n\t\tconst wordCountType = _x(\n\t\t\t'words',\n\t\t\t'Word count type. Do not translate!'\n\t\t);\n\n\t\tconst minutesToRead = Math.max(\n\t\t\t1,\n\t\t\tMath.round(\n\t\t\t\twordCount( content, wordCountType ) / AVERAGE_READING_RATE\n\t\t\t)\n\t\t);\n\n\t\treturn sprintf(\n\t\t\t/* translators: %d is the number of minutes the post will take to read. */\n\t\t\t_n( '%d minute', '%d minutes', minutesToRead ),\n\t\t\tminutesToRead\n\t\t);\n\t}, [ contentStructure, blocks ] );\n\n\tconst blockProps = useBlockProps( {\n\t\tclassName: classnames( {\n\t\t\t[ `has-text-align-${ textAlign }` ]: textAlign,\n\t\t} ),\n\t} );\n\n\treturn (\n\t\t<>\n\t\t\t<BlockControls group=\"block\">\n\t\t\t\t<AlignmentControl\n\t\t\t\t\tvalue={ textAlign }\n\t\t\t\t\tonChange={ ( nextAlign ) => {\n\t\t\t\t\t\tsetAttributes( { textAlign: nextAlign } );\n\t\t\t\t\t} }\n\t\t\t\t/>\n\t\t\t</BlockControls>\n\t\t\t<p { ...blockProps }>{ minutesToReadString }</p>\n\t\t</>\n\t);\n}\n\nexport default PostTimeToReadEdit;\n"]}
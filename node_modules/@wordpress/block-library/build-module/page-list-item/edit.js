import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { useBlockProps, useInnerBlocksProps } from '@wordpress/block-editor';
import { useSelect } from '@wordpress/data';
import { store as coreStore } from '@wordpress/core-data';
import { decodeEntities } from '@wordpress/html-entities';
/**
 * Internal dependencies
 */

import { ItemSubmenuIcon } from '../navigation-link/icons';
import { getColors, getNavigationChildBlockProps } from '../navigation/edit/utils';

function useFrontPageId() {
  return useSelect(select => {
    const canReadSettings = select(coreStore).canUser('read', 'settings');

    if (!canReadSettings) {
      return undefined;
    }

    const site = select(coreStore).getEntityRecord('root', 'site');
    return (site === null || site === void 0 ? void 0 : site.show_on_front) === 'page' && (site === null || site === void 0 ? void 0 : site.page_on_front);
  }, []);
}

export default function PageListItemEdit(_ref) {
  let {
    context,
    attributes
  } = _ref;
  const {
    id,
    label,
    link,
    hasChildren
  } = attributes;
  const isNavigationChild = ('showSubmenuIcon' in context);
  const frontPageId = useFrontPageId();
  const innerBlocksColors = getColors(context, true);
  const navigationChildBlockProps = getNavigationChildBlockProps(innerBlocksColors);
  const blockProps = useBlockProps(navigationChildBlockProps, {
    className: 'wp-block-pages-list__item'
  });
  const innerBlocksProps = useInnerBlocksProps(blockProps);
  return createElement("li", {
    key: id,
    className: classnames('wp-block-pages-list__item', {
      'has-child': hasChildren,
      'wp-block-navigation-item': isNavigationChild,
      'open-on-click': context.openSubmenusOnClick,
      'open-on-hover-click': !context.openSubmenusOnClick && context.showSubmenuIcon,
      'menu-item-home': id === frontPageId
    })
  }, hasChildren && context.openSubmenusOnClick ? createElement(Fragment, null, createElement("button", {
    className: "wp-block-navigation-item__content wp-block-navigation-submenu__toggle",
    "aria-expanded": "false"
  }, decodeEntities(label)), createElement("span", {
    className: "wp-block-page-list__submenu-icon wp-block-navigation__submenu-icon"
  }, createElement(ItemSubmenuIcon, null))) : createElement("a", {
    className: classnames('wp-block-pages-list__item__link', {
      'wp-block-navigation-item__content': isNavigationChild
    }),
    href: link
  }, decodeEntities(label)), hasChildren && createElement(Fragment, null, !context.openSubmenusOnClick && context.showSubmenuIcon && createElement("button", {
    className: "wp-block-navigation-item__content wp-block-navigation-submenu__toggle wp-block-page-list__submenu-icon wp-block-navigation__submenu-icon",
    "aria-expanded": "false"
  }, createElement(ItemSubmenuIcon, null)), createElement("ul", innerBlocksProps)));
}
//# sourceMappingURL=edit.js.map
import { createElement, Fragment } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { useDispatch, useSelect } from '@wordpress/data';
import { InnerBlocks, useBlockProps, InspectorControls, useInnerBlocksProps, useSetting, store as blockEditorStore } from '@wordpress/block-editor';
import { SelectControl } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
/**
 * Internal dependencies
 */

import GroupPlaceHolder, { useShouldShowPlaceHolder } from './placeholder';
/**
 * Render inspector controls for the Group block.
 *
 * @param {Object}   props                 Component props.
 * @param {string}   props.tagName         The HTML tag name.
 * @param {Function} props.onSelectTagName onChange function for the SelectControl.
 *
 * @return {JSX.Element}                The control group.
 */

function GroupEditControls(_ref) {
  let {
    tagName,
    onSelectTagName
  } = _ref;
  const htmlElementMessages = {
    header: __('The <header> element should represent introductory content, typically a group of introductory or navigational aids.'),
    main: __('The <main> element should be used for the primary content of your document only. '),
    section: __("The <section> element should represent a standalone portion of the document that can't be better represented by another element."),
    article: __('The <article> element should represent a self-contained, syndicatable portion of the document.'),
    aside: __("The <aside> element should represent a portion of a document whose content is only indirectly related to the document's main content."),
    footer: __('The <footer> element should represent a footer for its nearest sectioning element (e.g.: <section>, <article>, <main> etc.).')
  };
  return createElement(InspectorControls, {
    group: "advanced"
  }, createElement(SelectControl, {
    __nextHasNoMarginBottom: true,
    label: __('HTML element'),
    options: [{
      label: __('Default (<div>)'),
      value: 'div'
    }, {
      label: '<header>',
      value: 'header'
    }, {
      label: '<main>',
      value: 'main'
    }, {
      label: '<section>',
      value: 'section'
    }, {
      label: '<article>',
      value: 'article'
    }, {
      label: '<aside>',
      value: 'aside'
    }, {
      label: '<footer>',
      value: 'footer'
    }],
    value: tagName,
    onChange: onSelectTagName,
    help: htmlElementMessages[tagName]
  }));
}

function GroupEdit(_ref2) {
  let {
    attributes,
    name,
    setAttributes,
    clientId,
    __unstableLayoutClassNames: layoutClassNames
  } = _ref2;
  const {
    hasInnerBlocks,
    themeSupportsLayout
  } = useSelect(select => {
    var _getSettings;

    const {
      getBlock,
      getSettings
    } = select(blockEditorStore);
    const block = getBlock(clientId);
    return {
      hasInnerBlocks: !!(block && block.innerBlocks.length),
      themeSupportsLayout: (_getSettings = getSettings()) === null || _getSettings === void 0 ? void 0 : _getSettings.supportsLayout
    };
  }, [clientId]);
  const {
    tagName: TagName = 'div',
    templateLock,
    layout = {}
  } = attributes; // Layout settings.

  const defaultLayout = useSetting('layout') || {};
  const usedLayout = !(layout !== null && layout !== void 0 && layout.type) ? { ...defaultLayout,
    ...layout,
    type: 'default'
  } : { ...defaultLayout,
    ...layout
  };
  const {
    type = 'default'
  } = usedLayout;
  const layoutSupportEnabled = themeSupportsLayout || type === 'flex'; // Hooks.

  const blockProps = useBlockProps({
    className: !layoutSupportEnabled ? layoutClassNames : null
  });
  const [showPlaceholder, setShowPlaceholder] = useShouldShowPlaceHolder({
    attributes,
    usedLayoutType: usedLayout === null || usedLayout === void 0 ? void 0 : usedLayout.type,
    hasInnerBlocks
  });
  const innerBlocksProps = useInnerBlocksProps(layoutSupportEnabled ? blockProps : {
    className: 'wp-block-group__inner-container'
  }, {
    templateLock,
    renderAppender: hasInnerBlocks ? undefined : InnerBlocks.ButtonBlockAppender,
    __unstableDisableLayoutClassNames: !layoutSupportEnabled
  });
  const {
    selectBlock
  } = useDispatch(blockEditorStore);

  const selectVariation = nextVariation => {
    setAttributes(nextVariation.attributes);
    selectBlock(clientId, -1);
    setShowPlaceholder(false);
  };

  return createElement(Fragment, null, createElement(GroupEditControls, {
    tagName: TagName,
    onSelectTagName: value => setAttributes({
      tagName: value
    })
  }), showPlaceholder && createElement(GroupPlaceHolder, {
    clientId: clientId,
    name: name,
    onSelect: selectVariation
  }), layoutSupportEnabled && !showPlaceholder && createElement(TagName, innerBlocksProps), !layoutSupportEnabled && !showPlaceholder && createElement(TagName, blockProps, createElement("div", innerBlocksProps)));
}

export default GroupEdit;
//# sourceMappingURL=edit.js.map
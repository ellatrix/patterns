import { createElement, Fragment } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { useEntityProp } from '@wordpress/core-data';
import { SelectControl, TextControl } from '@wordpress/components';
import { sprintf, __ } from '@wordpress/i18n';
import { InspectorControls } from '@wordpress/block-editor';
import { useSelect } from '@wordpress/data';
/**
 * Internal dependencies
 */

import { TemplatePartImportControls } from './import-controls';
export function TemplatePartAdvancedControls(_ref) {
  let {
    tagName,
    setAttributes,
    isEntityAvailable,
    templatePartId,
    defaultWrapper,
    hasInnerBlocks
  } = _ref;
  const [area, setArea] = useEntityProp('postType', 'wp_template_part', 'area', templatePartId);
  const [title, setTitle] = useEntityProp('postType', 'wp_template_part', 'title', templatePartId);
  const {
    areaOptions
  } = useSelect(select => {
    // FIXME: @wordpress/block-library should not depend on @wordpress/editor.
    // Blocks can be loaded into a *non-post* block editor.

    /* eslint-disable @wordpress/data-no-store-string-literals */
    const definedAreas = select('core/editor').__experimentalGetDefaultTemplatePartAreas();
    /* eslint-enable @wordpress/data-no-store-string-literals */


    return {
      areaOptions: definedAreas.map(_ref2 => {
        let {
          label,
          area: _area
        } = _ref2;
        return {
          label,
          value: _area
        };
      })
    };
  }, []);
  const htmlElementMessages = {
    header: __('The <header> element should represent introductory content, typically a group of introductory or navigational aids.'),
    main: __('The <main> element should be used for the primary content of your document only. '),
    section: __("The <section> element should represent a standalone portion of the document that can't be better represented by another element."),
    article: __('The <article> element should represent a self-contained, syndicatable portion of the document.'),
    aside: __("The <aside> element should represent a portion of a document whose content is only indirectly related to the document's main content."),
    footer: __('The <footer> element should represent a footer for its nearest sectioning element (e.g.: <section>, <article>, <main> etc.).')
  };
  return createElement(InspectorControls, {
    group: "advanced"
  }, isEntityAvailable && createElement(Fragment, null, createElement(TextControl, {
    __nextHasNoMarginBottom: true,
    label: __('Title'),
    value: title,
    onChange: value => {
      setTitle(value);
    },
    onFocus: event => event.target.select()
  }), createElement(SelectControl, {
    __nextHasNoMarginBottom: true,
    label: __('Area'),
    labelPosition: "top",
    options: areaOptions,
    value: area,
    onChange: setArea
  })), createElement(SelectControl, {
    __nextHasNoMarginBottom: true,
    label: __('HTML element'),
    options: [{
      label: sprintf(
      /* translators: %s: HTML tag based on area. */
      __('Default based on area (%s)'), `<${defaultWrapper}>`),
      value: ''
    }, {
      label: '<header>',
      value: 'header'
    }, {
      label: '<main>',
      value: 'main'
    }, {
      label: '<section>',
      value: 'section'
    }, {
      label: '<article>',
      value: 'article'
    }, {
      label: '<aside>',
      value: 'aside'
    }, {
      label: '<footer>',
      value: 'footer'
    }, {
      label: '<div>',
      value: 'div'
    }],
    value: tagName || '',
    onChange: value => setAttributes({
      tagName: value
    }),
    help: htmlElementMessages[tagName]
  }), !hasInnerBlocks && createElement(TemplatePartImportControls, {
    area: area,
    setAttributes: setAttributes
  }));
}
//# sourceMappingURL=advanced-controls.js.map
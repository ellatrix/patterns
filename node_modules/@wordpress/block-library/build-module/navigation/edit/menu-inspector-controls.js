import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { privateApis as blockEditorPrivateApis, InspectorControls, store as blockEditorStore } from '@wordpress/block-editor';
import { PanelBody, __experimentalHStack as HStack, __experimentalHeading as Heading, Spinner } from '@wordpress/components';
import { useSelect } from '@wordpress/data';
import { __, sprintf } from '@wordpress/i18n';
/**
 * Internal dependencies
 */

import NavigationMenuSelector from './navigation-menu-selector';
import { unlock } from '../../private-apis';
import DeletedNavigationWarning from './deleted-navigation-warning';
import useNavigationMenu from '../use-navigation-menu';
/* translators: %s: The name of a menu. */

const actionLabel = __("Switch to '%s'");

const MainContent = _ref => {
  let {
    clientId,
    currentMenuId,
    isLoading,
    isNavigationMenuMissing,
    onCreateNew
  } = _ref;
  const {
    OffCanvasEditor,
    LeafMoreMenu
  } = unlock(blockEditorPrivateApis); // Provide a hierarchy of clientIds for the given Navigation block (clientId).
  // This is required else the list view will display the entire block tree.

  const clientIdsTree = useSelect(select => {
    const {
      __unstableGetClientIdsTree
    } = select(blockEditorStore);
    return __unstableGetClientIdsTree(clientId);
  }, [clientId]);
  const {
    navigationMenu
  } = useNavigationMenu(currentMenuId);

  if (currentMenuId && isNavigationMenuMissing) {
    return createElement("p", null, __('Select or create a menu'));
  }

  if (currentMenuId && isNavigationMenuMissing) {
    return createElement(DeletedNavigationWarning, {
      onCreateNew: onCreateNew
    });
  }

  if (isLoading) {
    return createElement(Spinner, null);
  }

  const description = navigationMenu ? sprintf(
  /* translators: %s: The name of a menu. */
  __('Structure for navigation menu: %s'), (navigationMenu === null || navigationMenu === void 0 ? void 0 : navigationMenu.title) || __('Untitled menu')) : __('You have not yet created any menus. Displaying a list of your Pages');
  return createElement(OffCanvasEditor, {
    blocks: clientIdsTree,
    isExpanded: true,
    LeafMoreMenu: LeafMoreMenu,
    description: description
  });
};

const MenuInspectorControls = props => {
  const {
    createNavigationMenuIsSuccess,
    createNavigationMenuIsError,
    currentMenuId = null,
    onCreateNew,
    onSelectClassicMenu,
    onSelectNavigationMenu,
    isManageMenusButtonDisabled
  } = props;
  return createElement(InspectorControls, {
    group: "list"
  }, createElement(PanelBody, {
    title: process.env.IS_GUTENBERG_PLUGIN ? null : __('Menu')
  }, createElement(HStack, {
    className: "wp-block-navigation-off-canvas-editor__header"
  }, createElement(Heading, {
    className: "wp-block-navigation-off-canvas-editor__title",
    level: 2
  }, __('Menu')), createElement(NavigationMenuSelector, {
    currentMenuId: currentMenuId,
    onSelectClassicMenu: onSelectClassicMenu,
    onSelectNavigationMenu: onSelectNavigationMenu,
    onCreateNew: onCreateNew,
    createNavigationMenuIsSuccess: createNavigationMenuIsSuccess,
    createNavigationMenuIsError: createNavigationMenuIsError,
    actionLabel: actionLabel,
    isManageMenusButtonDisabled: isManageMenusButtonDisabled
  })), createElement(MainContent, props)));
};

export default MenuInspectorControls;
//# sourceMappingURL=menu-inspector-controls.js.map
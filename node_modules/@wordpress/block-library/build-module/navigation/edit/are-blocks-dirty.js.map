{"version":3,"sources":["@wordpress/block-library/src/navigation/edit/are-blocks-dirty.js"],"names":["areBlocksDirty","originalBlocks","blocks","isDeepEqual","prop","x","name","y","shouldSkip","undefined","Object","keys","length","hasOwnProperty"],"mappings":"AAAA,OAAO,SAASA,cAAT,CAAyBC,cAAzB,EAAyCC,MAAzC,EAAkD;AACxD,SAAO,CAAEC,WAAW,CAAEF,cAAF,EAAkBC,MAAlB,EAA0B,CAAEE,IAAF,EAAQC,CAAR,KAAe;AAC5D;AACA;AACA;AACA;AACA,QAAK,CAAAA,CAAC,SAAD,IAAAA,CAAC,WAAD,YAAAA,CAAC,CAAEC,IAAH,MAAY,gBAAZ,IAAgCF,IAAI,KAAK,aAA9C,EAA8D;AAC7D,aAAO,IAAP;AACA;AACD,GARmB,CAApB;AASA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMD,WAAW,GAAG,CAAEE,CAAF,EAAKE,CAAL,EAAQC,UAAR,KAAwB;AAC3C,MAAKH,CAAC,KAAKE,CAAX,EAAe;AACd,WAAO,IAAP;AACA,GAFD,MAEO,IACN,OAAOF,CAAP,KAAa,QAAb,IACAA,CAAC,KAAK,IADN,IAEAA,CAAC,KAAKI,SAFN,IAGA,OAAOF,CAAP,KAAa,QAHb,IAIAA,CAAC,KAAK,IAJN,IAKAA,CAAC,KAAKE,SANA,EAOL;AACD,QAAKC,MAAM,CAACC,IAAP,CAAaN,CAAb,EAAiBO,MAAjB,KAA4BF,MAAM,CAACC,IAAP,CAAaJ,CAAb,EAAiBK,MAAlD,EAA2D,OAAO,KAAP;;AAE3D,SAAM,MAAMR,IAAZ,IAAoBC,CAApB,EAAwB;AACvB,UAAKE,CAAC,CAACM,cAAF,CAAkBT,IAAlB,CAAL,EAAgC;AAC/B;AACA,YAAKI,UAAU,IAAIA,UAAU,CAAEJ,IAAF,EAAQC,CAAR,CAA7B,EAA2C;AAC1C,iBAAO,IAAP;AACA;;AAED,YAAK,CAAEF,WAAW,CAAEE,CAAC,CAAED,IAAF,CAAH,EAAaG,CAAC,CAAEH,IAAF,CAAd,EAAwBI,UAAxB,CAAlB,EACC,OAAO,KAAP;AACD,OARD,MAQO,OAAO,KAAP;AACP;;AAED,WAAO,IAAP;AACA;;AAED,SAAO,KAAP;AACA,CA7BD","sourcesContent":["export function areBlocksDirty( originalBlocks, blocks ) {\n\treturn ! isDeepEqual( originalBlocks, blocks, ( prop, x ) => {\n\t\t// Skip inner blocks of page list during comparison as they\n\t\t// are **always** controlled and may be updated async due to\n\t\t// syncing with entity records. Left unchecked this would\n\t\t// inadvertently trigger the dirty state.\n\t\tif ( x?.name === 'core/page-list' && prop === 'innerBlocks' ) {\n\t\t\treturn true;\n\t\t}\n\t} );\n}\n\n/**\n * Conditionally compares two candidates for deep equality.\n * Provides an option to skip a given property of an object during comparison.\n *\n * @param {*}                  x          1st candidate for comparison\n * @param {*}                  y          2nd candidate for comparison\n * @param {Function|undefined} shouldSkip a function which can be used to skip a given property of an object.\n * @return {boolean}                      whether the two candidates are deeply equal.\n */\nconst isDeepEqual = ( x, y, shouldSkip ) => {\n\tif ( x === y ) {\n\t\treturn true;\n\t} else if (\n\t\ttypeof x === 'object' &&\n\t\tx !== null &&\n\t\tx !== undefined &&\n\t\ttypeof y === 'object' &&\n\t\ty !== null &&\n\t\ty !== undefined\n\t) {\n\t\tif ( Object.keys( x ).length !== Object.keys( y ).length ) return false;\n\n\t\tfor ( const prop in x ) {\n\t\t\tif ( y.hasOwnProperty( prop ) ) {\n\t\t\t\t// Afford skipping a given property of an object.\n\t\t\t\tif ( shouldSkip && shouldSkip( prop, x ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tif ( ! isDeepEqual( x[ prop ], y[ prop ], shouldSkip ) )\n\t\t\t\t\treturn false;\n\t\t\t} else return false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n"]}
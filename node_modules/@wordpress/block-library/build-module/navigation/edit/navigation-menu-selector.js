import { createElement, Fragment } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { MenuGroup, MenuItem, MenuItemsChoice, DropdownMenu } from '@wordpress/components';
import { moreVertical } from '@wordpress/icons';
import { __, sprintf } from '@wordpress/i18n';
import { decodeEntities } from '@wordpress/html-entities';
import { useEffect, useMemo, useState } from '@wordpress/element';
/**
 * Internal dependencies
 */

import useNavigationMenu from '../use-navigation-menu';
import useNavigationEntities from '../use-navigation-entities';

function NavigationMenuSelector(_ref) {
  let {
    currentMenuId,
    onSelectNavigationMenu,
    onSelectClassicMenu,
    onCreateNew,
    actionLabel,
    createNavigationMenuIsSuccess,
    createNavigationMenuIsError
  } = _ref;

  /* translators: %s: The name of a menu. */
  const createActionLabel = __("Create from '%s'");

  const [selectorLabel, setSelectorLabel] = useState('');
  const [isCreatingMenu, setIsCreatingMenu] = useState(false);
  actionLabel = actionLabel || createActionLabel;
  const {
    menus: classicMenus
  } = useNavigationEntities();
  const {
    navigationMenus,
    hasResolvedNavigationMenus,
    canUserCreateNavigationMenu,
    canSwitchNavigationMenu
  } = useNavigationMenu();
  const menuChoices = useMemo(() => {
    return (navigationMenus === null || navigationMenus === void 0 ? void 0 : navigationMenus.map((_ref2, index) => {
      let {
        id,
        title
      } = _ref2;
      const label = decodeEntities(title === null || title === void 0 ? void 0 : title.rendered) ||
      /* translators: %s is the index of the menu in the list of menus. */
      sprintf(__('(no title %s)'), index + 1);

      if (id === currentMenuId && !isCreatingMenu) {
        setSelectorLabel(
        /* translators: %s is the name of a navigation menu. */
        sprintf(__('You are currently editing %s'), label));
      }

      return {
        value: id,
        label,
        ariaLabel: sprintf(actionLabel, label)
      };
    })) || [];
  }, [currentMenuId, navigationMenus, actionLabel, isCreatingMenu]);
  const hasNavigationMenus = !!(navigationMenus !== null && navigationMenus !== void 0 && navigationMenus.length);
  const hasClassicMenus = !!(classicMenus !== null && classicMenus !== void 0 && classicMenus.length);
  const showNavigationMenus = !!canSwitchNavigationMenu;
  const showClassicMenus = !!canUserCreateNavigationMenu;
  const noMenuSelected = hasNavigationMenus && !currentMenuId;
  const noBlockMenus = !hasNavigationMenus && hasResolvedNavigationMenus;
  const menuUnavailable = hasResolvedNavigationMenus && currentMenuId === null;
  useEffect(() => {
    if (!hasResolvedNavigationMenus && !canUserCreateNavigationMenu) {
      setSelectorLabel(__('Loading …'));
    } else if (noMenuSelected || noBlockMenus || menuUnavailable) {
      setSelectorLabel(__('Choose or create a Navigation menu'));
    }

    if (isCreatingMenu && (createNavigationMenuIsSuccess || createNavigationMenuIsError)) {
      setIsCreatingMenu(false);
    }
  }, [hasResolvedNavigationMenus, createNavigationMenuIsSuccess]);
  const NavigationMenuSelectorDropdown = createElement(DropdownMenu, {
    label: selectorLabel,
    icon: moreVertical,
    toggleProps: {
      isSmall: true
    }
  }, _ref3 => {
    let {
      onClose
    } = _ref3;
    return createElement(Fragment, null, showNavigationMenus && hasNavigationMenus && createElement(MenuGroup, {
      label: __('Menus')
    }, createElement(MenuItemsChoice, {
      value: currentMenuId,
      onSelect: menuId => {
        setSelectorLabel(__('Loading …'));
        setIsCreatingMenu(true);
        onSelectNavigationMenu(menuId);
        onClose();
      },
      choices: menuChoices,
      disabled: isCreatingMenu
    })), showClassicMenus && hasClassicMenus && createElement(MenuGroup, {
      label: __('Import Classic Menus')
    }, classicMenus === null || classicMenus === void 0 ? void 0 : classicMenus.map(menu => {
      const label = decodeEntities(menu.name);
      return createElement(MenuItem, {
        onClick: () => {
          setSelectorLabel(__('Loading …'));
          setIsCreatingMenu(true);
          onSelectClassicMenu(menu);
          onClose();
        },
        key: menu.id,
        "aria-label": sprintf(createActionLabel, label),
        disabled: isCreatingMenu
      }, label);
    })), canUserCreateNavigationMenu && createElement(MenuGroup, {
      label: __('Tools')
    }, createElement(MenuItem, {
      disabled: isCreatingMenu,
      onClick: () => {
        onClose();
        onCreateNew();
        setIsCreatingMenu(true);
        setSelectorLabel(__('Loading …'));
      }
    }, __('Create new menu'))));
  });
  return NavigationMenuSelectorDropdown;
}

export default NavigationMenuSelector;
//# sourceMappingURL=navigation-menu-selector.js.map
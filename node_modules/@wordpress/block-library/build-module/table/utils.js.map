{"version":3,"sources":["@wordpress/block-library/src/table/utils.js"],"names":["normalizeRowColSpan","rowColSpan","parsedValue","parseInt","Number","isInteger","undefined","toString"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,mBAAT,CAA8BC,UAA9B,EAA2C;AACjD,QAAMC,WAAW,GAAGC,QAAQ,CAAEF,UAAF,EAAc,EAAd,CAA5B;;AACA,MAAK,CAAEG,MAAM,CAACC,SAAP,CAAkBH,WAAlB,CAAP,EAAyC;AACxC,WAAOI,SAAP;AACA;;AACD,SAAOJ,WAAW,GAAG,CAAd,IAAmBA,WAAW,KAAK,CAAnC,GACJI,SADI,GAEJJ,WAAW,CAACK,QAAZ,EAFH;AAGA","sourcesContent":["/**\n * Normalize the rowspan/colspan value.\n * Returns undefined if the parameter is not a positive number\n * or the default value (1) for rowspan/colspan.\n *\n * @param {number|undefined} rowColSpan rowspan/colspan value.\n *\n * @return {string|undefined} normalized rowspan/colspan value.\n */\nexport function normalizeRowColSpan( rowColSpan ) {\n\tconst parsedValue = parseInt( rowColSpan, 10 );\n\tif ( ! Number.isInteger( parsedValue ) ) {\n\t\treturn undefined;\n\t}\n\treturn parsedValue < 0 || parsedValue === 1\n\t\t? undefined\n\t\t: parsedValue.toString();\n}\n"]}
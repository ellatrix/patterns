{"version":3,"sources":["@wordpress/block-library/src/heading/autogenerate-anchors.js"],"names":["removeAccents","anchors","getTextWithoutMarkup","text","dummyElement","document","createElement","innerHTML","innerText","getSlug","content","replace","toLowerCase","generateAnchor","clientId","slug","anchor","i","Object","values","includes","setAnchor"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,aAAP,MAA0B,gBAA1B;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,OAAO,GAAG,EAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,oBAAoB,GAAKC,IAAF,IAAY;AACxC,QAAMC,YAAY,GAAGC,QAAQ,CAACC,aAAT,CAAwB,KAAxB,CAArB;AACAF,EAAAA,YAAY,CAACG,SAAb,GAAyBJ,IAAzB;AACA,SAAOC,YAAY,CAACI,SAApB;AACA,CAJD;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,OAAO,GAAKC,OAAF,IAAe;AAC9B;AACA,SACCV,aAAa,CAAEE,oBAAoB,CAAEQ,OAAF,CAAtB,CAAb,CACC;AADD,GAEEC,OAFF,CAEW,kBAFX,EAE+B,GAF/B,EAGC;AAHD,GAIEC,WAJF,GAKC;AALD,GAMED,OANF,CAMW,cANX,EAM2B,EAN3B,CADD;AASA,CAXD;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAME,cAAc,GAAG,CAAEC,QAAF,EAAYJ,OAAZ,KAAyB;AACtD,QAAMK,IAAI,GAAGN,OAAO,CAAEC,OAAF,CAApB,CADsD,CAEtD;AACA;;AACA,MAAK,OAAOK,IAAZ,EAAmB;AAClB,WAAO,IAAP;AACA;;AAED,SAAOd,OAAO,CAAEa,QAAF,CAAd;AAEA,MAAIE,MAAM,GAAGD,IAAb;AACA,MAAIE,CAAC,GAAG,CAAR,CAXsD,CAatD;;AACA,SAAQC,MAAM,CAACC,MAAP,CAAelB,OAAf,EAAyBmB,QAAzB,CAAmCJ,MAAnC,CAAR,EAAsD;AACrDC,IAAAA,CAAC,IAAI,CAAL;AACAD,IAAAA,MAAM,GAAGD,IAAI,GAAG,GAAP,GAAaE,CAAtB;AACA;;AAED,SAAOD,MAAP;AACA,CApBM;AAsBP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMK,SAAS,GAAG,CAAEP,QAAF,EAAYE,MAAZ,KAAwB;AAChDf,EAAAA,OAAO,CAAEa,QAAF,CAAP,GAAsBE,MAAtB;AACA,CAFM","sourcesContent":["/**\n * External dependencies\n */\nimport removeAccents from 'remove-accents';\n\n/**\n * Object map tracking anchors.\n *\n * @type {Record<string, string | null>}\n */\nconst anchors = {};\n\n/**\n * Returns the text without markup.\n *\n * @param {string} text The text.\n *\n * @return {string} The text without markup.\n */\nconst getTextWithoutMarkup = ( text ) => {\n\tconst dummyElement = document.createElement( 'div' );\n\tdummyElement.innerHTML = text;\n\treturn dummyElement.innerText;\n};\n\n/**\n * Get the slug from the content.\n *\n * @param {string} content The block content.\n *\n * @return {string} Returns the slug.\n */\nconst getSlug = ( content ) => {\n\t// Get the slug.\n\treturn (\n\t\tremoveAccents( getTextWithoutMarkup( content ) )\n\t\t\t// Convert anything that's not a letter or number to a hyphen.\n\t\t\t.replace( /[^\\p{L}\\p{N}]+/gu, '-' )\n\t\t\t// Convert to lowercase\n\t\t\t.toLowerCase()\n\t\t\t// Remove any remaining leading or trailing hyphens.\n\t\t\t.replace( /(^-+)|(-+$)/g, '' )\n\t);\n};\n\n/**\n * Generate the anchor for a heading.\n *\n * @param {string} clientId The block ID.\n * @param {string} content  The block content.\n *\n * @return {string|null} Return the heading anchor.\n */\nexport const generateAnchor = ( clientId, content ) => {\n\tconst slug = getSlug( content );\n\t// If slug is empty, then return null.\n\t// Returning null instead of an empty string allows us to check again when the content changes.\n\tif ( '' === slug ) {\n\t\treturn null;\n\t}\n\n\tdelete anchors[ clientId ];\n\n\tlet anchor = slug;\n\tlet i = 0;\n\n\t// If the anchor already exists in another heading, append -i.\n\twhile ( Object.values( anchors ).includes( anchor ) ) {\n\t\ti += 1;\n\t\tanchor = slug + '-' + i;\n\t}\n\n\treturn anchor;\n};\n\n/**\n * Set the anchor for a heading.\n *\n * @param {string}      clientId The block ID.\n * @param {string|null} anchor   The block anchor.\n */\nexport const setAnchor = ( clientId, anchor ) => {\n\tanchors[ clientId ] = anchor;\n};\n"]}
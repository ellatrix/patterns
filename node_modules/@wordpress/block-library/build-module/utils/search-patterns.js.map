{"version":3,"sources":["@wordpress/block-library/src/utils/search-patterns.js"],"names":["removeAccents","normalizeSearchInput","input","trim","toLowerCase","getPatternSearchRank","pattern","searchValue","normalizedSearchValue","normalizedTitle","title","rank","startsWith","searchTerms","split","hasMatchedTerms","every","searchTerm","includes","searchPatterns","patterns","rankedPatterns","map","filter","sort","rank1","rank2"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,aAAP,MAA0B,gBAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,oBAAT,GAA4C;AAAA,MAAbC,KAAa,uEAAL,EAAK;AAClD;AACAA,EAAAA,KAAK,GAAGF,aAAa,CAAEE,KAAF,CAArB,CAFkD,CAIlD;;AACAA,EAAAA,KAAK,GAAGA,KAAK,CAACC,IAAN,GAAaC,WAAb,EAAR;AAEA,SAAOF,KAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,oBAAT,CAA+BC,OAA/B,EAAwCC,WAAxC,EAAsD;AAC5D,QAAMC,qBAAqB,GAAGP,oBAAoB,CAAEM,WAAF,CAAlD;AACA,QAAME,eAAe,GAAGR,oBAAoB,CAAEK,OAAO,CAACI,KAAV,CAA5C;AAEA,MAAIC,IAAI,GAAG,CAAX;;AAEA,MAAKH,qBAAqB,KAAKC,eAA/B,EAAiD;AAChDE,IAAAA,IAAI,IAAI,EAAR;AACA,GAFD,MAEO,IAAKF,eAAe,CAACG,UAAhB,CAA4BJ,qBAA5B,CAAL,EAA2D;AACjEG,IAAAA,IAAI,IAAI,EAAR;AACA,GAFM,MAEA;AACN,UAAME,WAAW,GAAGL,qBAAqB,CAACM,KAAtB,CAA6B,GAA7B,CAApB;AACA,UAAMC,eAAe,GAAGF,WAAW,CAACG,KAAZ,CAAqBC,UAAF,IAC1CR,eAAe,CAACS,QAAhB,CAA0BD,UAA1B,CADuB,CAAxB,CAFM,CAMN;;AACA,QAAKF,eAAL,EAAuB;AACtBJ,MAAAA,IAAI,IAAI,EAAR;AACA;AACD;;AAED,SAAOA,IAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASQ,cAAT,GAA2D;AAAA,MAAlCC,QAAkC,uEAAvB,EAAuB;AAAA,MAAnBb,WAAmB,uEAAL,EAAK;;AACjE,MAAK,CAAEA,WAAP,EAAqB;AACpB,WAAOa,QAAP;AACA;;AAED,QAAMC,cAAc,GAAGD,QAAQ,CAC7BE,GADqB,CACdhB,OAAF,IAAe;AACpB,WAAO,CAAEA,OAAF,EAAWD,oBAAoB,CAAEC,OAAF,EAAWC,WAAX,CAA/B,CAAP;AACA,GAHqB,EAIrBgB,MAJqB,CAIb;AAAA,QAAE,GAAIZ,IAAJ,CAAF;AAAA,WAAkBA,IAAI,GAAG,CAAzB;AAAA,GAJa,CAAvB;AAMAU,EAAAA,cAAc,CAACG,IAAf,CAAqB;AAAA,QAAE,GAAIC,KAAJ,CAAF;AAAA,QAAe,GAAIC,KAAJ,CAAf;AAAA,WAAgCA,KAAK,GAAGD,KAAxC;AAAA,GAArB;AACA,SAAOJ,cAAc,CAACC,GAAf,CAAoB;AAAA,QAAE,CAAEhB,OAAF,CAAF;AAAA,WAAmBA,OAAnB;AAAA,GAApB,CAAP;AACA","sourcesContent":["/**\n * External dependencies\n */\nimport removeAccents from 'remove-accents';\n\n/**\n * Sanitizes the search input string.\n *\n * @param {string} input The search input to normalize.\n *\n * @return {string} The normalized search input.\n */\nexport function normalizeSearchInput( input = '' ) {\n\t// Disregard diacritics.\n\tinput = removeAccents( input );\n\n\t// Trim & Lowercase.\n\tinput = input.trim().toLowerCase();\n\n\treturn input;\n}\n\n/**\n * Get the search rank for a given pattern and a specific search term.\n *\n * @param {Object} pattern     Pattern to rank\n * @param {string} searchValue Search term\n * @return {number} A pattern search rank\n */\nexport function getPatternSearchRank( pattern, searchValue ) {\n\tconst normalizedSearchValue = normalizeSearchInput( searchValue );\n\tconst normalizedTitle = normalizeSearchInput( pattern.title );\n\n\tlet rank = 0;\n\n\tif ( normalizedSearchValue === normalizedTitle ) {\n\t\trank += 30;\n\t} else if ( normalizedTitle.startsWith( normalizedSearchValue ) ) {\n\t\trank += 20;\n\t} else {\n\t\tconst searchTerms = normalizedSearchValue.split( ' ' );\n\t\tconst hasMatchedTerms = searchTerms.every( ( searchTerm ) =>\n\t\t\tnormalizedTitle.includes( searchTerm )\n\t\t);\n\n\t\t// Prefer pattern with every search word in the title.\n\t\tif ( hasMatchedTerms ) {\n\t\t\trank += 10;\n\t\t}\n\t}\n\n\treturn rank;\n}\n\n/**\n * Filters an pattern list given a search term.\n *\n * @param {Array}  patterns    Item list\n * @param {string} searchValue Search input.\n *\n * @return {Array} Filtered pattern list.\n */\nexport function searchPatterns( patterns = [], searchValue = '' ) {\n\tif ( ! searchValue ) {\n\t\treturn patterns;\n\t}\n\n\tconst rankedPatterns = patterns\n\t\t.map( ( pattern ) => {\n\t\t\treturn [ pattern, getPatternSearchRank( pattern, searchValue ) ];\n\t\t} )\n\t\t.filter( ( [ , rank ] ) => rank > 0 );\n\n\trankedPatterns.sort( ( [ , rank1 ], [ , rank2 ] ) => rank2 - rank1 );\n\treturn rankedPatterns.map( ( [ pattern ] ) => pattern );\n}\n"]}
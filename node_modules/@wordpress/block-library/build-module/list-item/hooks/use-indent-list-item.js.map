{"version":3,"sources":["@wordpress/block-library/src/list-item/hooks/use-indent-list-item.js"],"names":["useCallback","useSelect","useDispatch","store","blockEditorStore","createBlock","cloneBlock","useIndentListItem","clientId","canIndent","select","getBlockIndex","replaceBlocks","selectionChange","multiSelect","getBlock","getPreviousBlockClientId","getSelectionStart","getSelectionEnd","hasMultiSelection","getMultiSelectedBlockClientIds","_hasMultiSelection","clientIds","clonedBlocks","map","_clientId","previousSiblingId","newListItem","innerBlocks","length","push","selectionStart","selectionEnd","attributeKey","offset"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,WAAT,QAA4B,oBAA5B;AACA,SAASC,SAAT,EAAoBC,WAApB,QAAuC,iBAAvC;AACA,SAASC,KAAK,IAAIC,gBAAlB,QAA0C,yBAA1C;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,mBAAxC;AAEA,eAAe,SAASC,iBAAT,CAA4BC,QAA5B,EAAuC;AACrD,QAAMC,SAAS,GAAGR,SAAS,CACxBS,MAAF,IAAcA,MAAM,CAAEN,gBAAF,CAAN,CAA2BO,aAA3B,CAA0CH,QAA1C,IAAuD,CAD3C,EAE1B,CAAEA,QAAF,CAF0B,CAA3B;AAIA,QAAM;AAAEI,IAAAA,aAAF;AAAiBC,IAAAA,eAAjB;AAAkCC,IAAAA;AAAlC,MACLZ,WAAW,CAAEE,gBAAF,CADZ;AAEA,QAAM;AACLW,IAAAA,QADK;AAELC,IAAAA,wBAFK;AAGLC,IAAAA,iBAHK;AAILC,IAAAA,eAJK;AAKLC,IAAAA,iBALK;AAMLC,IAAAA;AANK,MAOFnB,SAAS,CAAEG,gBAAF,CAPb;AAQA,SAAO,CACNK,SADM,EAENT,WAAW,CAAE,MAAM;AAAA;;AAClB,UAAMqB,kBAAkB,GAAGF,iBAAiB,EAA5C;;AACA,UAAMG,SAAS,GAAGD,kBAAkB,GACjCD,8BAA8B,EADG,GAEjC,CAAEZ,QAAF,CAFH;AAGA,UAAMe,YAAY,GAAGD,SAAS,CAACE,GAAV,CAAiBC,SAAF,IACnCnB,UAAU,CAAES,QAAQ,CAAEU,SAAF,CAAV,CADU,CAArB;AAGA,UAAMC,iBAAiB,GAAGV,wBAAwB,CAAER,QAAF,CAAlD;AACA,UAAMmB,WAAW,GAAGrB,UAAU,CAAES,QAAQ,CAAEW,iBAAF,CAAV,CAA9B,CATkB,CAUlB;;AACA,QAAK,2BAAEC,WAAW,CAACC,WAAd,kDAAE,sBAAyBC,MAA3B,CAAL,EAAyC;AACxCF,MAAAA,WAAW,CAACC,WAAZ,GAA0B,CAAEvB,WAAW,CAAE,WAAF,CAAb,CAA1B;AACA,KAbiB,CAclB;AACA;AACA;;;AACAsB,IAAAA,WAAW,CAACC,WAAZ,CACCD,WAAW,CAACC,WAAZ,CAAwBC,MAAxB,GAAiC,CADlC,EAEED,WAFF,CAEcE,IAFd,CAEoB,GAAGP,YAFvB,EAjBkB,CAqBlB;AACA;;AACA,UAAMQ,cAAc,GAAGd,iBAAiB,EAAxC;AACA,UAAMe,YAAY,GAAGd,eAAe,EAApC,CAxBkB,CAyBlB;AACA;AACA;;AACAN,IAAAA,aAAa,CACZ,CAAEc,iBAAF,EAAqB,GAAGJ,SAAxB,CADY,EAEZ,CAAEK,WAAF,CAFY,CAAb;;AAIA,QAAK,CAAEN,kBAAP,EAA4B;AAC3BR,MAAAA,eAAe,CACdU,YAAY,CAAE,CAAF,CAAZ,CAAkBf,QADJ,EAEdwB,YAAY,CAACC,YAFC,EAGdD,YAAY,CAACxB,QAAb,KAA0BuB,cAAc,CAACvB,QAAzC,GACGuB,cAAc,CAACG,MADlB,GAEGF,YAAY,CAACE,MALF,EAMdF,YAAY,CAACE,MANC,CAAf;AAQA,KATD,MASO;AACNpB,MAAAA,WAAW,CACVS,YAAY,CAAE,CAAF,CAAZ,CAAkBf,QADR,EAEVe,YAAY,CAAEA,YAAY,CAACM,MAAb,GAAsB,CAAxB,CAAZ,CAAwCrB,QAF9B,CAAX;AAIA;AACD,GA/CU,EA+CR,CAAEA,QAAF,CA/CQ,CAFL,CAAP;AAmDA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useCallback } from '@wordpress/element';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { store as blockEditorStore } from '@wordpress/block-editor';\nimport { createBlock, cloneBlock } from '@wordpress/blocks';\n\nexport default function useIndentListItem( clientId ) {\n\tconst canIndent = useSelect(\n\t\t( select ) => select( blockEditorStore ).getBlockIndex( clientId ) > 0,\n\t\t[ clientId ]\n\t);\n\tconst { replaceBlocks, selectionChange, multiSelect } =\n\t\tuseDispatch( blockEditorStore );\n\tconst {\n\t\tgetBlock,\n\t\tgetPreviousBlockClientId,\n\t\tgetSelectionStart,\n\t\tgetSelectionEnd,\n\t\thasMultiSelection,\n\t\tgetMultiSelectedBlockClientIds,\n\t} = useSelect( blockEditorStore );\n\treturn [\n\t\tcanIndent,\n\t\tuseCallback( () => {\n\t\t\tconst _hasMultiSelection = hasMultiSelection();\n\t\t\tconst clientIds = _hasMultiSelection\n\t\t\t\t? getMultiSelectedBlockClientIds()\n\t\t\t\t: [ clientId ];\n\t\t\tconst clonedBlocks = clientIds.map( ( _clientId ) =>\n\t\t\t\tcloneBlock( getBlock( _clientId ) )\n\t\t\t);\n\t\t\tconst previousSiblingId = getPreviousBlockClientId( clientId );\n\t\t\tconst newListItem = cloneBlock( getBlock( previousSiblingId ) );\n\t\t\t// If the sibling has no innerBlocks, create a new `list` block.\n\t\t\tif ( ! newListItem.innerBlocks?.length ) {\n\t\t\t\tnewListItem.innerBlocks = [ createBlock( 'core/list' ) ];\n\t\t\t}\n\t\t\t// A list item usually has one `list`, but it's possible to have\n\t\t\t// more. So we need to preserve the previous `list` blocks and\n\t\t\t// merge the new blocks to the last `list`.\n\t\t\tnewListItem.innerBlocks[\n\t\t\t\tnewListItem.innerBlocks.length - 1\n\t\t\t].innerBlocks.push( ...clonedBlocks );\n\n\t\t\t// We get the selection start/end here, because when\n\t\t\t// we replace blocks, the selection is updated too.\n\t\t\tconst selectionStart = getSelectionStart();\n\t\t\tconst selectionEnd = getSelectionEnd();\n\t\t\t// Replace the previous sibling of the block being indented and the indented blocks,\n\t\t\t// with a new block whose attributes are equal to the ones of the previous sibling and\n\t\t\t// whose descendants are the children of the previous sibling, followed by the indented blocks.\n\t\t\treplaceBlocks(\n\t\t\t\t[ previousSiblingId, ...clientIds ],\n\t\t\t\t[ newListItem ]\n\t\t\t);\n\t\t\tif ( ! _hasMultiSelection ) {\n\t\t\t\tselectionChange(\n\t\t\t\t\tclonedBlocks[ 0 ].clientId,\n\t\t\t\t\tselectionEnd.attributeKey,\n\t\t\t\t\tselectionEnd.clientId === selectionStart.clientId\n\t\t\t\t\t\t? selectionStart.offset\n\t\t\t\t\t\t: selectionEnd.offset,\n\t\t\t\t\tselectionEnd.offset\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tmultiSelect(\n\t\t\t\t\tclonedBlocks[ 0 ].clientId,\n\t\t\t\t\tclonedBlocks[ clonedBlocks.length - 1 ].clientId\n\t\t\t\t);\n\t\t\t}\n\t\t}, [ clientId ] ),\n\t];\n}\n"]}
{"version":3,"sources":["@wordpress/block-library/src/list-item/hooks/use-space.js"],"names":["useRefEffect","SPACE","store","blockEditorStore","useSelect","useIndentListItem","useSpace","clientId","getSelectionStart","getSelectionEnd","canIndent","indentListItem","element","onKeyDown","event","keyCode","shiftKey","altKey","metaKey","ctrlKey","defaultPrevented","selectionStart","selectionEnd","offset","preventDefault","addEventListener","removeEventListener"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,YAAT,QAA6B,oBAA7B;AACA,SAASC,KAAT,QAAsB,qBAAtB;AACA,SAASC,KAAK,IAAIC,gBAAlB,QAA0C,yBAA1C;AACA,SAASC,SAAT,QAA0B,iBAA1B;AAEA;AACA;AACA;;AACA,OAAOC,iBAAP,MAA8B,wBAA9B;AAEA,eAAe,SAASC,QAAT,CAAmBC,QAAnB,EAA8B;AAC5C,QAAM;AAAEC,IAAAA,iBAAF;AAAqBC,IAAAA;AAArB,MACLL,SAAS,CAAED,gBAAF,CADV;AAEA,QAAM,CAAEO,SAAF,EAAaC,cAAb,IAAgCN,iBAAiB,CAAEE,QAAF,CAAvD;AAEA,SAAOP,YAAY,CAChBY,OAAF,IAAe;AACd,aAASC,SAAT,CAAoBC,KAApB,EAA4B;AAC3B,YAAM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,QAAX;AAAqBC,QAAAA,MAArB;AAA6BC,QAAAA,OAA7B;AAAsCC,QAAAA;AAAtC,UAAkDL,KAAxD;;AAEA,UACCA,KAAK,CAACM,gBAAN,IACA,CAAEV,SADF,IAEAK,OAAO,KAAKd,KAFZ,IAGA;AACAe,MAAAA,QAJA,IAKAC,MALA,IAMAC,OANA,IAOAC,OARD,EASE;AACD;AACA;;AAED,YAAME,cAAc,GAAGb,iBAAiB,EAAxC;AACA,YAAMc,YAAY,GAAGb,eAAe,EAApC;;AACA,UACCY,cAAc,CAACE,MAAf,KAA0B,CAA1B,IACAD,YAAY,CAACC,MAAb,KAAwB,CAFzB,EAGE;AACDT,QAAAA,KAAK,CAACU,cAAN;AACAb,QAAAA,cAAc;AACd;AACD;;AAEDC,IAAAA,OAAO,CAACa,gBAAR,CAA0B,SAA1B,EAAqCZ,SAArC;AACA,WAAO,MAAM;AACZD,MAAAA,OAAO,CAACc,mBAAR,CAA6B,SAA7B,EAAwCb,SAAxC;AACA,KAFD;AAGA,GAjCiB,EAkClB,CAAEH,SAAF,EAAaC,cAAb,CAlCkB,CAAnB;AAoCA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useRefEffect } from '@wordpress/compose';\nimport { SPACE } from '@wordpress/keycodes';\nimport { store as blockEditorStore } from '@wordpress/block-editor';\nimport { useSelect } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport useIndentListItem from './use-indent-list-item';\n\nexport default function useSpace( clientId ) {\n\tconst { getSelectionStart, getSelectionEnd } =\n\t\tuseSelect( blockEditorStore );\n\tconst [ canIndent, indentListItem ] = useIndentListItem( clientId );\n\n\treturn useRefEffect(\n\t\t( element ) => {\n\t\t\tfunction onKeyDown( event ) {\n\t\t\t\tconst { keyCode, shiftKey, altKey, metaKey, ctrlKey } = event;\n\n\t\t\t\tif (\n\t\t\t\t\tevent.defaultPrevented ||\n\t\t\t\t\t! canIndent ||\n\t\t\t\t\tkeyCode !== SPACE ||\n\t\t\t\t\t// Only override when no modifiers are pressed.\n\t\t\t\t\tshiftKey ||\n\t\t\t\t\taltKey ||\n\t\t\t\t\tmetaKey ||\n\t\t\t\t\tctrlKey\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst selectionStart = getSelectionStart();\n\t\t\t\tconst selectionEnd = getSelectionEnd();\n\t\t\t\tif (\n\t\t\t\t\tselectionStart.offset === 0 &&\n\t\t\t\t\tselectionEnd.offset === 0\n\t\t\t\t) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tindentListItem();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telement.addEventListener( 'keydown', onKeyDown );\n\t\t\treturn () => {\n\t\t\t\telement.removeEventListener( 'keydown', onKeyDown );\n\t\t\t};\n\t\t},\n\t\t[ canIndent, indentListItem ]\n\t);\n}\n"]}
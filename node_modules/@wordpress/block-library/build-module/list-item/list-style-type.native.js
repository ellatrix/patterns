import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { View, Text } from 'react-native';
/**
 * WordPress dependencies
 */

import { Icon } from '@wordpress/components';
import { Platform } from '@wordpress/element';
import { usePreferredColorSchemeStyle } from '@wordpress/compose';
/**
 * Internal dependencies
 */

import styles from './style.scss';
import { circle, circleOutline, square } from './icons';
const DEFAULT_ICON_SIZE = 6;

function getListNumberIndex(start, blockIndex, reversed, numberOfListItems) {
  if (start) {
    return reversed ? numberOfListItems - 1 + start - blockIndex : start + blockIndex;
  }

  if (reversed) {
    return numberOfListItems - blockIndex;
  }

  return blockIndex + 1;
}

function OrderedList(_ref) {
  let {
    blockIndex,
    color,
    fontSize,
    numberOfListItems,
    reversed,
    start,
    style
  } = _ref;
  const orderedStyles = [styles['wp-block-list-item__list-item-container--ordered'], Platform.isIOS && styles['wp-block-list-item__list-item-ordered--default'], Platform.isIOS && (style === null || style === void 0 ? void 0 : style.fontSize) && styles['wp-block-list-item__list-item-ordered--custom']];
  const numberStyle = [{
    fontSize,
    color
  }];
  const currentIndex = getListNumberIndex(start, blockIndex, reversed, numberOfListItems);
  return createElement(View, {
    style: orderedStyles
  }, createElement(Text, {
    style: numberStyle
  }, currentIndex, "."));
}

function IconList(_ref2) {
  let {
    fontSize,
    color,
    defaultFontSize,
    indentationLevel
  } = _ref2;
  const iconSize = parseInt(fontSize * DEFAULT_ICON_SIZE / defaultFontSize, 10);
  let listIcon = circle(iconSize, color);

  if (indentationLevel === 1) {
    listIcon = circleOutline(iconSize, color);
  } else if (indentationLevel > 1) {
    listIcon = square(iconSize, color);
  }

  const listStyles = [styles['wp-block-list-item__list-item-container'], {
    marginTop: fontSize / 2
  }];
  return createElement(View, {
    style: listStyles
  }, createElement(Icon, {
    icon: listIcon,
    size: iconSize
  }));
}

export default function ListStyleType(_ref3) {
  var _style$baseColors, _style$baseColors$typ, _style$baseColors2, _style$baseColors2$co;

  let {
    blockIndex,
    indentationLevel,
    numberOfListItems,
    ordered,
    reversed,
    start,
    style
  } = _ref3;
  let defaultFontSize = styles['wp-block-list-item__list-item--default'].fontSize;

  if (style !== null && style !== void 0 && (_style$baseColors = style.baseColors) !== null && _style$baseColors !== void 0 && (_style$baseColors$typ = _style$baseColors.typography) !== null && _style$baseColors$typ !== void 0 && _style$baseColors$typ.fontSize) {
    defaultFontSize = parseInt(style.baseColors.typography.fontSize, 10);
  }

  const fontSize = parseInt(style !== null && style !== void 0 && style.fontSize ? style.fontSize : defaultFontSize, 10);
  const colorWithPreferredScheme = usePreferredColorSchemeStyle(styles['wp-block-list-item__list-item--default'], styles['wp-block-list-item__list-item--default--dark']);
  const defaultColor = style !== null && style !== void 0 && (_style$baseColors2 = style.baseColors) !== null && _style$baseColors2 !== void 0 && (_style$baseColors2$co = _style$baseColors2.color) !== null && _style$baseColors2$co !== void 0 && _style$baseColors2$co.text ? style.baseColors.color.text : colorWithPreferredScheme.color;
  const color = style !== null && style !== void 0 && style.color ? style.color : defaultColor;

  if (ordered) {
    return createElement(OrderedList, {
      blockIndex: blockIndex,
      color: color,
      fontSize: fontSize,
      numberOfListItems: numberOfListItems,
      reversed: reversed,
      start: start,
      style: style
    });
  }

  return createElement(IconList, {
    color: color,
    defaultFontSize: defaultFontSize,
    fontSize: fontSize,
    indentationLevel: indentationLevel
  });
}
//# sourceMappingURL=list-style-type.native.js.map
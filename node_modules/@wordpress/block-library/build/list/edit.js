"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Edit;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _blockEditor = require("@wordpress/block-editor");

var _components = require("@wordpress/components");

var _data = require("@wordpress/data");

var _i18n = require("@wordpress/i18n");

var _icons = require("@wordpress/icons");

var _blocks = require("@wordpress/blocks");

var _deprecated = _interopRequireDefault(require("@wordpress/deprecated"));

var _orderedListSettings = _interopRequireDefault(require("./ordered-list-settings"));

var _utils = require("./utils");

var _tagName = _interopRequireDefault(require("./tag-name"));

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const TEMPLATE = [['core/list-item']];
const NATIVE_MARGIN_SPACING = 8;
/**
 * At the moment, deprecations don't handle create blocks from attributes
 * (like when using CPT templates). For this reason, this hook is necessary
 * to avoid breaking templates using the old list block format.
 *
 * @param {Object} attributes Block attributes.
 * @param {string} clientId   Block client ID.
 */

function useMigrateOnLoad(attributes, clientId) {
  const registry = (0, _data.useRegistry)();
  const {
    updateBlockAttributes,
    replaceInnerBlocks
  } = (0, _data.useDispatch)(_blockEditor.store);
  (0, _element.useEffect)(() => {
    // As soon as the block is loaded, migrate it to the new version.
    if (!attributes.values) {
      return;
    }

    const [newAttributes, newInnerBlocks] = (0, _utils.migrateToListV2)(attributes);
    (0, _deprecated.default)('Value attribute on the list block', {
      since: '6.0',
      version: '6.5',
      alternative: 'inner blocks'
    });
    registry.batch(() => {
      updateBlockAttributes(clientId, newAttributes);
      replaceInnerBlocks(clientId, newInnerBlocks);
    });
  }, [attributes.values]);
}

function useOutdentList(clientId) {
  const {
    canOutdent
  } = (0, _data.useSelect)(innerSelect => {
    const {
      getBlockRootClientId,
      getBlock
    } = innerSelect(_blockEditor.store);
    const parentId = getBlockRootClientId(clientId);
    return {
      canOutdent: !!parentId && getBlock(parentId).name === 'core/list-item'
    };
  }, [clientId]);
  const {
    replaceBlocks,
    selectionChange
  } = (0, _data.useDispatch)(_blockEditor.store);
  const {
    getBlockRootClientId,
    getBlockAttributes,
    getBlock
  } = (0, _data.useSelect)(_blockEditor.store);
  return [canOutdent, (0, _element.useCallback)(() => {
    const parentBlockId = getBlockRootClientId(clientId);
    const parentBlockAttributes = getBlockAttributes(parentBlockId); // Create a new parent block without the inner blocks.

    const newParentBlock = (0, _blocks.createBlock)('core/list-item', parentBlockAttributes);
    const {
      innerBlocks
    } = getBlock(clientId); // Replace the parent block with a new parent block without inner blocks,
    // and make the inner blocks siblings of the parent.

    replaceBlocks([parentBlockId], [newParentBlock, ...innerBlocks]); // Select the last child of the list being outdent.

    selectionChange(innerBlocks[innerBlocks.length - 1].clientId);
  }, [clientId])];
}

function IndentUI(_ref) {
  let {
    clientId
  } = _ref;
  const [canOutdent, outdentList] = useOutdentList(clientId);
  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_components.ToolbarButton, {
    icon: (0, _i18n.isRTL)() ? _icons.formatOutdentRTL : _icons.formatOutdent,
    title: (0, _i18n.__)('Outdent'),
    describedBy: (0, _i18n.__)('Outdent list item'),
    disabled: !canOutdent,
    onClick: outdentList
  }));
}

function Edit(_ref2) {
  let {
    attributes,
    setAttributes,
    clientId,
    style
  } = _ref2;
  const blockProps = (0, _blockEditor.useBlockProps)({ ...(_element.Platform.isNative && {
      style
    })
  });
  const innerBlocksProps = (0, _blockEditor.useInnerBlocksProps)(blockProps, {
    allowedBlocks: ['core/list-item'],
    template: TEMPLATE,
    templateLock: false,
    templateInsertUpdatesSelection: true,
    ...(_element.Platform.isNative && {
      marginVertical: NATIVE_MARGIN_SPACING,
      marginHorizontal: NATIVE_MARGIN_SPACING,
      useCompactList: true
    })
  });
  useMigrateOnLoad(attributes, clientId);
  const {
    ordered,
    type,
    reversed,
    start
  } = attributes;
  const controls = (0, _element.createElement)(_blockEditor.BlockControls, {
    group: "block"
  }, (0, _element.createElement)(_components.ToolbarButton, {
    icon: (0, _i18n.isRTL)() ? _icons.formatListBulletsRTL : _icons.formatListBullets,
    title: (0, _i18n.__)('Unordered'),
    describedBy: (0, _i18n.__)('Convert to unordered list'),
    isActive: ordered === false,
    onClick: () => {
      setAttributes({
        ordered: false
      });
    }
  }), (0, _element.createElement)(_components.ToolbarButton, {
    icon: (0, _i18n.isRTL)() ? _icons.formatListNumberedRTL : _icons.formatListNumbered,
    title: (0, _i18n.__)('Ordered'),
    describedBy: (0, _i18n.__)('Convert to ordered list'),
    isActive: ordered === true,
    onClick: () => {
      setAttributes({
        ordered: true
      });
    }
  }), (0, _element.createElement)(IndentUI, {
    clientId: clientId
  }));
  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_tagName.default, (0, _extends2.default)({
    ordered: ordered,
    reversed: reversed,
    start: start,
    type: type
  }, innerBlocksProps)), controls, ordered && (0, _element.createElement)(_orderedListSettings.default, {
    setAttributes: setAttributes,
    ordered: ordered,
    reversed: reversed,
    start: start
  }));
}
//# sourceMappingURL=edit.js.map
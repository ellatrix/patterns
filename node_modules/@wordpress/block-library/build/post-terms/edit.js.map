{"version":3,"sources":["@wordpress/block-library/src/post-terms/edit.js"],"names":["ALLOWED_FORMATS","PostTermsEdit","attributes","clientId","context","isSelected","setAttributes","insertBlocksAfter","term","textAlign","separator","prefix","suffix","postId","postType","selectedTerm","select","getTaxonomy","coreStore","taxonomy","visibility","publicly_queryable","postTerms","hasPostTerms","isLoading","hasPost","blockInformation","blockProps","className","title","nextAlign","nextValue","value","map","postTerm","id","link","event","preventDefault","name","reduce","prev","curr","labels","no_terms"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tAlignmentToolbar,\n\tInspectorControls,\n\tBlockControls,\n\tuseBlockProps,\n\tuseBlockDisplayInformation,\n\tRichText,\n} from '@wordpress/block-editor';\nimport { createBlock, getDefaultBlockName } from '@wordpress/blocks';\nimport { Spinner, TextControl } from '@wordpress/components';\nimport { useSelect } from '@wordpress/data';\nimport { decodeEntities } from '@wordpress/html-entities';\nimport { __ } from '@wordpress/i18n';\nimport { store as coreStore } from '@wordpress/core-data';\n\n/**\n * Internal dependencies\n */\nimport usePostTerms from './use-post-terms';\n\n// Allowed formats for the prefix and suffix fields.\nconst ALLOWED_FORMATS = [\n\t'core/bold',\n\t'core/image',\n\t'core/italic',\n\t'core/link',\n\t'core/strikethrough',\n\t'core/text-color',\n];\n\nexport default function PostTermsEdit( {\n\tattributes,\n\tclientId,\n\tcontext,\n\tisSelected,\n\tsetAttributes,\n\tinsertBlocksAfter,\n} ) {\n\tconst { term, textAlign, separator, prefix, suffix } = attributes;\n\tconst { postId, postType } = context;\n\n\tconst selectedTerm = useSelect(\n\t\t( select ) => {\n\t\t\tif ( ! term ) return {};\n\t\t\tconst { getTaxonomy } = select( coreStore );\n\t\t\tconst taxonomy = getTaxonomy( term );\n\t\t\treturn taxonomy?.visibility?.publicly_queryable ? taxonomy : {};\n\t\t},\n\t\t[ term ]\n\t);\n\tconst { postTerms, hasPostTerms, isLoading } = usePostTerms( {\n\t\tpostId,\n\t\tterm: selectedTerm,\n\t} );\n\tconst hasPost = postId && postType;\n\tconst blockInformation = useBlockDisplayInformation( clientId );\n\tconst blockProps = useBlockProps( {\n\t\tclassName: classnames( {\n\t\t\t[ `has-text-align-${ textAlign }` ]: textAlign,\n\t\t\t[ `taxonomy-${ term }` ]: term,\n\t\t} ),\n\t} );\n\n\tif ( ! hasPost || ! term ) {\n\t\treturn <div { ...blockProps }>{ blockInformation.title }</div>;\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<BlockControls>\n\t\t\t\t<AlignmentToolbar\n\t\t\t\t\tvalue={ textAlign }\n\t\t\t\t\tonChange={ ( nextAlign ) => {\n\t\t\t\t\t\tsetAttributes( { textAlign: nextAlign } );\n\t\t\t\t\t} }\n\t\t\t\t/>\n\t\t\t</BlockControls>\n\t\t\t<InspectorControls group=\"advanced\">\n\t\t\t\t<TextControl\n\t\t\t\t\t__nextHasNoMarginBottom\n\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\tlabel={ __( 'Separator' ) }\n\t\t\t\t\tvalue={ separator || '' }\n\t\t\t\t\tonChange={ ( nextValue ) => {\n\t\t\t\t\t\tsetAttributes( { separator: nextValue } );\n\t\t\t\t\t} }\n\t\t\t\t\thelp={ __( 'Enter character(s) used to separate terms.' ) }\n\t\t\t\t/>\n\t\t\t</InspectorControls>\n\t\t\t<div { ...blockProps }>\n\t\t\t\t{ isLoading && <Spinner /> }\n\t\t\t\t{ ! isLoading && hasPostTerms && ( isSelected || prefix ) && (\n\t\t\t\t\t<RichText\n\t\t\t\t\t\tallowedFormats={ ALLOWED_FORMATS }\n\t\t\t\t\t\tclassName=\"wp-block-post-terms__prefix\"\n\t\t\t\t\t\tmultiline={ false }\n\t\t\t\t\t\taria-label={ __( 'Prefix' ) }\n\t\t\t\t\t\tplaceholder={ __( 'Prefix' ) + ' ' }\n\t\t\t\t\t\tvalue={ prefix }\n\t\t\t\t\t\tonChange={ ( value ) =>\n\t\t\t\t\t\t\tsetAttributes( { prefix: value } )\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttagName=\"span\"\n\t\t\t\t\t/>\n\t\t\t\t) }\n\t\t\t\t{ ! isLoading &&\n\t\t\t\t\thasPostTerms &&\n\t\t\t\t\tpostTerms\n\t\t\t\t\t\t.map( ( postTerm ) => (\n\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\tkey={ postTerm.id }\n\t\t\t\t\t\t\t\thref={ postTerm.link }\n\t\t\t\t\t\t\t\tonClick={ ( event ) => event.preventDefault() }\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{ decodeEntities( postTerm.name ) }\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t) )\n\t\t\t\t\t\t.reduce( ( prev, curr ) => (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t{ prev }\n\t\t\t\t\t\t\t\t<span className=\"wp-block-post-terms__separator\">\n\t\t\t\t\t\t\t\t\t{ separator || ' ' }\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t{ curr }\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t) ) }\n\t\t\t\t{ ! isLoading &&\n\t\t\t\t\t! hasPostTerms &&\n\t\t\t\t\t( selectedTerm?.labels?.no_terms ||\n\t\t\t\t\t\t__( 'Term items not found.' ) ) }\n\t\t\t\t{ ! isLoading && hasPostTerms && ( isSelected || suffix ) && (\n\t\t\t\t\t<RichText\n\t\t\t\t\t\tallowedFormats={ ALLOWED_FORMATS }\n\t\t\t\t\t\tclassName=\"wp-block-post-terms__suffix\"\n\t\t\t\t\t\tmultiline={ false }\n\t\t\t\t\t\taria-label={ __( 'Suffix' ) }\n\t\t\t\t\t\tplaceholder={ ' ' + __( 'Suffix' ) }\n\t\t\t\t\t\tvalue={ suffix }\n\t\t\t\t\t\tonChange={ ( value ) =>\n\t\t\t\t\t\t\tsetAttributes( { suffix: value } )\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttagName=\"span\"\n\t\t\t\t\t\t__unstableOnSplitAtEnd={ () =>\n\t\t\t\t\t\t\tinsertBlocksAfter(\n\t\t\t\t\t\t\t\tcreateBlock( getDefaultBlockName() )\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t) }\n\t\t\t</div>\n\t\t</>\n\t);\n}\n"]}
{"version":3,"sources":["@wordpress/block-library/src/list-item/hooks/use-split.js"],"names":["useSplit","clientId","isAfter","getBlock","blockEditorStore","value","block","current","content","name","attributes"],"mappings":";;;;;;;AAGA;;AACA;;AACA;;AACA;;AANA;AACA;AACA;AAMe,SAASA,QAAT,CAAmBC,QAAnB,EAA8B;AAC5C;AACA;AACA;AACA;AACA;AACA,QAAMC,OAAO,GAAG,qBAAQ,KAAR,CAAhB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAe,qBAAWC,kBAAX,CAArB;AACA,SAAO,0BACJC,KAAF,IAAa;AACZ,UAAMC,KAAK,GAAGH,QAAQ,CAAEF,QAAF,CAAtB;;AACA,QAAKC,OAAO,CAACK,OAAb,EAAuB;AACtB,aAAO,wBAAYD,KAAZ,EAAmB;AACzBE,QAAAA,OAAO,EAAEH;AADgB,OAAnB,CAAP;AAGA;;AACDH,IAAAA,OAAO,CAACK,OAAR,GAAkB,IAAlB;AACA,WAAO,yBAAaD,KAAK,CAACG,IAAnB,EAAyB,EAC/B,GAAGH,KAAK,CAACI,UADsB;AAE/BF,MAAAA,OAAO,EAAEH;AAFsB,KAAzB,CAAP;AAIA,GAbK,EAcN,CAAEJ,QAAF,EAAYE,QAAZ,CAdM,CAAP;AAgBA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useCallback, useRef } from '@wordpress/element';\nimport { useSelect } from '@wordpress/data';\nimport { store as blockEditorStore } from '@wordpress/block-editor';\nimport { cloneBlock, createBlock } from '@wordpress/blocks';\n\nexport default function useSplit( clientId ) {\n\t// We can not rely on the isAfterOriginal parameter of the callback,\n\t// because if the value after the split is empty isAfterOriginal is false\n\t// while the value is in fact after the original. So to avoid that issue we use\n\t// a flag where the first execution of the callback is false (it is the before value)\n\t// and the second execution is true, it is the after value.\n\tconst isAfter = useRef( false );\n\tconst { getBlock } = useSelect( blockEditorStore );\n\treturn useCallback(\n\t\t( value ) => {\n\t\t\tconst block = getBlock( clientId );\n\t\t\tif ( isAfter.current ) {\n\t\t\t\treturn cloneBlock( block, {\n\t\t\t\t\tcontent: value,\n\t\t\t\t} );\n\t\t\t}\n\t\t\tisAfter.current = true;\n\t\t\treturn createBlock( block.name, {\n\t\t\t\t...block.attributes,\n\t\t\t\tcontent: value,\n\t\t\t} );\n\t\t},\n\t\t[ clientId, getBlock ]\n\t);\n}\n"]}
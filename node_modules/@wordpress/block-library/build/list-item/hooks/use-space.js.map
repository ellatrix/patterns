{"version":3,"sources":["@wordpress/block-library/src/list-item/hooks/use-space.js"],"names":["useSpace","clientId","getSelectionStart","getSelectionEnd","blockEditorStore","canIndent","indentListItem","element","onKeyDown","event","keyCode","shiftKey","altKey","metaKey","ctrlKey","defaultPrevented","SPACE","selectionStart","selectionEnd","offset","preventDefault","addEventListener","removeEventListener"],"mappings":";;;;;;;;;AAGA;;AACA;;AACA;;AACA;;AAKA;;AAXA;AACA;AACA;;AAMA;AACA;AACA;AAGe,SAASA,QAAT,CAAmBC,QAAnB,EAA8B;AAC5C,QAAM;AAAEC,IAAAA,iBAAF;AAAqBC,IAAAA;AAArB,MACL,qBAAWC,kBAAX,CADD;AAEA,QAAM,CAAEC,SAAF,EAAaC,cAAb,IAAgC,gCAAmBL,QAAnB,CAAtC;AAEA,SAAO,2BACJM,OAAF,IAAe;AACd,aAASC,SAAT,CAAoBC,KAApB,EAA4B;AAC3B,YAAM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,QAAX;AAAqBC,QAAAA,MAArB;AAA6BC,QAAAA,OAA7B;AAAsCC,QAAAA;AAAtC,UAAkDL,KAAxD;;AAEA,UACCA,KAAK,CAACM,gBAAN,IACA,CAAEV,SADF,IAEAK,OAAO,KAAKM,eAFZ,IAGA;AACAL,MAAAA,QAJA,IAKAC,MALA,IAMAC,OANA,IAOAC,OARD,EASE;AACD;AACA;;AAED,YAAMG,cAAc,GAAGf,iBAAiB,EAAxC;AACA,YAAMgB,YAAY,GAAGf,eAAe,EAApC;;AACA,UACCc,cAAc,CAACE,MAAf,KAA0B,CAA1B,IACAD,YAAY,CAACC,MAAb,KAAwB,CAFzB,EAGE;AACDV,QAAAA,KAAK,CAACW,cAAN;AACAd,QAAAA,cAAc;AACd;AACD;;AAEDC,IAAAA,OAAO,CAACc,gBAAR,CAA0B,SAA1B,EAAqCb,SAArC;AACA,WAAO,MAAM;AACZD,MAAAA,OAAO,CAACe,mBAAR,CAA6B,SAA7B,EAAwCd,SAAxC;AACA,KAFD;AAGA,GAjCK,EAkCN,CAAEH,SAAF,EAAaC,cAAb,CAlCM,CAAP;AAoCA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useRefEffect } from '@wordpress/compose';\nimport { SPACE } from '@wordpress/keycodes';\nimport { store as blockEditorStore } from '@wordpress/block-editor';\nimport { useSelect } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport useIndentListItem from './use-indent-list-item';\n\nexport default function useSpace( clientId ) {\n\tconst { getSelectionStart, getSelectionEnd } =\n\t\tuseSelect( blockEditorStore );\n\tconst [ canIndent, indentListItem ] = useIndentListItem( clientId );\n\n\treturn useRefEffect(\n\t\t( element ) => {\n\t\t\tfunction onKeyDown( event ) {\n\t\t\t\tconst { keyCode, shiftKey, altKey, metaKey, ctrlKey } = event;\n\n\t\t\t\tif (\n\t\t\t\t\tevent.defaultPrevented ||\n\t\t\t\t\t! canIndent ||\n\t\t\t\t\tkeyCode !== SPACE ||\n\t\t\t\t\t// Only override when no modifiers are pressed.\n\t\t\t\t\tshiftKey ||\n\t\t\t\t\taltKey ||\n\t\t\t\t\tmetaKey ||\n\t\t\t\t\tctrlKey\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst selectionStart = getSelectionStart();\n\t\t\t\tconst selectionEnd = getSelectionEnd();\n\t\t\t\tif (\n\t\t\t\t\tselectionStart.offset === 0 &&\n\t\t\t\t\tselectionEnd.offset === 0\n\t\t\t\t) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tindentListItem();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telement.addEventListener( 'keydown', onKeyDown );\n\t\t\treturn () => {\n\t\t\t\telement.removeEventListener( 'keydown', onKeyDown );\n\t\t\t};\n\t\t},\n\t\t[ canIndent, indentListItem ]\n\t);\n}\n"]}
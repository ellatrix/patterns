"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = QueryTitleEdit;

var _element = require("@wordpress/element");

var _classnames = _interopRequireDefault(require("classnames"));

var _blockEditor = require("@wordpress/block-editor");

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _headingLevelDropdown = _interopRequireDefault(require("../heading/heading-level-dropdown"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const SUPPORTED_TYPES = ['archive', 'search'];

function QueryTitleEdit(_ref) {
  let {
    attributes: {
      type,
      level,
      textAlign,
      showPrefix,
      showSearchTerm
    },
    setAttributes
  } = _ref;
  const TagName = `h${level}`;
  const blockProps = (0, _blockEditor.useBlockProps)({
    className: (0, _classnames.default)('wp-block-query-title__placeholder', {
      [`has-text-align-${textAlign}`]: textAlign
    })
  });

  if (!SUPPORTED_TYPES.includes(type)) {
    return (0, _element.createElement)("div", blockProps, (0, _element.createElement)(_blockEditor.Warning, null, (0, _i18n.__)('Provided type is not supported.')));
  }

  let titleElement;

  if (type === 'archive') {
    titleElement = (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_blockEditor.InspectorControls, null, (0, _element.createElement)(_components.PanelBody, {
      title: (0, _i18n.__)('Settings')
    }, (0, _element.createElement)(_components.ToggleControl, {
      __nextHasNoMarginBottom: true,
      label: (0, _i18n.__)('Show archive type in title'),
      onChange: () => setAttributes({
        showPrefix: !showPrefix
      }),
      checked: showPrefix
    }))), (0, _element.createElement)(TagName, blockProps, showPrefix ? (0, _i18n.__)('Archive type: Name') : (0, _i18n.__)('Archive title')));
  }

  if (type === 'search') {
    titleElement = (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_blockEditor.InspectorControls, null, (0, _element.createElement)(_components.PanelBody, {
      title: (0, _i18n.__)('Settings')
    }, (0, _element.createElement)(_components.ToggleControl, {
      __nextHasNoMarginBottom: true,
      label: (0, _i18n.__)('Show search term in title'),
      onChange: () => setAttributes({
        showSearchTerm: !showSearchTerm
      }),
      checked: showSearchTerm
    }))), (0, _element.createElement)(TagName, blockProps, showSearchTerm ? (0, _i18n.__)('Search results for: “search term”') : (0, _i18n.__)('Search results')));
  }

  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_blockEditor.BlockControls, {
    group: "block"
  }, (0, _element.createElement)(_headingLevelDropdown.default, {
    selectedLevel: level,
    onChange: newLevel => setAttributes({
      level: newLevel
    })
  }), (0, _element.createElement)(_blockEditor.AlignmentControl, {
    value: textAlign,
    onChange: nextAlign => {
      setAttributes({
        textAlign: nextAlign
      });
    }
  })), titleElement);
}
//# sourceMappingURL=edit.js.map
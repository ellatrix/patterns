"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _components = require("@wordpress/components");

var _icons = require("@wordpress/icons");

var _i18n = require("@wordpress/i18n");

var _htmlEntities = require("@wordpress/html-entities");

var _useNavigationMenu = _interopRequireDefault(require("../use-navigation-menu"));

var _useNavigationEntities = _interopRequireDefault(require("../use-navigation-entities"));

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function NavigationMenuSelector(_ref) {
  let {
    currentMenuId,
    onSelectNavigationMenu,
    onSelectClassicMenu,
    onCreateNew,
    actionLabel,
    createNavigationMenuIsSuccess,
    createNavigationMenuIsError
  } = _ref;

  /* translators: %s: The name of a menu. */
  const createActionLabel = (0, _i18n.__)("Create from '%s'");
  const [selectorLabel, setSelectorLabel] = (0, _element.useState)('');
  const [isCreatingMenu, setIsCreatingMenu] = (0, _element.useState)(false);
  actionLabel = actionLabel || createActionLabel;
  const {
    menus: classicMenus
  } = (0, _useNavigationEntities.default)();
  const {
    navigationMenus,
    hasResolvedNavigationMenus,
    canUserCreateNavigationMenu,
    canSwitchNavigationMenu
  } = (0, _useNavigationMenu.default)();
  const menuChoices = (0, _element.useMemo)(() => {
    return (navigationMenus === null || navigationMenus === void 0 ? void 0 : navigationMenus.map((_ref2, index) => {
      let {
        id,
        title
      } = _ref2;
      const label = (0, _htmlEntities.decodeEntities)(title === null || title === void 0 ? void 0 : title.rendered) ||
      /* translators: %s is the index of the menu in the list of menus. */
      (0, _i18n.sprintf)((0, _i18n.__)('(no title %s)'), index + 1);

      if (id === currentMenuId && !isCreatingMenu) {
        setSelectorLabel(
        /* translators: %s is the name of a navigation menu. */
        (0, _i18n.sprintf)((0, _i18n.__)('You are currently editing %s'), label));
      }

      return {
        value: id,
        label,
        ariaLabel: (0, _i18n.sprintf)(actionLabel, label)
      };
    })) || [];
  }, [currentMenuId, navigationMenus, actionLabel, isCreatingMenu]);
  const hasNavigationMenus = !!(navigationMenus !== null && navigationMenus !== void 0 && navigationMenus.length);
  const hasClassicMenus = !!(classicMenus !== null && classicMenus !== void 0 && classicMenus.length);
  const showNavigationMenus = !!canSwitchNavigationMenu;
  const showClassicMenus = !!canUserCreateNavigationMenu;
  const noMenuSelected = hasNavigationMenus && !currentMenuId;
  const noBlockMenus = !hasNavigationMenus && hasResolvedNavigationMenus;
  const menuUnavailable = hasResolvedNavigationMenus && currentMenuId === null;
  (0, _element.useEffect)(() => {
    if (!hasResolvedNavigationMenus && !canUserCreateNavigationMenu) {
      setSelectorLabel((0, _i18n.__)('Loading …'));
    } else if (noMenuSelected || noBlockMenus || menuUnavailable) {
      setSelectorLabel((0, _i18n.__)('Choose or create a Navigation menu'));
    }

    if (isCreatingMenu && (createNavigationMenuIsSuccess || createNavigationMenuIsError)) {
      setIsCreatingMenu(false);
    }
  }, [hasResolvedNavigationMenus, createNavigationMenuIsSuccess]);
  const NavigationMenuSelectorDropdown = (0, _element.createElement)(_components.DropdownMenu, {
    label: selectorLabel,
    icon: _icons.moreVertical,
    toggleProps: {
      isSmall: true
    }
  }, _ref3 => {
    let {
      onClose
    } = _ref3;
    return (0, _element.createElement)(_element.Fragment, null, showNavigationMenus && hasNavigationMenus && (0, _element.createElement)(_components.MenuGroup, {
      label: (0, _i18n.__)('Menus')
    }, (0, _element.createElement)(_components.MenuItemsChoice, {
      value: currentMenuId,
      onSelect: menuId => {
        setSelectorLabel((0, _i18n.__)('Loading …'));
        setIsCreatingMenu(true);
        onSelectNavigationMenu(menuId);
        onClose();
      },
      choices: menuChoices,
      disabled: isCreatingMenu
    })), showClassicMenus && hasClassicMenus && (0, _element.createElement)(_components.MenuGroup, {
      label: (0, _i18n.__)('Import Classic Menus')
    }, classicMenus === null || classicMenus === void 0 ? void 0 : classicMenus.map(menu => {
      const label = (0, _htmlEntities.decodeEntities)(menu.name);
      return (0, _element.createElement)(_components.MenuItem, {
        onClick: () => {
          setSelectorLabel((0, _i18n.__)('Loading …'));
          setIsCreatingMenu(true);
          onSelectClassicMenu(menu);
          onClose();
        },
        key: menu.id,
        "aria-label": (0, _i18n.sprintf)(createActionLabel, label),
        disabled: isCreatingMenu
      }, label);
    })), canUserCreateNavigationMenu && (0, _element.createElement)(_components.MenuGroup, {
      label: (0, _i18n.__)('Tools')
    }, (0, _element.createElement)(_components.MenuItem, {
      disabled: isCreatingMenu,
      onClick: () => {
        onClose();
        onCreateNew();
        setIsCreatingMenu(true);
        setSelectorLabel((0, _i18n.__)('Loading …'));
      }
    }, (0, _i18n.__)('Create new menu'))));
  });
  return NavigationMenuSelectorDropdown;
}

var _default = NavigationMenuSelector;
exports.default = _default;
//# sourceMappingURL=navigation-menu-selector.js.map
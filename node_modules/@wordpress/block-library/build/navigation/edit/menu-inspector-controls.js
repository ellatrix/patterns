"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _blockEditor = require("@wordpress/block-editor");

var _components = require("@wordpress/components");

var _data = require("@wordpress/data");

var _i18n = require("@wordpress/i18n");

var _navigationMenuSelector = _interopRequireDefault(require("./navigation-menu-selector"));

var _privateApis = require("../../private-apis");

var _deletedNavigationWarning = _interopRequireDefault(require("./deleted-navigation-warning"));

var _useNavigationMenu = _interopRequireDefault(require("../use-navigation-menu"));

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/* translators: %s: The name of a menu. */
const actionLabel = (0, _i18n.__)("Switch to '%s'");

const MainContent = _ref => {
  let {
    clientId,
    currentMenuId,
    isLoading,
    isNavigationMenuMissing,
    onCreateNew
  } = _ref;
  const {
    OffCanvasEditor,
    LeafMoreMenu
  } = (0, _privateApis.unlock)(_blockEditor.privateApis); // Provide a hierarchy of clientIds for the given Navigation block (clientId).
  // This is required else the list view will display the entire block tree.

  const clientIdsTree = (0, _data.useSelect)(select => {
    const {
      __unstableGetClientIdsTree
    } = select(_blockEditor.store);
    return __unstableGetClientIdsTree(clientId);
  }, [clientId]);
  const {
    navigationMenu
  } = (0, _useNavigationMenu.default)(currentMenuId);

  if (currentMenuId && isNavigationMenuMissing) {
    return (0, _element.createElement)("p", null, (0, _i18n.__)('Select or create a menu'));
  }

  if (currentMenuId && isNavigationMenuMissing) {
    return (0, _element.createElement)(_deletedNavigationWarning.default, {
      onCreateNew: onCreateNew
    });
  }

  if (isLoading) {
    return (0, _element.createElement)(_components.Spinner, null);
  }

  const description = navigationMenu ? (0, _i18n.sprintf)(
  /* translators: %s: The name of a menu. */
  (0, _i18n.__)('Structure for navigation menu: %s'), (navigationMenu === null || navigationMenu === void 0 ? void 0 : navigationMenu.title) || (0, _i18n.__)('Untitled menu')) : (0, _i18n.__)('You have not yet created any menus. Displaying a list of your Pages');
  return (0, _element.createElement)(OffCanvasEditor, {
    blocks: clientIdsTree,
    isExpanded: true,
    LeafMoreMenu: LeafMoreMenu,
    description: description
  });
};

const MenuInspectorControls = props => {
  const {
    createNavigationMenuIsSuccess,
    createNavigationMenuIsError,
    currentMenuId = null,
    onCreateNew,
    onSelectClassicMenu,
    onSelectNavigationMenu,
    isManageMenusButtonDisabled
  } = props;
  return (0, _element.createElement)(_blockEditor.InspectorControls, {
    group: "list"
  }, (0, _element.createElement)(_components.PanelBody, {
    title: process.env.IS_GUTENBERG_PLUGIN ? null : (0, _i18n.__)('Menu')
  }, (0, _element.createElement)(_components.__experimentalHStack, {
    className: "wp-block-navigation-off-canvas-editor__header"
  }, (0, _element.createElement)(_components.__experimentalHeading, {
    className: "wp-block-navigation-off-canvas-editor__title",
    level: 2
  }, (0, _i18n.__)('Menu')), (0, _element.createElement)(_navigationMenuSelector.default, {
    currentMenuId: currentMenuId,
    onSelectClassicMenu: onSelectClassicMenu,
    onSelectNavigationMenu: onSelectNavigationMenu,
    onCreateNew: onCreateNew,
    createNavigationMenuIsSuccess: createNavigationMenuIsSuccess,
    createNavigationMenuIsError: createNavigationMenuIsError,
    actionLabel: actionLabel,
    isManageMenusButtonDisabled: isManageMenusButtonDisabled
  })), (0, _element.createElement)(MainContent, props)));
};

var _default = MenuInspectorControls;
exports.default = _default;
//# sourceMappingURL=menu-inspector-controls.js.map
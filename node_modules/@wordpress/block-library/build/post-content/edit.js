"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PostContentEdit;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _i18n = require("@wordpress/i18n");

var _blockEditor = require("@wordpress/block-editor");

var _coreData = require("@wordpress/core-data");

var _hooks = require("../utils/hooks");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function ReadOnlyContent(_ref) {
  let {
    userCanEdit,
    postType,
    postId
  } = _ref;
  const [,, content] = (0, _coreData.useEntityProp)('postType', postType, 'content', postId);
  const blockProps = (0, _blockEditor.useBlockProps)();
  return content !== null && content !== void 0 && content.protected && !userCanEdit ? (0, _element.createElement)("div", blockProps, (0, _element.createElement)(_blockEditor.Warning, null, (0, _i18n.__)('This content is password protected.'))) : (0, _element.createElement)("div", (0, _extends2.default)({}, blockProps, {
    dangerouslySetInnerHTML: {
      __html: content === null || content === void 0 ? void 0 : content.rendered
    }
  }));
}

function EditableContent(_ref2) {
  let {
    context = {}
  } = _ref2;
  const {
    postType,
    postId
  } = context;
  const [blocks, onInput, onChange] = (0, _coreData.useEntityBlockEditor)('postType', postType, {
    id: postId
  });
  const props = (0, _blockEditor.useInnerBlocksProps)((0, _blockEditor.useBlockProps)({
    className: 'entry-content'
  }), {
    value: blocks,
    onInput,
    onChange
  });
  return (0, _element.createElement)("div", props);
}

function Content(props) {
  const {
    context: {
      queryId,
      postType,
      postId
    } = {}
  } = props;
  const isDescendentOfQueryLoop = Number.isFinite(queryId);
  const userCanEdit = (0, _hooks.useCanEditEntity)('postType', postType, postId);
  const isEditable = userCanEdit && !isDescendentOfQueryLoop;
  return isEditable ? (0, _element.createElement)(EditableContent, props) : (0, _element.createElement)(ReadOnlyContent, {
    userCanEdit: userCanEdit,
    postType: postType,
    postId: postId
  });
}

function Placeholder(_ref3) {
  let {
    layoutClassNames
  } = _ref3;
  const blockProps = (0, _blockEditor.useBlockProps)({
    className: layoutClassNames
  });
  return (0, _element.createElement)("div", blockProps, (0, _element.createElement)("p", null, (0, _i18n.__)('This is the Post Content block, it will display all the blocks in any single post or page.')), (0, _element.createElement)("p", null, (0, _i18n.__)('That might be a simple arrangement like consecutive paragraphs in a blog post, or a more elaborate composition that includes image galleries, videos, tables, columns, and any other block types.')), (0, _element.createElement)("p", null, (0, _i18n.__)('If there are any Custom Post Types registered at your site, the Post Content block can display the contents of those entries as well.')));
}

function RecursionError() {
  const blockProps = (0, _blockEditor.useBlockProps)();
  return (0, _element.createElement)("div", blockProps, (0, _element.createElement)(_blockEditor.Warning, null, (0, _i18n.__)('Block cannot be rendered inside itself.')));
}

function PostContentEdit(_ref4) {
  let {
    context,
    attributes,
    __unstableLayoutClassNames: layoutClassNames
  } = _ref4;
  const {
    postId: contextPostId,
    postType: contextPostType
  } = context;
  const {
    layout = {}
  } = attributes;
  const hasAlreadyRendered = (0, _blockEditor.__experimentalUseHasRecursion)(contextPostId);

  if (contextPostId && contextPostType && hasAlreadyRendered) {
    return (0, _element.createElement)(RecursionError, null);
  }

  return (0, _element.createElement)(_blockEditor.__experimentalRecursionProvider, {
    uniqueId: contextPostId
  }, contextPostId && contextPostType ? (0, _element.createElement)(Content, {
    context: context,
    layout: layout
  }) : (0, _element.createElement)(Placeholder, {
    layoutClassNames: layoutClassNames
  }));
}
//# sourceMappingURL=edit.js.map
{"version":3,"sources":["@wordpress/block-library/src/columns/transforms.js"],"names":["MAXIMUM_SELECTED_BLOCKS","transforms","from","type","isMultiBlock","blocks","__experimentalConvert","columnWidth","length","toFixed","innerBlocksTemplate","map","name","attributes","innerBlocks","width","isMatch","selectedBlocksLength","priority","transform","align","backgroundColor","textColor","style","mediaAlt","alt","mediaId","id","mediaPosition","mediaSizeSlug","sizeSlug","mediaType","mediaUrl","url","mediaWidth","verticalAlignment","media","imageAttrs","linkAttrs","href","linkClass","linkDestination","linkTarget","rel","src","reverse","to","flatMap","innerBlock"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport {\n\tcreateBlock,\n\tcreateBlocksFromInnerBlocksTemplate,\n} from '@wordpress/blocks';\n\nconst MAXIMUM_SELECTED_BLOCKS = 6;\n\nconst transforms = {\n\tfrom: [\n\t\t{\n\t\t\ttype: 'block',\n\t\t\tisMultiBlock: true,\n\t\t\tblocks: [ '*' ],\n\t\t\t__experimentalConvert: ( blocks ) => {\n\t\t\t\tconst columnWidth = +( 100 / blocks.length ).toFixed( 2 );\n\t\t\t\tconst innerBlocksTemplate = blocks.map(\n\t\t\t\t\t( { name, attributes, innerBlocks } ) => [\n\t\t\t\t\t\t'core/column',\n\t\t\t\t\t\t{ width: `${ columnWidth }%` },\n\t\t\t\t\t\t[ [ name, { ...attributes }, innerBlocks ] ],\n\t\t\t\t\t]\n\t\t\t\t);\n\t\t\t\treturn createBlock(\n\t\t\t\t\t'core/columns',\n\t\t\t\t\t{},\n\t\t\t\t\tcreateBlocksFromInnerBlocksTemplate( innerBlocksTemplate )\n\t\t\t\t);\n\t\t\t},\n\t\t\tisMatch: ( { length: selectedBlocksLength }, blocks ) => {\n\t\t\t\t// If a user is trying to transform a single Columns block, skip\n\t\t\t\t// the transformation. Enabling this functiontionality creates\n\t\t\t\t// nested Columns blocks resulting in an unintuitive user experience.\n\t\t\t\t// Multiple Columns blocks can still be transformed.\n\t\t\t\tif (\n\t\t\t\t\tblocks.length === 1 &&\n\t\t\t\t\tblocks[ 0 ].name === 'core/columns'\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn (\n\t\t\t\t\tselectedBlocksLength &&\n\t\t\t\t\tselectedBlocksLength <= MAXIMUM_SELECTED_BLOCKS\n\t\t\t\t);\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\ttype: 'block',\n\t\t\tblocks: [ 'core/media-text' ],\n\t\t\tpriority: 1,\n\t\t\ttransform: ( attributes, innerBlocks ) => {\n\t\t\t\tconst {\n\t\t\t\t\talign,\n\t\t\t\t\tbackgroundColor,\n\t\t\t\t\ttextColor,\n\t\t\t\t\tstyle,\n\t\t\t\t\tmediaAlt: alt,\n\t\t\t\t\tmediaId: id,\n\t\t\t\t\tmediaPosition,\n\t\t\t\t\tmediaSizeSlug: sizeSlug,\n\t\t\t\t\tmediaType,\n\t\t\t\t\tmediaUrl: url,\n\t\t\t\t\tmediaWidth,\n\t\t\t\t\tverticalAlignment,\n\t\t\t\t} = attributes;\n\t\t\t\tlet media;\n\t\t\t\tif ( mediaType === 'image' || ! mediaType ) {\n\t\t\t\t\tconst imageAttrs = { id, alt, url, sizeSlug };\n\t\t\t\t\tconst linkAttrs = {\n\t\t\t\t\t\thref: attributes.href,\n\t\t\t\t\t\tlinkClass: attributes.linkClass,\n\t\t\t\t\t\tlinkDestination: attributes.linkDestination,\n\t\t\t\t\t\tlinkTarget: attributes.linkTarget,\n\t\t\t\t\t\trel: attributes.rel,\n\t\t\t\t\t};\n\t\t\t\t\tmedia = [ 'core/image', { ...imageAttrs, ...linkAttrs } ];\n\t\t\t\t} else {\n\t\t\t\t\tmedia = [ 'core/video', { id, src: url } ];\n\t\t\t\t}\n\t\t\t\tconst innerBlocksTemplate = [\n\t\t\t\t\t[ 'core/column', { width: `${ mediaWidth }%` }, [ media ] ],\n\t\t\t\t\t[\n\t\t\t\t\t\t'core/column',\n\t\t\t\t\t\t{ width: `${ 100 - mediaWidth }%` },\n\t\t\t\t\t\tinnerBlocks,\n\t\t\t\t\t],\n\t\t\t\t];\n\t\t\t\tif ( mediaPosition === 'right' ) {\n\t\t\t\t\tinnerBlocksTemplate.reverse();\n\t\t\t\t}\n\t\t\t\treturn createBlock(\n\t\t\t\t\t'core/columns',\n\t\t\t\t\t{\n\t\t\t\t\t\talign,\n\t\t\t\t\t\tbackgroundColor,\n\t\t\t\t\t\ttextColor,\n\t\t\t\t\t\tstyle,\n\t\t\t\t\t\tverticalAlignment,\n\t\t\t\t\t},\n\t\t\t\t\tcreateBlocksFromInnerBlocksTemplate( innerBlocksTemplate )\n\t\t\t\t);\n\t\t\t},\n\t\t},\n\t],\n\tto: [\n\t\t{\n\t\t\ttype: 'block',\n\t\t\tblocks: [ '*' ],\n\t\t\ttransform: ( attributes, innerBlocks ) =>\n\t\t\t\tinnerBlocks.flatMap( ( innerBlock ) => innerBlock.innerBlocks ),\n\t\t},\n\t],\n};\n\nexport default transforms;\n"]}
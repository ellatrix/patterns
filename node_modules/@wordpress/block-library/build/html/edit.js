"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = HTMLEdit;

var _element = require("@wordpress/element");

var _i18n = require("@wordpress/i18n");

var _blockEditor = require("@wordpress/block-editor");

var _components = require("@wordpress/components");

var _preview = _interopRequireDefault(require("./preview"));

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function HTMLEdit(_ref) {
  let {
    attributes,
    setAttributes,
    isSelected
  } = _ref;
  const [isPreview, setIsPreview] = (0, _element.useState)();
  const isDisabled = (0, _element.useContext)(_components.Disabled.Context);

  function switchToPreview() {
    setIsPreview(true);
  }

  function switchToHTML() {
    setIsPreview(false);
  }

  return (0, _element.createElement)("div", (0, _blockEditor.useBlockProps)({
    className: 'block-library-html__edit'
  }), (0, _element.createElement)(_blockEditor.BlockControls, null, (0, _element.createElement)(_components.ToolbarGroup, null, (0, _element.createElement)(_components.ToolbarButton, {
    className: "components-tab-button",
    isPressed: !isPreview,
    onClick: switchToHTML
  }, "HTML"), (0, _element.createElement)(_components.ToolbarButton, {
    className: "components-tab-button",
    isPressed: isPreview,
    onClick: switchToPreview
  }, (0, _i18n.__)('Preview')))), isPreview || isDisabled ? (0, _element.createElement)(_preview.default, {
    content: attributes.content,
    isSelected: isSelected
  }) : (0, _element.createElement)(_blockEditor.PlainText, {
    value: attributes.content,
    onChange: content => setAttributes({
      content
    }),
    placeholder: (0, _i18n.__)('Write HTMLâ€¦'),
    "aria-label": (0, _i18n.__)('HTML')
  }));
}
//# sourceMappingURL=edit.js.map
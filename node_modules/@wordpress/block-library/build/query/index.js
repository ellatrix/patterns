"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.settings = exports.name = exports.metadata = exports.init = void 0;

var _icons = require("@wordpress/icons");

var _hooks = require("@wordpress/hooks");

var _initBlock = _interopRequireDefault(require("../utils/init-block"));

var _edit = _interopRequireDefault(require("./edit"));

var _save = _interopRequireDefault(require("./save"));

var _variations = _interopRequireDefault(require("./variations"));

var _deprecated = _interopRequireDefault(require("./deprecated"));

var _hooks2 = _interopRequireDefault(require("./hooks"));

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const metadata = {
  $schema: "https://schemas.wp.org/trunk/block.json",
  apiVersion: 2,
  name: "core/query",
  title: "Query Loop",
  category: "theme",
  description: "An advanced block that allows displaying post types based on different query parameters and visual configurations.",
  textdomain: "default",
  attributes: {
    queryId: {
      type: "number"
    },
    query: {
      type: "object",
      "default": {
        perPage: null,
        pages: 0,
        offset: 0,
        postType: "post",
        order: "desc",
        orderBy: "date",
        author: "",
        search: "",
        exclude: [],
        sticky: "",
        inherit: true,
        taxQuery: null,
        parents: []
      }
    },
    tagName: {
      type: "string",
      "default": "div"
    },
    displayLayout: {
      type: "object",
      "default": {
        type: "list"
      }
    },
    namespace: {
      type: "string"
    }
  },
  providesContext: {
    queryId: "queryId",
    query: "query",
    displayLayout: "displayLayout"
  },
  supports: {
    align: ["wide", "full"],
    anchor: true,
    html: false,
    __experimentalLayout: true
  },
  editorStyle: "wp-block-query-editor"
};
exports.metadata = metadata;
const {
  name
} = metadata;
exports.name = name;
const settings = {
  icon: _icons.loop,
  edit: _edit.default,
  save: _save.default,
  variations: _variations.default,
  deprecated: _deprecated.default
};
exports.settings = settings;

const init = () => {
  (0, _hooks.addFilter)('editor.BlockEdit', 'core/query', _hooks2.default);
  return (0, _initBlock.default)({
    name,
    metadata,
    settings
  });
};

exports.init = init;
//# sourceMappingURL=index.js.map
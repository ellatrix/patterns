{"version":3,"sources":["@wordpress/block-library/src/index.native.js"],"names":["coreBlocks","paragraph","image","heading","gallery","list","listItem","quote","shortcode","archives","audio","button","calendar","categories","code","columns","column","cover","embed","file","html","mediaText","latestComments","latestPosts","missing","more","nextpage","preformatted","pullquote","rss","search","separator","reusableBlock","spacer","table","tagCloud","textColumns","verse","video","classic","buttons","socialLink","socialLinks","reduce","accumulator","block","name","registerBlockVariations","metadata","settings","variations","sort","a","b","title","localeCompare","forEach","v","icon","devOnly","__DEV__","iOSOnly","Platform","OS","hiddenBlocks","includes","supports","inserter","transforms","supportedMobileTransforms","registerCoreBlocks","group","filter","Boolean","init","NEW_BLOCK_TYPES"],"mappings":";;;;;;;AAGA;;AAKA;;AAQA;;AAKA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;AAjEA;AACA;AACA;;AAGA;AACA;AACA;;AAWA;AACA;AACA;AA+CO,MAAMA,UAAU,GAAG,CACzB;AACA;AACAC,SAHyB,EAIzBC,KAJyB,EAKzBC,OALyB,EAMzBC,OANyB,EAOzBC,IAPyB,EAQzBC,QARyB,EASzBC,KATyB,EAWzB;AACAC,SAZyB,EAazBC,QAbyB,EAczBC,KAdyB,EAezBC,MAfyB,EAgBzBC,QAhByB,EAiBzBC,UAjByB,EAkBzBC,IAlByB,EAmBzBC,OAnByB,EAoBzBC,MApByB,EAqBzBC,KArByB,EAsBzBC,KAtByB,EAuBzBC,IAvByB,EAwBzBC,IAxByB,EAyBzBC,SAzByB,EA0BzBC,cA1ByB,EA2BzBC,WA3ByB,EA4BzBC,OA5ByB,EA6BzBC,IA7ByB,EA8BzBC,QA9ByB,EA+BzBC,YA/ByB,EAgCzBC,SAhCyB,EAiCzBC,GAjCyB,EAkCzBC,MAlCyB,EAmCzBC,SAnCyB,EAoCzBC,aApCyB,EAqCzBC,MArCyB,EAsCzBC,KAtCyB,EAuCzBC,QAvCyB,EAwCzBC,WAxCyB,EAyCzBC,KAzCyB,EA0CzBC,KA1CyB,EA2CzBC,OA3CyB,EA4CzBC,OA5CyB,EA6CzBC,UA7CyB,EA8CzBC,WA9CyB,EA+CxBC,MA/CwB,CA+ChB,CAAEC,WAAF,EAAeC,KAAf,KAA0B;AACnCD,EAAAA,WAAW,CAAEC,KAAK,CAACC,IAAR,CAAX,GAA4BD,KAA5B;AACA,SAAOD,WAAP;AACA,CAlDyB,EAkDvB,EAlDuB,CAAnB;AAoDP;AACA;AACA;AACA;AACA;AACA;;;;AACA,MAAMG,uBAAuB,GAAKF,KAAF,IAAa;AAC5C,QAAM;AAAEG,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBH,IAAAA;AAAtB,MAA+BD,KAArC;;AAEA,MAAK,CAAEI,QAAQ,CAACC,UAAhB,EAA6B;AAC5B;AACA;;AAED,GAAE,GAAGD,QAAQ,CAACC,UAAd,EACEC,IADF,CACQ,CAAEC,CAAF,EAAKC,CAAL,KAAYD,CAAC,CAACE,KAAF,CAAQC,aAAR,CAAuBF,CAAC,CAACC,KAAzB,CADpB,EAEEE,OAFF,CAEaC,CAAF,IAAS;AAClB,mCAAoB,GAAGX,IAAM,IAAIW,CAAC,CAACX,IAAM,EAAzC,EAA4C,EAC3C,GAAGE,QADwC;AAE3CF,MAAAA,IAAI,EAAG,GAAGA,IAAM,IAAIW,CAAC,CAACX,IAAM,EAFe;AAG3C,SAAGG,QAHwC;AAI3CS,MAAAA,IAAI,EAAED,CAAC,CAACC,IAAF,EAJqC;AAK3CJ,MAAAA,KAAK,EAAEG,CAAC,CAACH,KALkC;AAM3CJ,MAAAA,UAAU,EAAE;AAN+B,KAA5C;AAQA,GAXF;AAYA,CAnBD,C,CAqBA;AACA;;;AACA,MAAMS,OAAO,GAAKd,KAAF,IAAe,CAAC,CAAEe,OAAH,GAAaf,KAAb,GAAqB,IAApD,C,CAEA;;;AACA,MAAMgB,OAAO,GAAKhB,KAAF,IACfiB,sBAASC,EAAT,KAAgB,KAAhB,GAAwBlB,KAAxB,GAAgCc,OAAO,CAAEd,KAAF,CADxC,C,CAGA;;;AACA,sBACC,0BADD,EAEC,0BAFD,EAGC,CAAEI,QAAF,EAAYH,IAAZ,KAAsB;AACrB,QAAMkB,YAAY,GAAG,CAAE,eAAF,EAAmB,kBAAnB,CAArB;;AACA,MACCA,YAAY,CAACC,QAAb,CAAuBnB,IAAvB,KACA,6BAAiBG,QAAjB,EAA2B,UAA3B,EAAuC,IAAvC,CAFD,EAGE;AACDA,IAAAA,QAAQ,CAACiB,QAAT,GAAoB,EACnB,GAAGjB,QAAQ,CAACiB,QADO;AAEnBC,MAAAA,QAAQ,EAAE;AAFS,KAApB;AAIA;;AAED,SAAOlB,QAAP;AACA,CAhBF;AAmBA,sBACC,0BADD,EAEC,0BAFD,EAGC,CAAEA,QAAF,EAAYH,IAAZ,KAAsB;AACrB,MAAK,CAAEG,QAAQ,CAACmB,UAAhB,EAA6B;AAC5B,WAAOnB,QAAP;AACA;;AAED,MAAK,CAAEA,QAAQ,CAACmB,UAAT,CAAoBC,yBAA3B,EAAuD;AACtD,WAAO,EACN,GAAGpB,QADG;AAENmB,MAAAA,UAAU,EAAE,EACX,GAAGnB,QAAQ,CAACmB,UADD;AAEXC,QAAAA,yBAAyB,EAAE,sDAAwBvB,IAAxB;AAFhB;AAFN,KAAP;AAOA;;AAED,SAAOG,QAAP;AACA,CAnBF;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,MAAMqB,kBAAkB,GAAG,MAAM;AACvC;AACA,GACCrE,SADD,EAECE,OAFD,EAGCwD,OAAO,CAAE7C,IAAF,CAHR,EAICU,OAJD,EAKCC,IALD,EAMCvB,KAND,EAOCoC,KAPD,EAQCZ,QARD,EASCK,SATD,EAUC1B,IAVD,EAWCC,QAXD,EAYCC,KAZD,EAaCc,SAbD,EAcCM,YAdD,EAeCvB,OAfD,EAgBCW,OAhBD,EAiBCC,MAjBD,EAkBCuD,KAlBD,EAmBChC,OAnBD,EAoBC5B,MApBD,EAqBCsB,MArBD,EAsBCzB,SAtBD,EAuBCgC,OAvBD,EAwBCjB,WAxBD,EAyBCc,KAzBD,EA0BCpB,KA1BD,EA2BCwB,UA3BD,EA4BCC,WA5BD,EA6BCd,SA7BD,EA8BCT,IA9BD,EA+BCT,KA/BD,EAgCCsB,aAhCD,EAiCCF,MAjCD,EAkCCZ,KAlCD,EAoCEsD,MApCF,CAoCUC,OApCV,EAqCEjB,OArCF,CAqCW;AAAA,QAAE;AAAEkB,MAAAA;AAAF,KAAF;AAAA,WAAgBA,IAAI,EAApB;AAAA,GArCX;AAuCA3B,EAAAA,uBAAuB,CAAEN,UAAF,CAAvB;AACA,mCAAqBxC,SAAS,CAAC6C,IAA/B;AACA,6CAA+BP,OAAO,CAACO,IAAvC;AACA,8CAAgCtB,OAAO,CAACsB,IAAxC;;AACA,MAAKyB,KAAL,EAAa;AACZ,sCAAsBA,KAAK,CAACzB,IAA5B;AACA;AACD,CAhDM;AAkDP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACO,MAAM6B,eAAe,GAAG;AAC9B,GAAEzD,KAAK,CAAC4B,IAAR,GAAgB,EADc;AAE9B,GAAEhB,MAAM,CAACgB,IAAT,GAAiB,EAFa;AAG9B,GAAEpC,KAAK,CAACoC,IAAR,GAAgB;AAHc,CAAxB","sourcesContent":["/**\n * External dependencies\n */\nimport { Platform } from 'react-native';\n\n/**\n * WordPress dependencies\n */\nimport {\n\thasBlockSupport,\n\tregisterBlockType,\n\tsetDefaultBlockName,\n\tsetFreeformContentHandlerName,\n\tsetUnregisteredTypeHandlerName,\n\tsetGroupingBlockName,\n} from '@wordpress/blocks';\nimport { addFilter } from '@wordpress/hooks';\n\n/**\n * Internal dependencies\n */\nimport * as paragraph from './paragraph';\nimport * as image from './image';\nimport * as heading from './heading';\nimport * as quote from './quote';\nimport * as gallery from './gallery';\nimport * as archives from './archives';\nimport * as audio from './audio';\nimport * as button from './button';\nimport * as calendar from './calendar';\nimport * as categories from './categories';\nimport * as code from './code';\nimport * as columns from './columns';\nimport * as column from './column';\nimport * as cover from './cover';\nimport * as embed from './embed';\nimport * as file from './file';\nimport * as html from './html';\nimport * as mediaText from './media-text';\nimport * as latestComments from './latest-comments';\nimport * as latestPosts from './latest-posts';\nimport * as list from './list';\nimport * as listItem from './list-item';\nimport * as missing from './missing';\nimport * as more from './more';\nimport * as nextpage from './nextpage';\nimport * as preformatted from './preformatted';\nimport * as pullquote from './pullquote';\nimport * as reusableBlock from './block';\nimport * as rss from './rss';\nimport * as search from './search';\nimport * as separator from './separator';\nimport * as shortcode from './shortcode';\nimport * as spacer from './spacer';\nimport * as table from './table';\nimport * as textColumns from './text-columns';\nimport * as verse from './verse';\nimport * as video from './video';\nimport * as tagCloud from './tag-cloud';\nimport * as classic from './freeform';\nimport * as group from './group';\nimport * as buttons from './buttons';\nimport * as socialLink from './social-link';\nimport * as socialLinks from './social-links';\n\nimport { transformationCategory } from './utils/transformation-categories';\n\nexport const coreBlocks = [\n\t// Common blocks are grouped at the top to prioritize their display\n\t// in various contexts â€” like the inserter and auto-complete components.\n\tparagraph,\n\timage,\n\theading,\n\tgallery,\n\tlist,\n\tlistItem,\n\tquote,\n\n\t// Register all remaining core blocks.\n\tshortcode,\n\tarchives,\n\taudio,\n\tbutton,\n\tcalendar,\n\tcategories,\n\tcode,\n\tcolumns,\n\tcolumn,\n\tcover,\n\tembed,\n\tfile,\n\thtml,\n\tmediaText,\n\tlatestComments,\n\tlatestPosts,\n\tmissing,\n\tmore,\n\tnextpage,\n\tpreformatted,\n\tpullquote,\n\trss,\n\tsearch,\n\tseparator,\n\treusableBlock,\n\tspacer,\n\ttable,\n\ttagCloud,\n\ttextColumns,\n\tverse,\n\tvideo,\n\tclassic,\n\tbuttons,\n\tsocialLink,\n\tsocialLinks,\n].reduce( ( accumulator, block ) => {\n\taccumulator[ block.name ] = block;\n\treturn accumulator;\n}, {} );\n\n/**\n * Function to register a block variations e.g. social icons different types.\n *\n * @param {Object} block The block which variations will be registered.\n *\n */\nconst registerBlockVariations = ( block ) => {\n\tconst { metadata, settings, name } = block;\n\n\tif ( ! settings.variations ) {\n\t\treturn;\n\t}\n\n\t[ ...settings.variations ]\n\t\t.sort( ( a, b ) => a.title.localeCompare( b.title ) )\n\t\t.forEach( ( v ) => {\n\t\t\tregisterBlockType( `${ name }-${ v.name }`, {\n\t\t\t\t...metadata,\n\t\t\t\tname: `${ name }-${ v.name }`,\n\t\t\t\t...settings,\n\t\t\t\ticon: v.icon(),\n\t\t\t\ttitle: v.title,\n\t\t\t\tvariations: [],\n\t\t\t} );\n\t\t} );\n};\n\n// Only enable code block for development\n// eslint-disable-next-line no-undef\nconst devOnly = ( block ) => ( !! __DEV__ ? block : null );\n\n// eslint-disable-next-line no-unused-vars\nconst iOSOnly = ( block ) =>\n\tPlatform.OS === 'ios' ? block : devOnly( block );\n\n// Hide the Classic block and SocialLink block\naddFilter(\n\t'blocks.registerBlockType',\n\t'core/react-native-editor',\n\t( settings, name ) => {\n\t\tconst hiddenBlocks = [ 'core/freeform', 'core/social-link' ];\n\t\tif (\n\t\t\thiddenBlocks.includes( name ) &&\n\t\t\thasBlockSupport( settings, 'inserter', true )\n\t\t) {\n\t\t\tsettings.supports = {\n\t\t\t\t...settings.supports,\n\t\t\t\tinserter: false,\n\t\t\t};\n\t\t}\n\n\t\treturn settings;\n\t}\n);\n\naddFilter(\n\t'blocks.registerBlockType',\n\t'core/react-native-editor',\n\t( settings, name ) => {\n\t\tif ( ! settings.transforms ) {\n\t\t\treturn settings;\n\t\t}\n\n\t\tif ( ! settings.transforms.supportedMobileTransforms ) {\n\t\t\treturn {\n\t\t\t\t...settings,\n\t\t\t\ttransforms: {\n\t\t\t\t\t...settings.transforms,\n\t\t\t\t\tsupportedMobileTransforms: transformationCategory( name ),\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\treturn settings;\n\t}\n);\n\n/**\n * Function to register core blocks provided by the block editor.\n *\n * @example\n * ```js\n * import { registerCoreBlocks } from '@wordpress/block-library';\n *\n * registerCoreBlocks();\n * ```\n */\nexport const registerCoreBlocks = () => {\n\t// When adding new blocks to this list please also consider updating /src/block-support/supported-blocks.json in the Gutenberg-Mobile repo\n\t[\n\t\tparagraph,\n\t\theading,\n\t\tdevOnly( code ),\n\t\tmissing,\n\t\tmore,\n\t\timage,\n\t\tvideo,\n\t\tnextpage,\n\t\tseparator,\n\t\tlist,\n\t\tlistItem,\n\t\tquote,\n\t\tmediaText,\n\t\tpreformatted,\n\t\tgallery,\n\t\tcolumns,\n\t\tcolumn,\n\t\tgroup,\n\t\tclassic,\n\t\tbutton,\n\t\tspacer,\n\t\tshortcode,\n\t\tbuttons,\n\t\tlatestPosts,\n\t\tverse,\n\t\tcover,\n\t\tsocialLink,\n\t\tsocialLinks,\n\t\tpullquote,\n\t\tfile,\n\t\taudio,\n\t\treusableBlock,\n\t\tsearch,\n\t\tembed,\n\t]\n\t\t.filter( Boolean )\n\t\t.forEach( ( { init } ) => init() );\n\n\tregisterBlockVariations( socialLink );\n\tsetDefaultBlockName( paragraph.name );\n\tsetFreeformContentHandlerName( classic.name );\n\tsetUnregisteredTypeHandlerName( missing.name );\n\tif ( group ) {\n\t\tsetGroupingBlockName( group.name );\n\t}\n};\n\n/**\n * Dictates which block types are considered \"new.\" For each of the block types\n * below, if the native host app does not already have an impression count set,\n * an initial count will be set. When a block type's impression count is greater\n * than 0, a \"new\" badge is displayed on the block type within the block\n * inserter.\n *\n * @constant {{ string, number }}\n */\nexport const NEW_BLOCK_TYPES = {\n\t[ embed.name ]: 40,\n\t[ search.name ]: 40,\n\t[ audio.name ]: 40,\n};\n"]}
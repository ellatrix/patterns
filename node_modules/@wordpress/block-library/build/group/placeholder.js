"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.useShouldShowPlaceHolder = useShouldShowPlaceHolder;

var _element = require("@wordpress/element");

var _data = require("@wordpress/data");

var _blockEditor = require("@wordpress/block-editor");

var _i18n = require("@wordpress/i18n");

var _blocks = require("@wordpress/blocks");

var _components = require("@wordpress/components");

/**
 * WordPress dependencies
 */

/**
 * Returns a custom variation icon.
 *
 * @param {string} name The block variation name.
 *
 * @return {JSX.Element} The SVG element.
 */
const getGroupPlaceholderIcons = function () {
  let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'group';
  const icons = {
    group: (0, _element.createElement)(_components.SVG, {
      xmlns: "http://www.w3.org/2000/svg",
      width: "44",
      height: "32",
      viewBox: "0 0 44 32"
    }, (0, _element.createElement)(_components.Path, {
      d: "M42 0H2C.9 0 0 .9 0 2v28c0 1.1.9 2 2 2h40c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2z"
    })),
    'group-row': (0, _element.createElement)(_components.SVG, {
      xmlns: "http://www.w3.org/2000/svg",
      width: "44",
      height: "32",
      viewBox: "0 0 44 32"
    }, (0, _element.createElement)(_components.Path, {
      d: "M42 0H23.5c-.6 0-1 .4-1 1v30c0 .6.4 1 1 1H42c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2zM20.5 0H2C.9 0 0 .9 0 2v28c0 1.1.9 2 2 2h18.5c.6 0 1-.4 1-1V1c0-.6-.4-1-1-1z"
    })),
    'group-stack': (0, _element.createElement)(_components.SVG, {
      xmlns: "http://www.w3.org/2000/svg",
      width: "44",
      height: "32",
      viewBox: "0 0 44 32"
    }, (0, _element.createElement)(_components.Path, {
      d: "M42 0H2C.9 0 0 .9 0 2v12.5c0 .6.4 1 1 1h42c.6 0 1-.4 1-1V2c0-1.1-.9-2-2-2zm1 16.5H1c-.6 0-1 .4-1 1V30c0 1.1.9 2 2 2h40c1.1 0 2-.9 2-2V17.5c0-.6-.4-1-1-1z"
    }))
  };
  return icons === null || icons === void 0 ? void 0 : icons[name];
};
/**
 * A custom hook to tell the Group block whether to show the variation placeholder.
 *
 * @param {Object}  props                  Arguments to pass to hook.
 * @param {Object}  [props.attributes]     The block's attributes.
 * @param {string}  [props.usedLayoutType] The block's current layout type.
 * @param {boolean} [props.hasInnerBlocks] Whether the block has inner blocks.
 *
 * @return {[boolean, Function]} A state value and setter function.
 */


function useShouldShowPlaceHolder(_ref) {
  let {
    attributes = {
      style: undefined,
      backgroundColor: undefined,
      textColor: undefined,
      fontSize: undefined
    },
    usedLayoutType = '',
    hasInnerBlocks = false
  } = _ref;
  const {
    style,
    backgroundColor,
    textColor,
    fontSize
  } = attributes;
  /*
   * Shows the placeholder when no known styles are set,
   * or when a non-default layout has been selected.
   * Should the Group block support more style presets in the
   * future, e.g., attributes.spacingSize, we can add them to the
   * condition.
   */

  const [showPlaceholder, setShowPlaceholder] = (0, _element.useState)(!hasInnerBlocks && !backgroundColor && !fontSize && !textColor && !style && usedLayoutType !== 'flex');
  (0, _element.useEffect)(() => {
    if (!!hasInnerBlocks || !!backgroundColor || !!fontSize || !!textColor || !!style || usedLayoutType === 'flex') {
      setShowPlaceholder(false);
    }
  }, [backgroundColor, fontSize, textColor, style, usedLayoutType, hasInnerBlocks]);
  return [showPlaceholder, setShowPlaceholder];
}
/**
 * Display group variations if none is selected.
 *
 * @param {Object}   props          Component props.
 * @param {string}   props.name     The block's name.
 * @param {Function} props.onSelect Function to set block's attributes.
 *
 * @return {JSX.Element}                The placeholder.
 */


function GroupPlaceHolder(_ref2) {
  let {
    name,
    onSelect
  } = _ref2;
  const variations = (0, _data.useSelect)(select => select(_blocks.store).getBlockVariations(name, 'block'), [name]);
  const blockProps = (0, _blockEditor.useBlockProps)({
    className: 'wp-block-group__placeholder'
  });
  return (0, _element.createElement)("div", blockProps, (0, _element.createElement)(_components.Placeholder, {
    instructions: (0, _i18n.__)('Group blocks together. Select a layout:')
  }, (0, _element.createElement)("ul", {
    role: "list",
    className: "wp-block-group-placeholder__variations",
    "aria-label": (0, _i18n.__)('Block variations')
  }, variations.map(variation => (0, _element.createElement)("li", {
    key: variation.name
  }, (0, _element.createElement)(_components.Button, {
    variant: "tertiary",
    icon: getGroupPlaceholderIcons(variation.name),
    iconSize: 44,
    onClick: () => onSelect(variation),
    className: "wp-block-group-placeholder__variation-button",
    label: `${variation.title}: ${variation.description}`
  }))))));
}

var _default = GroupPlaceHolder;
exports.default = _default;
//# sourceMappingURL=placeholder.js.map
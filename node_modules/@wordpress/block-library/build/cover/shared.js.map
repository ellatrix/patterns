{"version":3,"sources":["@wordpress/block-library/src/cover/shared.js"],"names":["POSITION_CLASSNAMES","center","IMAGE_BACKGROUND_TYPE","VIDEO_BACKGROUND_TYPE","COVER_MIN_HEIGHT","COVER_MAX_HEIGHT","COVER_DEFAULT_HEIGHT","DEFAULT_FOCAL_POINT","x","y","ALLOWED_MEDIA_TYPES","mediaPosition","Math","round","dimRatioToClass","ratio","undefined","attributesFromMedia","setAttributes","dimRatio","media","url","id","type","mediaType","media_type","alt","backgroundType","focalPoint","hasParallax","isContentPositionCenter","contentPosition","getPositionClassName"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { getBlobTypeByURL, isBlobURL } from '@wordpress/blob';\n\nconst POSITION_CLASSNAMES = {\n\t'top left': 'is-position-top-left',\n\t'top center': 'is-position-top-center',\n\t'top right': 'is-position-top-right',\n\t'center left': 'is-position-center-left',\n\t'center center': 'is-position-center-center',\n\tcenter: 'is-position-center-center',\n\t'center right': 'is-position-center-right',\n\t'bottom left': 'is-position-bottom-left',\n\t'bottom center': 'is-position-bottom-center',\n\t'bottom right': 'is-position-bottom-right',\n};\n\nexport const IMAGE_BACKGROUND_TYPE = 'image';\nexport const VIDEO_BACKGROUND_TYPE = 'video';\nexport const COVER_MIN_HEIGHT = 50;\nexport const COVER_MAX_HEIGHT = 1000;\nexport const COVER_DEFAULT_HEIGHT = 300;\nexport const DEFAULT_FOCAL_POINT = { x: 0.5, y: 0.5 };\nexport const ALLOWED_MEDIA_TYPES = [ 'image', 'video' ];\n\nexport function mediaPosition( { x, y } = DEFAULT_FOCAL_POINT ) {\n\treturn `${ Math.round( x * 100 ) }% ${ Math.round( y * 100 ) }%`;\n}\n\nexport function dimRatioToClass( ratio ) {\n\treturn ratio === 50 || ! ratio === undefined\n\t\t? null\n\t\t: 'has-background-dim-' + 10 * Math.round( ratio / 10 );\n}\n\nexport function attributesFromMedia( setAttributes, dimRatio ) {\n\treturn ( media ) => {\n\t\tif ( ! media || ! media.url ) {\n\t\t\tsetAttributes( { url: undefined, id: undefined } );\n\t\t\treturn;\n\t\t}\n\n\t\tif ( isBlobURL( media.url ) ) {\n\t\t\tmedia.type = getBlobTypeByURL( media.url );\n\t\t}\n\n\t\tlet mediaType;\n\t\t// For media selections originated from a file upload.\n\t\tif ( media.media_type ) {\n\t\t\tif ( media.media_type === IMAGE_BACKGROUND_TYPE ) {\n\t\t\t\tmediaType = IMAGE_BACKGROUND_TYPE;\n\t\t\t} else {\n\t\t\t\t// only images and videos are accepted so if the media_type is not an image we can assume it is a video.\n\t\t\t\t// Videos contain the media type of 'file' in the object returned from the rest api.\n\t\t\t\tmediaType = VIDEO_BACKGROUND_TYPE;\n\t\t\t}\n\t\t} else {\n\t\t\t// For media selections originated from existing files in the media library.\n\t\t\tif (\n\t\t\t\tmedia.type !== IMAGE_BACKGROUND_TYPE &&\n\t\t\t\tmedia.type !== VIDEO_BACKGROUND_TYPE\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tmediaType = media.type;\n\t\t}\n\n\t\tsetAttributes( {\n\t\t\tdimRatio: dimRatio === 100 ? 50 : dimRatio,\n\t\t\turl: media.url,\n\t\t\tid: media.id,\n\t\t\talt: media?.alt,\n\t\t\tbackgroundType: mediaType,\n\t\t\tfocalPoint: undefined,\n\t\t\t...( mediaType === VIDEO_BACKGROUND_TYPE\n\t\t\t\t? { hasParallax: undefined }\n\t\t\t\t: {} ),\n\t\t} );\n\t};\n}\n\n/**\n * Checks of the contentPosition is the center (default) position.\n *\n * @param {string} contentPosition The current content position.\n * @return {boolean} Whether the contentPosition is center.\n */\nexport function isContentPositionCenter( contentPosition ) {\n\treturn (\n\t\t! contentPosition ||\n\t\tcontentPosition === 'center center' ||\n\t\tcontentPosition === 'center'\n\t);\n}\n\n/**\n * Retrieves the className for the current contentPosition.\n * The default position (center) will not have a className.\n *\n * @param {string} contentPosition The current content position.\n * @return {string} The className assigned to the contentPosition.\n */\nexport function getPositionClassName( contentPosition ) {\n\t/*\n\t * Only render a className if the contentPosition is not center (the default).\n\t */\n\tif ( isContentPositionCenter( contentPosition ) ) return '';\n\n\treturn POSITION_CLASSNAMES[ contentPosition ];\n}\n"]}
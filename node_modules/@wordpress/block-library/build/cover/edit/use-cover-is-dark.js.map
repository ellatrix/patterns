{"version":3,"sources":["@wordpress/block-library/src/cover/edit/use-cover-is-dark.js"],"names":["retrieveFastAverageColor","fastAverageColor","FastAverageColor","useCoverIsDark","url","dimRatio","overlayColor","isDark","setIsDark","imgCrossOrigin","undefined","getColorAsync","defaultColor","silent","process","env","NODE_ENV","crossOrigin","then","color"],"mappings":";;;;;;;AAGA;;AACA;;AAKA;;AACA;;AAVA;AACA;AACA;;AAIA;AACA;AACA;AAIA,SAASA,wBAAT,GAAoC;AACnC,MAAK,CAAEA,wBAAwB,CAACC,gBAAhC,EAAmD;AAClDD,IAAAA,wBAAwB,CAACC,gBAAzB,GAA4C,IAAIC,kCAAJ,EAA5C;AACA;;AACD,SAAOF,wBAAwB,CAACC,gBAAhC;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACe,SAASE,cAAT,CAAyBC,GAAzB,EAA4D;AAAA,MAA9BC,QAA8B,uEAAnB,EAAmB;AAAA,MAAfC,YAAe;AAC1E,QAAM,CAAEC,MAAF,EAAUC,SAAV,IAAwB,uBAAU,KAAV,CAA9B;AACA,0BAAW,MAAM;AAChB;AACA;AACA,QAAKJ,GAAG,IAAIC,QAAQ,IAAI,EAAxB,EAA6B;AAC5B,YAAMI,cAAc,GAAG,yBACtB,mBADsB,EAEtBC,SAFsB,EAGtBN,GAHsB,CAAvB;AAKAJ,MAAAA,wBAAwB,GACtBW,aADF,CACiBP,GADjB,EACsB;AACpB;AACA;AACAQ,QAAAA,YAAY,EAAE,CAAE,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,CAHM;AAIpB;AACA;AACAC,QAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YANb;AAOpBC,QAAAA,WAAW,EAAER;AAPO,OADtB,EAUES,IAVF,CAUUC,KAAF,IAAaX,SAAS,CAAEW,KAAK,CAACZ,MAAR,CAV9B;AAWA;AACD,GArBD,EAqBG,CAAEH,GAAF,EAAOA,GAAG,IAAIC,QAAQ,IAAI,EAA1B,EAA8BG,SAA9B,CArBH;AAsBA,0BAAW,MAAM;AAChB;AACA;AACA,QAAKH,QAAQ,GAAG,EAAX,IAAiB,CAAED,GAAxB,EAA8B;AAC7B,UAAK,CAAEE,YAAP,EAAsB;AACrB;AACAE,QAAAA,SAAS,CAAE,IAAF,CAAT;AACA;AACA;;AACDA,MAAAA,SAAS,CAAE,oBAAQF,YAAR,EAAuBC,MAAvB,EAAF,CAAT;AACA;AACD,GAXD,EAWG,CAAED,YAAF,EAAgBD,QAAQ,GAAG,EAAX,IAAiB,CAAED,GAAnC,EAAwCI,SAAxC,CAXH;AAYA,0BAAW,MAAM;AAChB,QAAK,CAAEJ,GAAF,IAAS,CAAEE,YAAhB,EAA+B;AAC9B;AACAE,MAAAA,SAAS,CAAE,KAAF,CAAT;AACA;AACD,GALD,EAKG,CAAE,CAAEJ,GAAF,IAAS,CAAEE,YAAb,EAA2BE,SAA3B,CALH;AAMA,SAAOD,MAAP;AACA","sourcesContent":["/**\n * External dependencies\n */\nimport { FastAverageColor } from 'fast-average-color';\nimport { colord } from 'colord';\n\n/**\n * WordPress dependencies\n */\nimport { useEffect, useState } from '@wordpress/element';\nimport { applyFilters } from '@wordpress/hooks';\n\nfunction retrieveFastAverageColor() {\n\tif ( ! retrieveFastAverageColor.fastAverageColor ) {\n\t\tretrieveFastAverageColor.fastAverageColor = new FastAverageColor();\n\t}\n\treturn retrieveFastAverageColor.fastAverageColor;\n}\n\n/**\n * useCoverIsDark is a hook that returns a boolean variable specifying if the cover\n * background is dark or not.\n *\n * @param {?string} url          Url of the media background.\n * @param {?number} dimRatio     Transparency of the overlay color. If an image and\n *                               color are set, dimRatio is used to decide what is used\n *                               for background darkness checking purposes.\n * @param {?string} overlayColor String containing the overlay color value if one exists.\n *\n * @return {boolean} True if the cover background is considered \"dark\" and false otherwise.\n */\nexport default function useCoverIsDark( url, dimRatio = 50, overlayColor ) {\n\tconst [ isDark, setIsDark ] = useState( false );\n\tuseEffect( () => {\n\t\t// If opacity is lower than 50 the dominant color is the image or video color,\n\t\t// so use that color for the dark mode computation.\n\t\tif ( url && dimRatio <= 50 ) {\n\t\t\tconst imgCrossOrigin = applyFilters(\n\t\t\t\t'media.crossOrigin',\n\t\t\t\tundefined,\n\t\t\t\turl\n\t\t\t);\n\t\t\tretrieveFastAverageColor()\n\t\t\t\t.getColorAsync( url, {\n\t\t\t\t\t// Previously the default color was white, but that changed\n\t\t\t\t\t// in v6.0.0 so it has to be manually set now.\n\t\t\t\t\tdefaultColor: [ 255, 255, 255, 255 ],\n\t\t\t\t\t// Errors that come up don't reject the promise, so error\n\t\t\t\t\t// logging has to be silenced with this option.\n\t\t\t\t\tsilent: process.env.NODE_ENV === 'production',\n\t\t\t\t\tcrossOrigin: imgCrossOrigin,\n\t\t\t\t} )\n\t\t\t\t.then( ( color ) => setIsDark( color.isDark ) );\n\t\t}\n\t}, [ url, url && dimRatio <= 50, setIsDark ] );\n\tuseEffect( () => {\n\t\t// If opacity is greater than 50 the dominant color is the overlay color,\n\t\t// so use that color for the dark mode computation.\n\t\tif ( dimRatio > 50 || ! url ) {\n\t\t\tif ( ! overlayColor ) {\n\t\t\t\t// If no overlay color exists the overlay color is black (isDark )\n\t\t\t\tsetIsDark( true );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsetIsDark( colord( overlayColor ).isDark() );\n\t\t}\n\t}, [ overlayColor, dimRatio > 50 || ! url, setIsDark ] );\n\tuseEffect( () => {\n\t\tif ( ! url && ! overlayColor ) {\n\t\t\t// Reset isDark.\n\t\t\tsetIsDark( false );\n\t\t}\n\t}, [ ! url && ! overlayColor, setIsDark ] );\n\treturn isDark;\n}\n"]}
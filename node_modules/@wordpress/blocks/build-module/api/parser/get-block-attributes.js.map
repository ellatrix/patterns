{"version":3,"sources":["@wordpress/blocks/src/api/parser/get-block-attributes.js"],"names":["parse","hpqParse","mapValues","memoize","pipe","applyFilters","attr","html","text","query","node","children","prop","normalizeBlockType","toBooleanAttributeMatcher","matcher","value","undefined","isOfType","type","constructor","Object","Array","isArray","isOfTypes","types","some","getBlockAttribute","attributeKey","attributeSchema","innerDOM","commentAttributes","innerHTML","source","parseWithAttributeSchema","isValidByType","isValidByEnum","enum","default","enumSet","includes","matcherFromSource","sourceConfig","selector","attribute","multiline","subMatchers","nodeName","toLowerCase","console","error","parseHtml","h","getBlockAttributes","blockTypeOrName","attributes","doc","blockType","blockAttributes","schema","key"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { parse as hpqParse } from 'hpq';\nimport { mapValues } from 'lodash';\nimport memoize from 'memize';\n\n/**\n * WordPress dependencies\n */\nimport { pipe } from '@wordpress/compose';\nimport { applyFilters } from '@wordpress/hooks';\n\n/**\n * Internal dependencies\n */\nimport { attr, html, text, query, node, children, prop } from '../matchers';\nimport { normalizeBlockType } from '../utils';\n\n/**\n * Higher-order hpq matcher which enhances an attribute matcher to return true\n * or false depending on whether the original matcher returns undefined. This\n * is useful for boolean attributes (e.g. disabled) whose attribute values may\n * be technically falsey (empty string), though their mere presence should be\n * enough to infer as true.\n *\n * @param {Function} matcher Original hpq matcher.\n *\n * @return {Function} Enhanced hpq matcher.\n */\nexport const toBooleanAttributeMatcher = ( matcher ) =>\n\tpipe( [\n\t\tmatcher,\n\t\t// Expected values from `attr( 'disabled' )`:\n\t\t//\n\t\t// <input>\n\t\t// - Value:       `undefined`\n\t\t// - Transformed: `false`\n\t\t//\n\t\t// <input disabled>\n\t\t// - Value:       `''`\n\t\t// - Transformed: `true`\n\t\t//\n\t\t// <input disabled=\"disabled\">\n\t\t// - Value:       `'disabled'`\n\t\t// - Transformed: `true`\n\t\t( value ) => value !== undefined,\n\t] );\n\n/**\n * Returns true if value is of the given JSON schema type, or false otherwise.\n *\n * @see http://json-schema.org/latest/json-schema-validation.html#rfc.section.6.25\n *\n * @param {*}      value Value to test.\n * @param {string} type  Type to test.\n *\n * @return {boolean} Whether value is of type.\n */\nexport function isOfType( value, type ) {\n\tswitch ( type ) {\n\t\tcase 'string':\n\t\t\treturn typeof value === 'string';\n\n\t\tcase 'boolean':\n\t\t\treturn typeof value === 'boolean';\n\n\t\tcase 'object':\n\t\t\treturn !! value && value.constructor === Object;\n\n\t\tcase 'null':\n\t\t\treturn value === null;\n\n\t\tcase 'array':\n\t\t\treturn Array.isArray( value );\n\n\t\tcase 'integer':\n\t\tcase 'number':\n\t\t\treturn typeof value === 'number';\n\t}\n\n\treturn true;\n}\n\n/**\n * Returns true if value is of an array of given JSON schema types, or false\n * otherwise.\n *\n * @see http://json-schema.org/latest/json-schema-validation.html#rfc.section.6.25\n *\n * @param {*}        value Value to test.\n * @param {string[]} types Types to test.\n *\n * @return {boolean} Whether value is of types.\n */\nexport function isOfTypes( value, types ) {\n\treturn types.some( ( type ) => isOfType( value, type ) );\n}\n\n/**\n * Given an attribute key, an attribute's schema, a block's raw content and the\n * commentAttributes returns the attribute value depending on its source\n * definition of the given attribute key.\n *\n * @param {string} attributeKey      Attribute key.\n * @param {Object} attributeSchema   Attribute's schema.\n * @param {Node}   innerDOM          Parsed DOM of block's inner HTML.\n * @param {Object} commentAttributes Block's comment attributes.\n * @param {string} innerHTML         Raw HTML from block node's innerHTML property.\n *\n * @return {*} Attribute value.\n */\nexport function getBlockAttribute(\n\tattributeKey,\n\tattributeSchema,\n\tinnerDOM,\n\tcommentAttributes,\n\tinnerHTML\n) {\n\tlet value;\n\n\tswitch ( attributeSchema.source ) {\n\t\t// An undefined source means that it's an attribute serialized to the\n\t\t// block's \"comment\".\n\t\tcase undefined:\n\t\t\tvalue = commentAttributes\n\t\t\t\t? commentAttributes[ attributeKey ]\n\t\t\t\t: undefined;\n\t\t\tbreak;\n\t\t// raw source means that it's the original raw block content.\n\t\tcase 'raw':\n\t\t\tvalue = innerHTML;\n\t\t\tbreak;\n\t\tcase 'attribute':\n\t\tcase 'property':\n\t\tcase 'html':\n\t\tcase 'text':\n\t\tcase 'children':\n\t\tcase 'node':\n\t\tcase 'query':\n\t\tcase 'tag':\n\t\t\tvalue = parseWithAttributeSchema( innerDOM, attributeSchema );\n\t\t\tbreak;\n\t}\n\n\tif (\n\t\t! isValidByType( value, attributeSchema.type ) ||\n\t\t! isValidByEnum( value, attributeSchema.enum )\n\t) {\n\t\t// Reject the value if it is not valid. Reverting to the undefined\n\t\t// value ensures the default is respected, if applicable.\n\t\tvalue = undefined;\n\t}\n\n\tif ( value === undefined ) {\n\t\tvalue = attributeSchema.default;\n\t}\n\n\treturn value;\n}\n\n/**\n * Returns true if value is valid per the given block attribute schema type\n * definition, or false otherwise.\n *\n * @see https://json-schema.org/latest/json-schema-validation.html#rfc.section.6.1.1\n *\n * @param {*}                       value Value to test.\n * @param {?(Array<string>|string)} type  Block attribute schema type.\n *\n * @return {boolean} Whether value is valid.\n */\nexport function isValidByType( value, type ) {\n\treturn (\n\t\ttype === undefined ||\n\t\tisOfTypes( value, Array.isArray( type ) ? type : [ type ] )\n\t);\n}\n\n/**\n * Returns true if value is valid per the given block attribute schema enum\n * definition, or false otherwise.\n *\n * @see https://json-schema.org/latest/json-schema-validation.html#rfc.section.6.1.2\n *\n * @param {*}      value   Value to test.\n * @param {?Array} enumSet Block attribute schema enum.\n *\n * @return {boolean} Whether value is valid.\n */\nexport function isValidByEnum( value, enumSet ) {\n\treturn ! Array.isArray( enumSet ) || enumSet.includes( value );\n}\n\n/**\n * Returns an hpq matcher given a source object.\n *\n * @param {Object} sourceConfig Attribute Source object.\n *\n * @return {Function} A hpq Matcher.\n */\nexport const matcherFromSource = memoize( ( sourceConfig ) => {\n\tswitch ( sourceConfig.source ) {\n\t\tcase 'attribute':\n\t\t\tlet matcher = attr( sourceConfig.selector, sourceConfig.attribute );\n\t\t\tif ( sourceConfig.type === 'boolean' ) {\n\t\t\t\tmatcher = toBooleanAttributeMatcher( matcher );\n\t\t\t}\n\n\t\t\treturn matcher;\n\t\tcase 'html':\n\t\t\treturn html( sourceConfig.selector, sourceConfig.multiline );\n\t\tcase 'text':\n\t\t\treturn text( sourceConfig.selector );\n\t\tcase 'children':\n\t\t\treturn children( sourceConfig.selector );\n\t\tcase 'node':\n\t\t\treturn node( sourceConfig.selector );\n\t\tcase 'query':\n\t\t\tconst subMatchers = mapValues(\n\t\t\t\tsourceConfig.query,\n\t\t\t\tmatcherFromSource\n\t\t\t);\n\t\t\treturn query( sourceConfig.selector, subMatchers );\n\t\tcase 'tag':\n\t\t\treturn pipe( [\n\t\t\t\tprop( sourceConfig.selector, 'nodeName' ),\n\t\t\t\t( nodeName ) =>\n\t\t\t\t\tnodeName ? nodeName.toLowerCase() : undefined,\n\t\t\t] );\n\t\tdefault:\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error( `Unknown source type \"${ sourceConfig.source }\"` );\n\t}\n} );\n\n/**\n * Parse a HTML string into DOM tree.\n *\n * @param {string|Node} innerHTML HTML string or already parsed DOM node.\n *\n * @return {Node} Parsed DOM node.\n */\nfunction parseHtml( innerHTML ) {\n\treturn hpqParse( innerHTML, ( h ) => h );\n}\n\n/**\n * Given a block's raw content and an attribute's schema returns the attribute's\n * value depending on its source.\n *\n * @param {string|Node} innerHTML       Block's raw content.\n * @param {Object}      attributeSchema Attribute's schema.\n *\n * @return {*} Attribute value.\n */\nexport function parseWithAttributeSchema( innerHTML, attributeSchema ) {\n\treturn matcherFromSource( attributeSchema )( parseHtml( innerHTML ) );\n}\n\n/**\n * Returns the block attributes of a registered block node given its type.\n *\n * @param {string|Object} blockTypeOrName Block type or name.\n * @param {string|Node}   innerHTML       Raw block content.\n * @param {?Object}       attributes      Known block attributes (from delimiters).\n *\n * @return {Object} All block attributes.\n */\nexport function getBlockAttributes(\n\tblockTypeOrName,\n\tinnerHTML,\n\tattributes = {}\n) {\n\tconst doc = parseHtml( innerHTML );\n\tconst blockType = normalizeBlockType( blockTypeOrName );\n\n\tconst blockAttributes = mapValues( blockType.attributes, ( schema, key ) =>\n\t\tgetBlockAttribute( key, schema, doc, attributes, innerHTML )\n\t);\n\n\treturn applyFilters(\n\t\t'blocks.getBlockAttributes',\n\t\tblockAttributes,\n\t\tblockType,\n\t\tinnerHTML,\n\t\tattributes\n\t);\n}\n"]}
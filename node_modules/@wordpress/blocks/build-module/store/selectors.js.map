{"version":3,"sources":["@wordpress/blocks/src/store/selectors.js"],"names":["createSelector","removeAccents","get","pipe","getNormalizedBlockType","state","nameOrType","getBlockType","__experimentalGetUnprocessedBlockTypes","unprocessedBlockTypes","getBlockTypes","Object","values","blockTypes","name","getBlockStyles","blockStyles","getBlockVariations","blockName","scope","variations","blockVariations","filter","variation","includes","getActiveBlockVariation","attributes","match","find","Array","isArray","isActive","blockType","attributeKeys","keys","definedAttributes","attribute","length","every","getDefaultBlockVariation","defaultVariation","reverse","isDefault","getCategories","categories","getCollections","collections","getDefaultBlockName","defaultBlockName","getFreeformFallbackBlockName","freeformFallbackBlockName","getUnregisteredFallbackBlockName","unregisteredFallbackBlockName","getGroupingBlockName","groupingBlockName","getChildBlockNames","parent","map","getBlockSupport","feature","defaultSupports","supports","hasBlockSupport","isMatchingSearchTerm","searchTerm","getNormalizedSearchTerm","term","toLowerCase","trim","normalizedSearchTerm","isSearchMatch","normalizedCandidate","title","keywords","some","category","description","hasChildBlocks","hasChildBlocksWithInserterSupport","childBlockName","__experimentalHasContentRoleAttribute","blockTypeName","entries","__experimentalRole"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,cAAP,MAA2B,QAA3B;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,SAASC,GAAT,QAAoB,QAApB;AAEA;AACA;AACA;;AACA,SAASC,IAAT,QAAqB,oBAArB;AAEA;;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,sBAAsB,GAAG,CAAEC,KAAF,EAASC,UAAT,KAC9B,aAAa,OAAOA,UAApB,GACGC,YAAY,CAAEF,KAAF,EAASC,UAAT,CADf,GAEGA,UAHJ;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASE,sCAAT,CAAiDH,KAAjD,EAAyD;AAC/D,SAAOA,KAAK,CAACI,qBAAb;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,aAAa,GAAGV,cAAc,CACxCK,KAAF,IAAaM,MAAM,CAACC,MAAP,CAAeP,KAAK,CAACQ,UAArB,CAD6B,EAExCR,KAAF,IAAa,CAAEA,KAAK,CAACQ,UAAR,CAF6B,CAApC;AAKP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASN,YAAT,CAAuBF,KAAvB,EAA8BS,IAA9B,EAAqC;AAC3C,SAAOT,KAAK,CAACQ,UAAN,CAAkBC,IAAlB,CAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,cAAT,CAAyBV,KAAzB,EAAgCS,IAAhC,EAAuC;AAC7C,SAAOT,KAAK,CAACW,WAAN,CAAmBF,IAAnB,CAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMG,kBAAkB,GAAGjB,cAAc,CAC/C,CAAEK,KAAF,EAASa,SAAT,EAAoBC,KAApB,KAA+B;AAC9B,QAAMC,UAAU,GAAGf,KAAK,CAACgB,eAAN,CAAuBH,SAAvB,CAAnB;;AACA,MAAK,CAAEE,UAAF,IAAgB,CAAED,KAAvB,EAA+B;AAC9B,WAAOC,UAAP;AACA;;AACD,SAAOA,UAAU,CAACE,MAAX,CAAqBC,SAAF,IAAiB;AAC1C;AACA;AACA,WAAO,CAAEA,SAAS,CAACJ,KAAV,IAAmB,CAAE,OAAF,EAAW,UAAX,CAArB,EAA+CK,QAA/C,CACNL,KADM,CAAP;AAGA,GANM,CAAP;AAOA,CAb8C,EAc/C,CAAEd,KAAF,EAASa,SAAT,KAAwB,CAAEb,KAAK,CAACgB,eAAN,CAAuBH,SAAvB,CAAF,CAduB,CAAzC;AAiBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASO,uBAAT,CAAkCpB,KAAlC,EAAyCa,SAAzC,EAAoDQ,UAApD,EAAgEP,KAAhE,EAAwE;AAC9E,QAAMC,UAAU,GAAGH,kBAAkB,CAAEZ,KAAF,EAASa,SAAT,EAAoBC,KAApB,CAArC;AAEA,QAAMQ,KAAK,GAAGP,UAAH,aAAGA,UAAH,uBAAGA,UAAU,CAAEQ,IAAZ,CAAoBL,SAAF,IAAiB;AAAA;;AAChD,QAAKM,KAAK,CAACC,OAAN,CAAeP,SAAS,CAACQ,QAAzB,CAAL,EAA2C;AAC1C,YAAMC,SAAS,GAAGzB,YAAY,CAAEF,KAAF,EAASa,SAAT,CAA9B;AACA,YAAMe,aAAa,GAAGtB,MAAM,CAACuB,IAAP,CAAa,CAAAF,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEN,UAAX,KAAyB,EAAtC,CAAtB;AACA,YAAMS,iBAAiB,GAAGZ,SAAS,CAACQ,QAAV,CAAmBT,MAAnB,CACvBc,SAAF,IAAiBH,aAAa,CAACT,QAAd,CAAwBY,SAAxB,CADQ,CAA1B;;AAGA,UAAKD,iBAAiB,CAACE,MAAlB,KAA6B,CAAlC,EAAsC;AACrC,eAAO,KAAP;AACA;;AACD,aAAOF,iBAAiB,CAACG,KAAlB,CACJF,SAAF,IACCV,UAAU,CAAEU,SAAF,CAAV,KACAb,SAAS,CAACG,UAAV,CAAsBU,SAAtB,CAHK,CAAP;AAKA;;AAED,kCAAOb,SAAS,CAACQ,QAAjB,wDAAO,yBAAAR,SAAS,EAAaG,UAAb,EAAyBH,SAAS,CAACG,UAAnC,CAAhB;AACA,GAlBa,CAAd;AAoBA,SAAOC,KAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASY,wBAAT,CAAmClC,KAAnC,EAA0Ca,SAA1C,EAAqDC,KAArD,EAA6D;AACnE,QAAMC,UAAU,GAAGH,kBAAkB,CAAEZ,KAAF,EAASa,SAAT,EAAoBC,KAApB,CAArC;AAEA,QAAMqB,gBAAgB,GAAG,CAAE,GAAGpB,UAAL,EACvBqB,OADuB,GAEvBb,IAFuB,CAEjB;AAAA,QAAE;AAAEc,MAAAA;AAAF,KAAF;AAAA,WAAqB,CAAC,CAAEA,SAAxB;AAAA,GAFiB,CAAzB;AAIA,SAAOF,gBAAgB,IAAIpB,UAAU,CAAE,CAAF,CAArC;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASuB,aAAT,CAAwBtC,KAAxB,EAAgC;AACtC,SAAOA,KAAK,CAACuC,UAAb;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,cAAT,CAAyBxC,KAAzB,EAAiC;AACvC,SAAOA,KAAK,CAACyC,WAAb;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,mBAAT,CAA8B1C,KAA9B,EAAsC;AAC5C,SAAOA,KAAK,CAAC2C,gBAAb;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,4BAAT,CAAuC5C,KAAvC,EAA+C;AACrD,SAAOA,KAAK,CAAC6C,yBAAb;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,gCAAT,CAA2C9C,KAA3C,EAAmD;AACzD,SAAOA,KAAK,CAAC+C,6BAAb;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","sourcesContent":["/**\n * External dependencies\n */\nimport createSelector from 'rememo';\nimport removeAccents from 'remove-accents';\nimport { get } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { pipe } from '@wordpress/compose';\n\n/** @typedef {import('../api/registration').WPBlockVariation} WPBlockVariation */\n/** @typedef {import('../api/registration').WPBlockVariationScope} WPBlockVariationScope */\n/** @typedef {import('./reducer').WPBlockCategory} WPBlockCategory */\n\n/**\n * Given a block name or block type object, returns the corresponding\n * normalized block type object.\n *\n * @param {Object}          state      Blocks state.\n * @param {(string|Object)} nameOrType Block name or type object\n *\n * @return {Object} Block type object.\n */\nconst getNormalizedBlockType = ( state, nameOrType ) =>\n\t'string' === typeof nameOrType\n\t\t? getBlockType( state, nameOrType )\n\t\t: nameOrType;\n\n/**\n * Returns all the unprocessed block types as passed during the registration.\n *\n * @param {Object} state Data state.\n *\n * @return {Array} Unprocessed block types.\n */\nexport function __experimentalGetUnprocessedBlockTypes( state ) {\n\treturn state.unprocessedBlockTypes;\n}\n\n/**\n * Returns all the available block types.\n *\n * @param {Object} state Data state.\n *\n * @example\n * ```js\n * import { store as blocksStore } from '@wordpress/blocks';\n * import { useSelect } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     const blockTypes = useSelect(\n *         ( select ) => select( blocksStore ).getBlockTypes(),\n *         []\n *     );\n *\n *     return (\n *         <ul>\n *             { blockTypes.map( ( block ) => (\n *                 <li key={ block.name }>{ block.title }</li>\n *             ) ) }\n *         </ul>\n *     );\n * };\n * ```\n *\n * @return {Array} Block Types.\n */\nexport const getBlockTypes = createSelector(\n\t( state ) => Object.values( state.blockTypes ),\n\t( state ) => [ state.blockTypes ]\n);\n\n/**\n * Returns a block type by name.\n *\n * @param {Object} state Data state.\n * @param {string} name  Block type name.\n *\n * @example\n * ```js\n * import { store as blocksStore } from '@wordpress/blocks';\n * import { useSelect } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     const paragraphBlock = useSelect( ( select ) =>\n *         ( select ) => select( blocksStore ).getBlockType( 'core/paragraph' ),\n *         []\n *     );\n *\n *     return (\n *         <ul>\n *             { paragraphBlock &&\n *                 Object.entries( paragraphBlock.supports ).map(\n *                     ( blockSupportsEntry ) => {\n *                         const [ propertyName, value ] = blockSupportsEntry;\n *                         return (\n *                             <li\n *                                 key={ propertyName }\n *                             >{ `${ propertyName } : ${ value }` }</li>\n *                         );\n *                     }\n *                 ) }\n *         </ul>\n *     );\n * };\n * ```\n *\n * @return {Object?} Block Type.\n */\nexport function getBlockType( state, name ) {\n\treturn state.blockTypes[ name ];\n}\n\n/**\n * Returns block styles by block name.\n *\n * @param {Object} state Data state.\n * @param {string} name  Block type name.\n *\n * @example\n * ```js\n * import { store as blocksStore } from '@wordpress/blocks';\n * import { useSelect } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     const buttonBlockStyles = useSelect( ( select ) =>\n *         select( blocksStore ).getBlockStyles( 'core/button' ),\n *         []\n *     );\n *\n *     return (\n *         <ul>\n *             { buttonBlockStyles &&\n *                 buttonBlockStyles.map( ( style ) => (\n *                     <li key={ style.name }>{ style.label }</li>\n *                 ) ) }\n *         </ul>\n *     );\n * };\n * ```\n *\n * @return {Array?} Block Styles.\n */\nexport function getBlockStyles( state, name ) {\n\treturn state.blockStyles[ name ];\n}\n\n/**\n * Returns block variations by block name.\n *\n * @param {Object}                state     Data state.\n * @param {string}                blockName Block type name.\n * @param {WPBlockVariationScope} [scope]   Block variation scope name.\n *\n * @example\n * ```js\n * import { store as blocksStore } from '@wordpress/blocks';\n * import { useSelect } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     const socialLinkVariations = useSelect( ( select ) =>\n *         select( blocksStore ).getBlockVariations( 'core/social-link' ),\n *         []\n *     );\n *\n *     return (\n *         <ul>\n *             { socialLinkVariations &&\n *                 socialLinkVariations.map( ( variation ) => (\n *                     <li key={ variation.name }>{ variation.title }</li>\n *             ) ) }\n *     </ul>\n *     );\n * };\n * ```\n *\n * @return {(WPBlockVariation[]|void)} Block variations.\n */\nexport const getBlockVariations = createSelector(\n\t( state, blockName, scope ) => {\n\t\tconst variations = state.blockVariations[ blockName ];\n\t\tif ( ! variations || ! scope ) {\n\t\t\treturn variations;\n\t\t}\n\t\treturn variations.filter( ( variation ) => {\n\t\t\t// For backward compatibility reasons, variation's scope defaults to\n\t\t\t// `block` and `inserter` when not set.\n\t\t\treturn ( variation.scope || [ 'block', 'inserter' ] ).includes(\n\t\t\t\tscope\n\t\t\t);\n\t\t} );\n\t},\n\t( state, blockName ) => [ state.blockVariations[ blockName ] ]\n);\n\n/**\n * Returns the active block variation for a given block based on its attributes.\n * Variations are determined by their `isActive` property.\n * Which is either an array of block attribute keys or a function.\n *\n * In case of an array of block attribute keys, the `attributes` are compared\n * to the variation's attributes using strict equality check.\n *\n * In case of function type, the function should accept a block's attributes\n * and the variation's attributes and determines if a variation is active.\n * A function that accepts a block's attributes and the variation's attributes and determines if a variation is active.\n *\n * @param {Object}                state      Data state.\n * @param {string}                blockName  Name of block (example: “core/columns”).\n * @param {Object}                attributes Block attributes used to determine active variation.\n * @param {WPBlockVariationScope} [scope]    Block variation scope name.\n *\n * @example\n * ```js\n * import { __ } from '@wordpress/i18n';\n * import { store as blocksStore } from '@wordpress/blocks';\n * import { store as blockEditorStore } from '@wordpress/block-editor';\n * import { useSelect } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     // This example assumes that a core/embed block is the first block in the Block Editor.\n *     const activeBlockVariation = useSelect( ( select ) => {\n *         // Retrieve the list of blocks.\n *         const [ firstBlock ] = select( blockEditorStore ).getBlocks()\n *\n *         // Return the active block variation for the first block.\n *         return select( blocksStore ).getActiveBlockVariation(\n *             firstBlock.name,\n *             firstBlock.attributes\n *         );\n *     }, [] );\n *\n *     return activeBlockVariation && activeBlockVariation.name === 'spotify' ? (\n *         <p>{ __( 'Spotify variation' ) }</p>\n *         ) : (\n *         <p>{ __( 'Other variation' ) }</p>\n *     );\n * };\n * ```\n *\n * @return {(WPBlockVariation|undefined)} Active block variation.\n */\nexport function getActiveBlockVariation( state, blockName, attributes, scope ) {\n\tconst variations = getBlockVariations( state, blockName, scope );\n\n\tconst match = variations?.find( ( variation ) => {\n\t\tif ( Array.isArray( variation.isActive ) ) {\n\t\t\tconst blockType = getBlockType( state, blockName );\n\t\t\tconst attributeKeys = Object.keys( blockType?.attributes || {} );\n\t\t\tconst definedAttributes = variation.isActive.filter(\n\t\t\t\t( attribute ) => attributeKeys.includes( attribute )\n\t\t\t);\n\t\t\tif ( definedAttributes.length === 0 ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn definedAttributes.every(\n\t\t\t\t( attribute ) =>\n\t\t\t\t\tattributes[ attribute ] ===\n\t\t\t\t\tvariation.attributes[ attribute ]\n\t\t\t);\n\t\t}\n\n\t\treturn variation.isActive?.( attributes, variation.attributes );\n\t} );\n\n\treturn match;\n}\n\n/**\n * Returns the default block variation for the given block type.\n * When there are multiple variations annotated as the default one,\n * the last added item is picked. This simplifies registering overrides.\n * When there is no default variation set, it returns the first item.\n *\n * @param {Object}                state     Data state.\n * @param {string}                blockName Block type name.\n * @param {WPBlockVariationScope} [scope]   Block variation scope name.\n *\n * @example\n * ```js\n * import { __, sprintf } from '@wordpress/i18n';\n * import { store as blocksStore } from '@wordpress/blocks';\n * import { useSelect } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     const defaultEmbedBlockVariation = useSelect( ( select ) =>\n *         select( blocksStore ).getDefaultBlockVariation( 'core/embed' ),\n *         []\n *     );\n *\n *     return (\n *         defaultEmbedBlockVariation && (\n *             <p>\n *                 { sprintf(\n *                     __( 'core/embed default variation: %s' ),\n *                     defaultEmbedBlockVariation.title\n *                 ) }\n *             </p>\n *         )\n *     );\n * };\n * ```\n *\n * @return {?WPBlockVariation} The default block variation.\n */\nexport function getDefaultBlockVariation( state, blockName, scope ) {\n\tconst variations = getBlockVariations( state, blockName, scope );\n\n\tconst defaultVariation = [ ...variations ]\n\t\t.reverse()\n\t\t.find( ( { isDefault } ) => !! isDefault );\n\n\treturn defaultVariation || variations[ 0 ];\n}\n\n/**\n * Returns all the available block categories.\n *\n * @param {Object} state Data state.\n *\n * @example\n * ```js\n * import { store as blocksStore } from '@wordpress/blocks';\n * import { useSelect, } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     const blockCategories = useSelect( ( select ) =>\n *         select( blocksStore ).getCategories(),\n *         []\n *     );\n *\n *     return (\n *         <ul>\n *             { blockCategories.map( ( category ) => (\n *                 <li key={ category.slug }>{ category.title }</li>\n *             ) ) }\n *         </ul>\n *     );\n * };\n * ```\n *\n * @return {WPBlockCategory[]} Categories list.\n */\nexport function getCategories( state ) {\n\treturn state.categories;\n}\n\n/**\n * Returns all the available collections.\n *\n * @param {Object} state Data state.\n *\n * @example\n * ```js\n * import { store as blocksStore } from '@wordpress/blocks';\n * import { useSelect } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     const blockCollections = useSelect( ( select ) =>\n *         select( blocksStore ).getCollections(),\n *         []\n *     );\n *\n *     return (\n *         <ul>\n *             { Object.values( blockCollections ).length > 0 &&\n *                 Object.values( blockCollections ).map( ( collection ) => (\n *                     <li key={ collection.title }>{ collection.title }</li>\n *             ) ) }\n *         </ul>\n *     );\n * };\n * ```\n *\n * @return {Object} Collections list.\n */\nexport function getCollections( state ) {\n\treturn state.collections;\n}\n\n/**\n * Returns the name of the default block name.\n *\n * @param {Object} state Data state.\n *\n * @example\n * ```js\n * import { __, sprintf } from '@wordpress/i18n';\n * import { store as blocksStore } from '@wordpress/blocks';\n * import { useSelect } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     const defaultBlockName = useSelect( ( select ) =>\n *         select( blocksStore ).getDefaultBlockName(),\n *         []\n *     );\n *\n *     return (\n *         defaultBlockName && (\n *             <p>\n *                 { sprintf( __( 'Default block name: %s' ), defaultBlockName ) }\n *             </p>\n *         )\n *     );\n * };\n * ```\n *\n * @return {string?} Default block name.\n */\nexport function getDefaultBlockName( state ) {\n\treturn state.defaultBlockName;\n}\n\n/**\n * Returns the name of the block for handling non-block content.\n *\n * @param {Object} state Data state.\n *\n * @example\n * ```js\n * import { __, sprintf } from '@wordpress/i18n';\n * import { store as blocksStore } from '@wordpress/blocks';\n * import { useSelect } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     const freeformFallbackBlockName = useSelect( ( select ) =>\n *         select( blocksStore ).getFreeformFallbackBlockName(),\n *         []\n *     );\n *\n *     return (\n *         freeformFallbackBlockName && (\n *             <p>\n *                 { sprintf( __(\n *                     'Freeform fallback block name: %s' ),\n *                     freeformFallbackBlockName\n *                 ) }\n *             </p>\n *         )\n *     );\n * };\n * ```\n *\n * @return {string?} Name of the block for handling non-block content.\n */\nexport function getFreeformFallbackBlockName( state ) {\n\treturn state.freeformFallbackBlockName;\n}\n\n/**\n * Returns the name of the block for handling unregistered blocks.\n *\n * @param {Object} state Data state.\n *\n * @example\n * ```js\n * import { __, sprintf } from '@wordpress/i18n';\n * import { store as blocksStore } from '@wordpress/blocks';\n * import { useSelect } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     const unregisteredFallbackBlockName = useSelect( ( select ) =>\n *         select( blocksStore ).getUnregisteredFallbackBlockName(),\n *         []\n *     );\n *\n *     return (\n *         unregisteredFallbackBlockName && (\n *             <p>\n *                 { sprintf( __(\n *                     'Unregistered fallback block name: %s' ),\n *                     unregisteredFallbackBlockName\n *                 ) }\n *             </p>\n *         )\n *     );\n * };\n * ```\n *\n * @return {string?} Name of the block for handling unregistered blocks.\n */\nexport function getUnregisteredFallbackBlockName( state ) {\n\treturn state.unregisteredFallbackBlockName;\n}\n\n/**\n * Returns the name of the block for handling the grouping of blocks.\n *\n * @param {Object} state Data state.\n *\n * @example\n * ```js\n * import { __, sprintf } from '@wordpress/i18n';\n * import { store as blocksStore } from '@wordpress/blocks';\n * import { useSelect } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     const groupingBlockName = useSelect( ( select ) =>\n *         select( blocksStore ).getGroupingBlockName(),\n *         []\n *     );\n *\n *     return (\n *         groupingBlockName && (\n *             <p>\n *                 { sprintf(\n *                     __( 'Default grouping block name: %s' ),\n *                     groupingBlockName\n *                 ) }\n *             </p>\n *         )\n *     );\n * };\n * ```\n *\n * @return {string?} Name of the block for handling the grouping of blocks.\n */\nexport function getGroupingBlockName( state ) {\n\treturn state.groupingBlockName;\n}\n\n/**\n * Returns an array with the child blocks of a given block.\n *\n * @param {Object} state     Data state.\n * @param {string} blockName Block type name.\n *\n * @example\n * ```js\n * import { store as blocksStore } from '@wordpress/blocks';\n * import { useSelect } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     const childBlockNames = useSelect( ( select ) =>\n *         select( blocksStore ).getChildBlockNames( 'core/navigation' ),\n *         []\n *     );\n *\n *     return (\n *         <ul>\n *             { childBlockNames &&\n *                 childBlockNames.map( ( child ) => (\n *                     <li key={ child }>{ child }</li>\n *             ) ) }\n *         </ul>\n *     );\n * };\n * ```\n *\n * @return {Array} Array of child block names.\n */\nexport const getChildBlockNames = createSelector(\n\t( state, blockName ) => {\n\t\treturn getBlockTypes( state )\n\t\t\t.filter( ( blockType ) => {\n\t\t\t\treturn blockType.parent?.includes( blockName );\n\t\t\t} )\n\t\t\t.map( ( { name } ) => name );\n\t},\n\t( state ) => [ state.blockTypes ]\n);\n\n/**\n * Returns the block support value for a feature, if defined.\n *\n * @param {Object}          state           Data state.\n * @param {(string|Object)} nameOrType      Block name or type object\n * @param {Array|string}    feature         Feature to retrieve\n * @param {*}               defaultSupports Default value to return if not\n *                                          explicitly defined\n *\n * @example\n * ```js\n * import { __, sprintf } from '@wordpress/i18n';\n * import { store as blocksStore } from '@wordpress/blocks';\n * import { useSelect } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     const paragraphBlockSupportValue = useSelect( ( select ) =>\n *         select( blocksStore ).getBlockSupport( 'core/paragraph', 'anchor' ),\n *         []\n *     );\n *\n *     return (\n *         <p>\n *             { sprintf(\n *                 __( 'core/paragraph supports.anchor value: %s' ),\n *                 paragraphBlockSupportValue\n *             ) }\n *         </p>\n *     );\n * };\n * ```\n *\n * @return {?*} Block support value\n */\nexport const getBlockSupport = (\n\tstate,\n\tnameOrType,\n\tfeature,\n\tdefaultSupports\n) => {\n\tconst blockType = getNormalizedBlockType( state, nameOrType );\n\tif ( ! blockType?.supports ) {\n\t\treturn defaultSupports;\n\t}\n\n\treturn get( blockType.supports, feature, defaultSupports );\n};\n\n/**\n * Returns true if the block defines support for a feature, or false otherwise.\n *\n * @param {Object}          state           Data state.\n * @param {(string|Object)} nameOrType      Block name or type object.\n * @param {string}          feature         Feature to test.\n * @param {boolean}         defaultSupports Whether feature is supported by\n *                                          default if not explicitly defined.\n *\n * @example\n * ```js\n * import { __, sprintf } from '@wordpress/i18n';\n * import { store as blocksStore } from '@wordpress/blocks';\n * import { useSelect } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     const paragraphBlockSupportClassName = useSelect( ( select ) =>\n *         select( blocksStore ).hasBlockSupport( 'core/paragraph', 'className' ),\n *         []\n *     );\n *\n *     return (\n *         <p>\n *             { sprintf(\n *                 __( 'core/paragraph supports custom class name?: %s' ),\n *                 paragraphBlockSupportClassName\n *             ) }\n *         /p>\n *     );\n * };\n * ```\n *\n * @return {boolean} Whether block supports feature.\n */\nexport function hasBlockSupport( state, nameOrType, feature, defaultSupports ) {\n\treturn !! getBlockSupport( state, nameOrType, feature, defaultSupports );\n}\n\n/**\n * Returns true if the block type by the given name or object value matches a\n * search term, or false otherwise.\n *\n * @param {Object}          state      Blocks state.\n * @param {(string|Object)} nameOrType Block name or type object.\n * @param {string}          searchTerm Search term by which to filter.\n *\n * @example\n * ```js\n * import { __, sprintf } from '@wordpress/i18n';\n * import { store as blocksStore } from '@wordpress/blocks';\n * import { useSelect } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     const termFound = useSelect(\n *         ( select ) =>\n *             select( blocksStore ).isMatchingSearchTerm(\n *                 'core/navigation',\n *                 'theme'\n *             ),\n *             []\n *         );\n *\n *     return (\n *         <p>\n *             { sprintf(\n *                 __(\n *                     'Search term was found in the title, keywords, category or description in block.json: %s'\n *                 ),\n *                 termFound\n *             ) }\n *         </p>\n *     );\n * };\n * ```\n *\n * @return {Object[]} Whether block type matches search term.\n */\nexport function isMatchingSearchTerm( state, nameOrType, searchTerm ) {\n\tconst blockType = getNormalizedBlockType( state, nameOrType );\n\n\tconst getNormalizedSearchTerm = pipe( [\n\t\t// Disregard diacritics.\n\t\t//  Input: \"média\"\n\t\t( term ) => removeAccents( term ?? '' ),\n\n\t\t// Lowercase.\n\t\t//  Input: \"MEDIA\"\n\t\t( term ) => term.toLowerCase(),\n\n\t\t// Strip leading and trailing whitespace.\n\t\t//  Input: \" media \"\n\t\t( term ) => term.trim(),\n\t] );\n\n\tconst normalizedSearchTerm = getNormalizedSearchTerm( searchTerm );\n\n\tconst isSearchMatch = pipe( [\n\t\tgetNormalizedSearchTerm,\n\t\t( normalizedCandidate ) =>\n\t\t\tnormalizedCandidate.includes( normalizedSearchTerm ),\n\t] );\n\n\treturn (\n\t\tisSearchMatch( blockType.title ) ||\n\t\tblockType.keywords?.some( isSearchMatch ) ||\n\t\tisSearchMatch( blockType.category ) ||\n\t\t( typeof blockType.description === 'string' &&\n\t\t\tisSearchMatch( blockType.description ) )\n\t);\n}\n\n/**\n * Returns a boolean indicating if a block has child blocks or not.\n *\n * @param {Object} state     Data state.\n * @param {string} blockName Block type name.\n *\n * @example\n * ```js\n * import { __, sprintf } from '@wordpress/i18n';\n * import { store as blocksStore } from '@wordpress/blocks';\n * import { useSelect } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     const navigationBlockHasChildBlocks = useSelect( ( select ) =>\n *         select( blocksStore ).hasChildBlocks( 'core/navigation' ),\n *         []\n *     );\n *\n *     return (\n *         <p>\n *             { sprintf(\n *                 __( 'core/navigation has child blocks: %s' ),\n *                 navigationBlockHasChildBlocks\n *             ) }\n *         </p>\n *     );\n * };\n * ```\n *\n * @return {boolean} True if a block contains child blocks and false otherwise.\n */\nexport const hasChildBlocks = ( state, blockName ) => {\n\treturn getChildBlockNames( state, blockName ).length > 0;\n};\n\n/**\n * Returns a boolean indicating if a block has at least one child block with inserter support.\n *\n * @param {Object} state     Data state.\n * @param {string} blockName Block type name.\n *\n * @example\n * ```js\n * import { __, sprintf } from '@wordpress/i18n';\n * import { store as blocksStore } from '@wordpress/blocks';\n * import { useSelect } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     const navigationBlockHasChildBlocksWithInserterSupport = useSelect( ( select ) =>\n *         select( blocksStore ).hasChildBlocksWithInserterSupport(\n *             'core/navigation'\n *         ),\n *         []\n *     );\n *\n *     return (\n *         <p>\n *             { sprintf(\n *                 __( 'core/navigation has child blocks with inserter support: %s' ),\n *                 navigationBlockHasChildBlocksWithInserterSupport\n *             ) }\n *         </p>\n *     );\n * };\n * ```\n *\n * @return {boolean} True if a block contains at least one child blocks with inserter support\n *                   and false otherwise.\n */\nexport const hasChildBlocksWithInserterSupport = ( state, blockName ) => {\n\treturn getChildBlockNames( state, blockName ).some( ( childBlockName ) => {\n\t\treturn hasBlockSupport( state, childBlockName, 'inserter', true );\n\t} );\n};\n\n/**\n * DO-NOT-USE in production.\n * This selector is created for internal/experimental only usage and may be\n * removed anytime without any warning, causing breakage on any plugin or theme invoking it.\n */\nexport const __experimentalHasContentRoleAttribute = createSelector(\n\t( state, blockTypeName ) => {\n\t\tconst blockType = getBlockType( state, blockTypeName );\n\t\tif ( ! blockType ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn Object.entries( blockType.attributes ).some(\n\t\t\t( [ , { __experimentalRole } ] ) => __experimentalRole === 'content'\n\t\t);\n\t},\n\t( state, blockTypeName ) => [\n\t\tstate.blockTypes[ blockTypeName ]?.attributes,\n\t]\n);\n"]}
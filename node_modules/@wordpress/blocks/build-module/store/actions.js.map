{"version":3,"sources":["@wordpress/blocks/src/store/actions.js"],"names":["isPlainObject","deprecated","applyFilters","isValidIcon","normalizeIconObject","omit","DEPRECATED_ENTRY_KEYS","error","warn","window","console","LEGACY_CATEGORY_MAPPING","common","formatting","layout","isFunction","maybeFunc","processBlockType","blockType","select","name","settings","description","since","map","deprecation","Object","fromEntries","entries","filter","key","includes","save","edit","hasOwnProperty","category","getCategories","some","slug","title","icon","src","addBlockTypes","blockTypes","type","Array","isArray","__experimentalRegisterBlockType","dispatch","processedBlockType","__experimentalReapplyBlockTypeFilters","unprocessedBlockTypes","__experimentalGetUnprocessedBlockTypes","processedBlockTypes","keys","reduce","accumulator","blockName","result","push","length","removeBlockTypes","names","addBlockStyles","styles","removeBlockStyles","styleNames","addBlockVariations","variations","removeBlockVariations","variationNames","setDefaultBlockName","setFreeformFallbackBlockName","setUnregisteredFallbackBlockName","setGroupingBlockName","setCategories","categories","updateCategory","addBlockCollection","namespace","removeBlockCollection"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { isPlainObject } from 'is-plain-object';\n\n/**\n * WordPress dependencies\n */\nimport deprecated from '@wordpress/deprecated';\nimport { applyFilters } from '@wordpress/hooks';\n\n/**\n * Internal dependencies\n */\nimport { isValidIcon, normalizeIconObject, omit } from '../api/utils';\nimport { DEPRECATED_ENTRY_KEYS } from '../api/constants';\n\n/** @typedef {import('../api/registration').WPBlockVariation} WPBlockVariation */\n/** @typedef {import('../api/registration').WPBlockType} WPBlockType */\n/** @typedef {import('./reducer').WPBlockCategory} WPBlockCategory */\n\nconst { error, warn } = window.console;\n\n/**\n * Mapping of legacy category slugs to their latest normal values, used to\n * accommodate updates of the default set of block categories.\n *\n * @type {Record<string,string>}\n */\nconst LEGACY_CATEGORY_MAPPING = {\n\tcommon: 'text',\n\tformatting: 'text',\n\tlayout: 'design',\n};\n\n/**\n * Whether the argument is a function.\n *\n * @param {*} maybeFunc The argument to check.\n * @return {boolean} True if the argument is a function, false otherwise.\n */\nfunction isFunction( maybeFunc ) {\n\treturn typeof maybeFunc === 'function';\n}\n\n/**\n * Takes the unprocessed block type data and applies all the existing filters for the registered block type.\n * Next, it validates all the settings and performs additional processing to the block type definition.\n *\n * @param {WPBlockType} blockType        Unprocessed block type settings.\n * @param {Object}      thunkArgs        Argument object for the thunk middleware.\n * @param {Function}    thunkArgs.select Function to select from the store.\n *\n * @return {WPBlockType | undefined} The block, if it has been successfully registered; otherwise `undefined`.\n */\nconst processBlockType = ( blockType, { select } ) => {\n\tconst { name } = blockType;\n\n\tconst settings = applyFilters(\n\t\t'blocks.registerBlockType',\n\t\t{ ...blockType },\n\t\tname,\n\t\tnull\n\t);\n\n\tif ( settings.description && typeof settings.description !== 'string' ) {\n\t\tdeprecated( 'Declaring non-string block descriptions', {\n\t\t\tsince: '6.2',\n\t\t} );\n\t}\n\n\tif ( settings.deprecated ) {\n\t\tsettings.deprecated = settings.deprecated.map( ( deprecation ) =>\n\t\t\tObject.fromEntries(\n\t\t\t\tObject.entries(\n\t\t\t\t\t// Only keep valid deprecation keys.\n\t\t\t\t\tapplyFilters(\n\t\t\t\t\t\t'blocks.registerBlockType',\n\t\t\t\t\t\t// Merge deprecation keys with pre-filter settings\n\t\t\t\t\t\t// so that filters that depend on specific keys being\n\t\t\t\t\t\t// present don't fail.\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Omit deprecation keys here so that deprecations\n\t\t\t\t\t\t\t// can opt out of specific keys like \"supports\".\n\t\t\t\t\t\t\t...omit( blockType, DEPRECATED_ENTRY_KEYS ),\n\t\t\t\t\t\t\t...deprecation,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tdeprecation\n\t\t\t\t\t)\n\t\t\t\t).filter( ( [ key ] ) => DEPRECATED_ENTRY_KEYS.includes( key ) )\n\t\t\t)\n\t\t);\n\t}\n\n\tif ( ! isPlainObject( settings ) ) {\n\t\terror( 'Block settings must be a valid object.' );\n\t\treturn;\n\t}\n\n\tif ( ! isFunction( settings.save ) ) {\n\t\terror( 'The \"save\" property must be a valid function.' );\n\t\treturn;\n\t}\n\tif ( 'edit' in settings && ! isFunction( settings.edit ) ) {\n\t\terror( 'The \"edit\" property must be a valid function.' );\n\t\treturn;\n\t}\n\n\t// Canonicalize legacy categories to equivalent fallback.\n\tif ( LEGACY_CATEGORY_MAPPING.hasOwnProperty( settings.category ) ) {\n\t\tsettings.category = LEGACY_CATEGORY_MAPPING[ settings.category ];\n\t}\n\n\tif (\n\t\t'category' in settings &&\n\t\t! select\n\t\t\t.getCategories()\n\t\t\t.some( ( { slug } ) => slug === settings.category )\n\t) {\n\t\twarn(\n\t\t\t'The block \"' +\n\t\t\t\tname +\n\t\t\t\t'\" is registered with an invalid category \"' +\n\t\t\t\tsettings.category +\n\t\t\t\t'\".'\n\t\t);\n\t\tdelete settings.category;\n\t}\n\n\tif ( ! ( 'title' in settings ) || settings.title === '' ) {\n\t\terror( 'The block \"' + name + '\" must have a title.' );\n\t\treturn;\n\t}\n\tif ( typeof settings.title !== 'string' ) {\n\t\terror( 'Block titles must be strings.' );\n\t\treturn;\n\t}\n\n\tsettings.icon = normalizeIconObject( settings.icon );\n\tif ( ! isValidIcon( settings.icon.src ) ) {\n\t\terror(\n\t\t\t'The icon passed is invalid. ' +\n\t\t\t\t'The icon should be a string, an element, a function, or an object following the specifications documented in https://developer.wordpress.org/block-editor/developers/block-api/block-registration/#icon-optional'\n\t\t);\n\t\treturn;\n\t}\n\n\treturn settings;\n};\n\n/**\n * Returns an action object used in signalling that block types have been added.\n * Ignored from documentation as the recommended usage for this action through registerBlockType from @wordpress/blocks.\n *\n * @ignore\n *\n * @param {WPBlockType|WPBlockType[]} blockTypes Object or array of objects representing blocks to added.\n *\n *\n * @return {Object} Action object.\n */\nexport function addBlockTypes( blockTypes ) {\n\treturn {\n\t\ttype: 'ADD_BLOCK_TYPES',\n\t\tblockTypes: Array.isArray( blockTypes ) ? blockTypes : [ blockTypes ],\n\t};\n}\n\n/**\n * Signals that the passed block type's settings should be stored in the state.\n *\n * @param {WPBlockType} blockType Unprocessed block type settings.\n */\nexport const __experimentalRegisterBlockType =\n\t( blockType ) =>\n\t( { dispatch, select } ) => {\n\t\tdispatch( {\n\t\t\ttype: 'ADD_UNPROCESSED_BLOCK_TYPE',\n\t\t\tblockType,\n\t\t} );\n\n\t\tconst processedBlockType = processBlockType( blockType, { select } );\n\t\tif ( ! processedBlockType ) {\n\t\t\treturn;\n\t\t}\n\t\tdispatch.addBlockTypes( processedBlockType );\n\t};\n\n/**\n * Signals that all block types should be computed again.\n * It uses stored unprocessed block types and all the most recent list of registered filters.\n *\n * It addresses the issue where third party block filters get registered after third party blocks. A sample sequence:\n *   1. Filter A.\n *   2. Block B.\n *   3. Block C.\n *   4. Filter D.\n *   5. Filter E.\n *   6. Block F.\n *   7. Filter G.\n * In this scenario some filters would not get applied for all blocks because they are registered too late.\n */\nexport const __experimentalReapplyBlockTypeFilters =\n\t() =>\n\t( { dispatch, select } ) => {\n\t\tconst unprocessedBlockTypes =\n\t\t\tselect.__experimentalGetUnprocessedBlockTypes();\n\n\t\tconst processedBlockTypes = Object.keys( unprocessedBlockTypes ).reduce(\n\t\t\t( accumulator, blockName ) => {\n\t\t\t\tconst result = processBlockType(\n\t\t\t\t\tunprocessedBlockTypes[ blockName ],\n\t\t\t\t\t{ select }\n\t\t\t\t);\n\t\t\t\tif ( result ) {\n\t\t\t\t\taccumulator.push( result );\n\t\t\t\t}\n\t\t\t\treturn accumulator;\n\t\t\t},\n\t\t\t[]\n\t\t);\n\n\t\tif ( ! processedBlockTypes.length ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdispatch.addBlockTypes( processedBlockTypes );\n\t};\n\n/**\n * Returns an action object used to remove a registered block type.\n * Ignored from documentation as the recommended usage for this action through unregisterBlockType from @wordpress/blocks.\n *\n * @ignore\n *\n * @param {string|string[]} names Block name or array of block names to be removed.\n *\n *\n * @return {Object} Action object.\n */\nexport function removeBlockTypes( names ) {\n\treturn {\n\t\ttype: 'REMOVE_BLOCK_TYPES',\n\t\tnames: Array.isArray( names ) ? names : [ names ],\n\t};\n}\n\n/**\n * Returns an action object used in signalling that new block styles have been added.\n * Ignored from documentation as the recommended usage for this action through registerBlockStyle from @wordpress/blocks.\n *\n * @param {string}       blockName Block name.\n * @param {Array|Object} styles    Block style object or array of block style objects.\n *\n * @ignore\n *\n * @return {Object} Action object.\n */\nexport function addBlockStyles( blockName, styles ) {\n\treturn {\n\t\ttype: 'ADD_BLOCK_STYLES',\n\t\tstyles: Array.isArray( styles ) ? styles : [ styles ],\n\t\tblockName,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that block styles have been removed.\n * Ignored from documentation as the recommended usage for this action through unregisterBlockStyle from @wordpress/blocks.\n *\n * @ignore\n *\n * @param {string}       blockName  Block name.\n * @param {Array|string} styleNames Block style names or array of block style names.\n *\n * @return {Object} Action object.\n */\nexport function removeBlockStyles( blockName, styleNames ) {\n\treturn {\n\t\ttype: 'REMOVE_BLOCK_STYLES',\n\t\tstyleNames: Array.isArray( styleNames ) ? styleNames : [ styleNames ],\n\t\tblockName,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that new block variations have been added.\n * Ignored from documentation as the recommended usage for this action through registerBlockVariation from @wordpress/blocks.\n *\n * @ignore\n *\n * @param {string}                              blockName  Block name.\n * @param {WPBlockVariation|WPBlockVariation[]} variations Block variations.\n *\n * @return {Object} Action object.\n */\nexport function addBlockVariations( blockName, variations ) {\n\treturn {\n\t\ttype: 'ADD_BLOCK_VARIATIONS',\n\t\tvariations: Array.isArray( variations ) ? variations : [ variations ],\n\t\tblockName,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that block variations have been removed.\n * Ignored from documentation as the recommended usage for this action through unregisterBlockVariation from @wordpress/blocks.\n *\n * @ignore\n *\n * @param {string}          blockName      Block name.\n * @param {string|string[]} variationNames Block variation names.\n *\n * @return {Object} Action object.\n */\nexport function removeBlockVariations( blockName, variationNames ) {\n\treturn {\n\t\ttype: 'REMOVE_BLOCK_VARIATIONS',\n\t\tvariationNames: Array.isArray( variationNames )\n\t\t\t? variationNames\n\t\t\t: [ variationNames ],\n\t\tblockName,\n\t};\n}\n\n/**\n * Returns an action object used to set the default block name.\n * Ignored from documentation as the recommended usage for this action through setDefaultBlockName from @wordpress/blocks.\n *\n * @ignore\n *\n * @param {string} name Block name.\n *\n * @return {Object} Action object.\n */\nexport function setDefaultBlockName( name ) {\n\treturn {\n\t\ttype: 'SET_DEFAULT_BLOCK_NAME',\n\t\tname,\n\t};\n}\n\n/**\n * Returns an action object used to set the name of the block used as a fallback\n * for non-block content.\n * Ignored from documentation as the recommended usage for this action through setFreeformContentHandlerName from @wordpress/blocks.\n *\n * @ignore\n *\n * @param {string} name Block name.\n *\n * @return {Object} Action object.\n */\nexport function setFreeformFallbackBlockName( name ) {\n\treturn {\n\t\ttype: 'SET_FREEFORM_FALLBACK_BLOCK_NAME',\n\t\tname,\n\t};\n}\n\n/**\n * Returns an action object used to set the name of the block used as a fallback\n * for unregistered blocks.\n * Ignored from documentation as the recommended usage for this action through setUnregisteredTypeHandlerName from @wordpress/blocks.\n *\n * @ignore\n *\n * @param {string} name Block name.\n *\n * @return {Object} Action object.\n */\nexport function setUnregisteredFallbackBlockName( name ) {\n\treturn {\n\t\ttype: 'SET_UNREGISTERED_FALLBACK_BLOCK_NAME',\n\t\tname,\n\t};\n}\n\n/**\n * Returns an action object used to set the name of the block used\n * when grouping other blocks\n * eg: in \"Group/Ungroup\" interactions\n * Ignored from documentation as the recommended usage for this action through setGroupingBlockName from @wordpress/blocks.\n *\n * @ignore\n *\n * @param {string} name Block name.\n *\n * @return {Object} Action object.\n */\nexport function setGroupingBlockName( name ) {\n\treturn {\n\t\ttype: 'SET_GROUPING_BLOCK_NAME',\n\t\tname,\n\t};\n}\n\n/**\n * Returns an action object used to set block categories.\n * Ignored from documentation as the recommended usage for this action through setCategories from @wordpress/blocks.\n *\n * @ignore\n *\n * @param {WPBlockCategory[]} categories Block categories.\n *\n * @return {Object} Action object.\n */\nexport function setCategories( categories ) {\n\treturn {\n\t\ttype: 'SET_CATEGORIES',\n\t\tcategories,\n\t};\n}\n\n/**\n * Returns an action object used to update a category.\n * Ignored from documentation as the recommended usage for this action through updateCategory from @wordpress/blocks.\n *\n * @ignore\n *\n * @param {string} slug     Block category slug.\n * @param {Object} category Object containing the category properties that should be updated.\n *\n * @return {Object} Action object.\n */\nexport function updateCategory( slug, category ) {\n\treturn {\n\t\ttype: 'UPDATE_CATEGORY',\n\t\tslug,\n\t\tcategory,\n\t};\n}\n\n/**\n * Returns an action object used to add block collections\n * Ignored from documentation as the recommended usage for this action through registerBlockCollection from @wordpress/blocks.\n *\n * @ignore\n *\n * @param {string} namespace The namespace of the blocks to put in the collection\n * @param {string} title     The title to display in the block inserter\n * @param {Object} icon      (optional) The icon to display in the block inserter\n *\n * @return {Object} Action object.\n */\nexport function addBlockCollection( namespace, title, icon ) {\n\treturn {\n\t\ttype: 'ADD_BLOCK_COLLECTION',\n\t\tnamespace,\n\t\ttitle,\n\t\ticon,\n\t};\n}\n\n/**\n * Returns an action object used to remove block collections\n * Ignored from documentation as the recommended usage for this action through unregisterBlockCollection from @wordpress/blocks.\n *\n * @ignore\n *\n * @param {string} namespace The namespace of the blocks to put in the collection\n *\n * @return {Object} Action object.\n */\nexport function removeBlockCollection( namespace ) {\n\treturn {\n\t\ttype: 'REMOVE_BLOCK_COLLECTION',\n\t\tnamespace,\n\t};\n}\n"]}
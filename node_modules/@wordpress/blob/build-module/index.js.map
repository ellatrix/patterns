{"version":3,"sources":["@wordpress/blob/src/index.js"],"names":["cache","createBlobURL","file","url","window","URL","createObjectURL","getBlobByURL","getBlobTypeByURL","type","split","revokeBlobURL","revokeObjectURL","isBlobURL","indexOf"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,KAAK,GAAG,EAAd;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,CAAwBC,IAAxB,EAA+B;AACrC,QAAMC,GAAG,GAAGC,MAAM,CAACC,GAAP,CAAWC,eAAX,CAA4BJ,IAA5B,CAAZ;AAEAF,EAAAA,KAAK,CAAEG,GAAF,CAAL,GAAeD,IAAf;AAEA,SAAOC,GAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,YAAT,CAAuBJ,GAAvB,EAA6B;AACnC,SAAOH,KAAK,CAAEG,GAAF,CAAZ;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,gBAAT,CAA2BL,GAA3B,EAAiC;AAAA;;AACvC,0BAAOI,YAAY,CAAEJ,GAAF,CAAnB,kDAAO,cAAqBM,IAArB,CAA0BC,KAA1B,CAAiC,GAAjC,EAAwC,CAAxC,CAAP,CADuC,CACa;AACpD;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,CAAwBR,GAAxB,EAA8B;AACpC,MAAKH,KAAK,CAAEG,GAAF,CAAV,EAAoB;AACnBC,IAAAA,MAAM,CAACC,GAAP,CAAWO,eAAX,CAA4BT,GAA5B;AACA;;AAED,SAAOH,KAAK,CAAEG,GAAF,CAAZ;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASU,SAAT,CAAoBV,GAApB,EAA0B;AAChC,MAAK,CAAEA,GAAF,IAAS,CAAEA,GAAG,CAACW,OAApB,EAA8B;AAC7B,WAAO,KAAP;AACA;;AACD,SAAOX,GAAG,CAACW,OAAJ,CAAa,OAAb,MAA2B,CAAlC;AACA","sourcesContent":["/**\n * @type {Record<string, File|undefined>}\n */\nconst cache = {};\n\n/**\n * Create a blob URL from a file.\n *\n * @param {File} file The file to create a blob URL for.\n *\n * @return {string} The blob URL.\n */\nexport function createBlobURL( file ) {\n\tconst url = window.URL.createObjectURL( file );\n\n\tcache[ url ] = file;\n\n\treturn url;\n}\n\n/**\n * Retrieve a file based on a blob URL. The file must have been created by\n * `createBlobURL` and not removed by `revokeBlobURL`, otherwise it will return\n * `undefined`.\n *\n * @param {string} url The blob URL.\n *\n * @return {File|undefined} The file for the blob URL.\n */\nexport function getBlobByURL( url ) {\n\treturn cache[ url ];\n}\n\n/**\n * Retrieve a blob type based on URL. The file must have been created by\n * `createBlobURL` and not removed by `revokeBlobURL`, otherwise it will return\n * `undefined`.\n *\n * @param {string} url The blob URL.\n *\n * @return {string|undefined} The blob type.\n */\nexport function getBlobTypeByURL( url ) {\n\treturn getBlobByURL( url )?.type.split( '/' )[ 0 ]; // 0: media type , 1: file extension eg ( type: 'image/jpeg' ).\n}\n\n/**\n * Remove the resource and file cache from memory.\n *\n * @param {string} url The blob URL.\n */\nexport function revokeBlobURL( url ) {\n\tif ( cache[ url ] ) {\n\t\twindow.URL.revokeObjectURL( url );\n\t}\n\n\tdelete cache[ url ];\n}\n\n/**\n * Check whether a url is a blob url.\n *\n * @param {string} url The URL.\n *\n * @return {boolean} Is the url a blob url?\n */\nexport function isBlobURL( url ) {\n\tif ( ! url || ! url.indexOf ) {\n\t\treturn false;\n\t}\n\treturn url.indexOf( 'blob:' ) === 0;\n}\n"]}
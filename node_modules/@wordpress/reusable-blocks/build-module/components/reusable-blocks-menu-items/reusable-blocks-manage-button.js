import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { MenuItem } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { isReusableBlock } from '@wordpress/blocks';
import { useSelect, useDispatch } from '@wordpress/data';
import { BlockSettingsMenuControls, store as blockEditorStore } from '@wordpress/block-editor';
import { addQueryArgs } from '@wordpress/url';
import { store as coreStore } from '@wordpress/core-data';
/**
 * Internal dependencies
 */

import { store as reusableBlocksStore } from '../../store';

function ReusableBlocksManageButton(_ref) {
  let {
    clientId
  } = _ref;
  const {
    canRemove,
    isVisible,
    innerBlockCount
  } = useSelect(select => {
    const {
      getBlock,
      canRemoveBlock,
      getBlockCount
    } = select(blockEditorStore);
    const {
      canUser
    } = select(coreStore);
    const reusableBlock = getBlock(clientId);
    return {
      canRemove: canRemoveBlock(clientId),
      isVisible: !!reusableBlock && isReusableBlock(reusableBlock) && !!canUser('update', 'blocks', reusableBlock.attributes.ref),
      innerBlockCount: getBlockCount(clientId)
    };
  }, [clientId]);
  const {
    __experimentalConvertBlockToStatic: convertBlockToStatic
  } = useDispatch(reusableBlocksStore);

  if (!isVisible) {
    return null;
  }

  return createElement(BlockSettingsMenuControls, null, createElement(MenuItem, {
    href: addQueryArgs('edit.php', {
      post_type: 'wp_block'
    })
  }, __('Manage Reusable blocks')), canRemove && createElement(MenuItem, {
    onClick: () => convertBlockToStatic(clientId)
  }, innerBlockCount > 1 ? __('Convert to regular blocks') : __('Convert to regular block')));
}

export default ReusableBlocksManageButton;
//# sourceMappingURL=reusable-blocks-manage-button.js.map
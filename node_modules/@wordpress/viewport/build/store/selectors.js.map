{"version":3,"sources":["@wordpress/viewport/src/store/selectors.js"],"names":["isViewportMatch","state","query","indexOf"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,eAAT,CAA0BC,KAA1B,EAAiCC,KAAjC,EAAyC;AAC/C;AACA,MAAKA,KAAK,CAACC,OAAN,CAAe,GAAf,MAAyB,CAAC,CAA/B,EAAmC;AAClCD,IAAAA,KAAK,GAAG,QAAQA,KAAhB;AACA;;AAED,SAAO,CAAC,CAAED,KAAK,CAAEC,KAAF,CAAf;AACA","sourcesContent":["/**\n * Returns true if the viewport matches the given query, or false otherwise.\n *\n * @param {Object} state Viewport state object.\n * @param {string} query Query string. Includes operator and breakpoint name,\n *                       space separated. Operator defaults to >=.\n *\n * @example\n *\n * ```js\n * import { store as viewportStore } from '@wordpress/viewport';\n * import { useSelect } from '@wordpress/data';\n * import { __ } from '@wordpress/i18n';\n * const ExampleComponent = () => {\n *     const isMobile = useSelect(\n *         ( select ) => select( viewportStore ).isViewportMatch( '< small' ),\n *         []\n *     );\n *\n *     return isMobile ? (\n *         <div>{ __( 'Mobile' ) }</div>\n *     ) : (\n *         <div>{ __( 'Not Mobile' ) }</div>\n *     );\n * };\n * ```\n *\n * @return {boolean} Whether viewport matches query.\n */\nexport function isViewportMatch( state, query ) {\n\t// Default to `>=` if no operator is present.\n\tif ( query.indexOf( ' ' ) === -1 ) {\n\t\tquery = '>= ' + query;\n\t}\n\n\treturn !! state[ query ];\n}\n"]}
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactNative = require("react-native");

var _data = require("@wordpress/data");

var _store = require("./store");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const matchWidth = (operator, breakpoint) => {
  const {
    width
  } = _reactNative.Dimensions.get('window');

  if (operator === 'max-width') {
    return width < breakpoint;
  } else if (operator === 'min-width') {
    return width >= breakpoint;
  }

  throw new Error(`Unsupported viewport operator: ${operator}`);
};

const addDimensionsEventListener = (breakpoints, operators) => {
  const operatorEntries = Object.entries(operators);
  const breakpointEntries = Object.entries(breakpoints);

  const setIsMatching = () => {
    const matches = Object.fromEntries(breakpointEntries.flatMap(_ref => {
      let [name, width] = _ref;
      return operatorEntries.map(_ref2 => {
        let [operator, condition] = _ref2;
        return [`${operator} ${name}`, matchWidth(condition, width)];
      });
    }));
    (0, _data.dispatch)(_store.store).setIsMatching(matches);
  };

  _reactNative.Dimensions.addEventListener('change', setIsMatching); // Set initial values.


  setIsMatching();
};

var _default = addDimensionsEventListener;
exports.default = _default;
//# sourceMappingURL=listener.native.js.map
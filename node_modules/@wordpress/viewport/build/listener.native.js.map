{"version":3,"sources":["@wordpress/viewport/src/listener.native.js"],"names":["matchWidth","operator","breakpoint","width","Dimensions","get","Error","addDimensionsEventListener","breakpoints","operators","operatorEntries","Object","entries","breakpointEntries","setIsMatching","matches","fromEntries","flatMap","name","map","condition","store","addEventListener"],"mappings":";;;;;;;AAGA;;AAKA;;AAKA;;AAbA;AACA;AACA;;AAGA;AACA;AACA;;AAGA;AACA;AACA;AAGA,MAAMA,UAAU,GAAG,CAAEC,QAAF,EAAYC,UAAZ,KAA4B;AAC9C,QAAM;AAAEC,IAAAA;AAAF,MAAYC,wBAAWC,GAAX,CAAgB,QAAhB,CAAlB;;AACA,MAAKJ,QAAQ,KAAK,WAAlB,EAAgC;AAC/B,WAAOE,KAAK,GAAGD,UAAf;AACA,GAFD,MAEO,IAAKD,QAAQ,KAAK,WAAlB,EAAgC;AACtC,WAAOE,KAAK,IAAID,UAAhB;AACA;;AACD,QAAM,IAAII,KAAJ,CAAY,kCAAkCL,QAAU,EAAxD,CAAN;AACA,CARD;;AAUA,MAAMM,0BAA0B,GAAG,CAAEC,WAAF,EAAeC,SAAf,KAA8B;AAChE,QAAMC,eAAe,GAAGC,MAAM,CAACC,OAAP,CAAgBH,SAAhB,CAAxB;AACA,QAAMI,iBAAiB,GAAGF,MAAM,CAACC,OAAP,CAAgBJ,WAAhB,CAA1B;;AAEA,QAAMM,aAAa,GAAG,MAAM;AAC3B,UAAMC,OAAO,GAAGJ,MAAM,CAACK,WAAP,CACfH,iBAAiB,CAACI,OAAlB,CAA2B,QAAuB;AAAA,UAArB,CAAEC,IAAF,EAAQf,KAAR,CAAqB;AACjD,aAAOO,eAAe,CAACS,GAAhB,CAAqB;AAAA,YAAE,CAAElB,QAAF,EAAYmB,SAAZ,CAAF;AAAA,eAA+B,CACzD,GAAGnB,QAAU,IAAIiB,IAAM,EADkC,EAE1DlB,UAAU,CAAEoB,SAAF,EAAajB,KAAb,CAFgD,CAA/B;AAAA,OAArB,CAAP;AAIA,KALD,CADe,CAAhB;AASA,wBAAUkB,YAAV,EAAkBP,aAAlB,CAAiCC,OAAjC;AACA,GAXD;;AAaAX,0BAAWkB,gBAAX,CAA6B,QAA7B,EAAuCR,aAAvC,EAjBgE,CAmBhE;;;AACAA,EAAAA,aAAa;AACb,CArBD;;eAuBeP,0B","sourcesContent":["/**\n * External dependencies\n */\nimport { Dimensions } from 'react-native';\n\n/**\n * WordPress dependencies\n */\nimport { dispatch } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { store } from './store';\n\nconst matchWidth = ( operator, breakpoint ) => {\n\tconst { width } = Dimensions.get( 'window' );\n\tif ( operator === 'max-width' ) {\n\t\treturn width < breakpoint;\n\t} else if ( operator === 'min-width' ) {\n\t\treturn width >= breakpoint;\n\t}\n\tthrow new Error( `Unsupported viewport operator: ${ operator }` );\n};\n\nconst addDimensionsEventListener = ( breakpoints, operators ) => {\n\tconst operatorEntries = Object.entries( operators );\n\tconst breakpointEntries = Object.entries( breakpoints );\n\n\tconst setIsMatching = () => {\n\t\tconst matches = Object.fromEntries(\n\t\t\tbreakpointEntries.flatMap( ( [ name, width ] ) => {\n\t\t\t\treturn operatorEntries.map( ( [ operator, condition ] ) => [\n\t\t\t\t\t`${ operator } ${ name }`,\n\t\t\t\t\tmatchWidth( condition, width ),\n\t\t\t\t] );\n\t\t\t} )\n\t\t);\n\n\t\tdispatch( store ).setIsMatching( matches );\n\t};\n\n\tDimensions.addEventListener( 'change', setIsMatching );\n\n\t// Set initial values.\n\tsetIsMatching();\n};\n\nexport default addDimensionsEventListener;\n"]}
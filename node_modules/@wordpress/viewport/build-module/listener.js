/**
 * WordPress dependencies
 */
import { debounce } from '@wordpress/compose';
import { dispatch } from '@wordpress/data';
/**
 * Internal dependencies
 */

import { store } from './store';

const addDimensionsEventListener = (breakpoints, operators) => {
  /**
   * Callback invoked when media query state should be updated. Is invoked a
   * maximum of one time per call stack.
   */
  const setIsMatching = debounce(() => {
    const values = Object.fromEntries(queries.map(_ref => {
      let [key, query] = _ref;
      return [key, query.matches];
    }));
    dispatch(store).setIsMatching(values);
  }, 0, {
    leading: true
  });
  /**
   * Hash of breakpoint names with generated MediaQueryList for corresponding
   * media query.
   *
   * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia
   * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList
   *
   * @type {Object<string,MediaQueryList>}
   */

  const operatorEntries = Object.entries(operators);
  const queries = Object.entries(breakpoints).flatMap(_ref2 => {
    let [name, width] = _ref2;
    return operatorEntries.map(_ref3 => {
      let [operator, condition] = _ref3;
      const list = window.matchMedia(`(${condition}: ${width}px)`);
      list.addEventListener('change', setIsMatching);
      return [`${operator} ${name}`, list];
    });
  });
  window.addEventListener('orientationchange', setIsMatching); // Set initial values.

  setIsMatching();
  setIsMatching.flush();
};

export default addDimensionsEventListener;
//# sourceMappingURL=listener.js.map
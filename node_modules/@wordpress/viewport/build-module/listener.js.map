{"version":3,"sources":["@wordpress/viewport/src/listener.js"],"names":["debounce","dispatch","store","addDimensionsEventListener","breakpoints","operators","setIsMatching","values","Object","fromEntries","queries","map","key","query","matches","leading","operatorEntries","entries","flatMap","name","width","operator","condition","list","window","matchMedia","addEventListener","flush"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,QAAT,QAAyB,oBAAzB;AACA,SAASC,QAAT,QAAyB,iBAAzB;AAEA;AACA;AACA;;AACA,SAASC,KAAT,QAAsB,SAAtB;;AAEA,MAAMC,0BAA0B,GAAG,CAAEC,WAAF,EAAeC,SAAf,KAA8B;AAChE;AACD;AACA;AACA;AACC,QAAMC,aAAa,GAAGN,QAAQ,CAC7B,MAAM;AACL,UAAMO,MAAM,GAAGC,MAAM,CAACC,WAAP,CACdC,OAAO,CAACC,GAAR,CAAa;AAAA,UAAE,CAAEC,GAAF,EAAOC,KAAP,CAAF;AAAA,aAAsB,CAAED,GAAF,EAAOC,KAAK,CAACC,OAAb,CAAtB;AAAA,KAAb,CADc,CAAf;AAGAb,IAAAA,QAAQ,CAAEC,KAAF,CAAR,CAAkBI,aAAlB,CAAiCC,MAAjC;AACA,GAN4B,EAO7B,CAP6B,EAQ7B;AAAEQ,IAAAA,OAAO,EAAE;AAAX,GAR6B,CAA9B;AAWA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACC,QAAMC,eAAe,GAAGR,MAAM,CAACS,OAAP,CAAgBZ,SAAhB,CAAxB;AACA,QAAMK,OAAO,GAAGF,MAAM,CAACS,OAAP,CAAgBb,WAAhB,EAA8Bc,OAA9B,CACf,SAAuB;AAAA,QAArB,CAAEC,IAAF,EAAQC,KAAR,CAAqB;AACtB,WAAOJ,eAAe,CAACL,GAAhB,CAAqB,SAA+B;AAAA,UAA7B,CAAEU,QAAF,EAAYC,SAAZ,CAA6B;AAC1D,YAAMC,IAAI,GAAGC,MAAM,CAACC,UAAP,CACX,IAAIH,SAAW,KAAKF,KAAO,KADhB,CAAb;AAGAG,MAAAA,IAAI,CAACG,gBAAL,CAAuB,QAAvB,EAAiCpB,aAAjC;AACA,aAAO,CAAG,GAAGe,QAAU,IAAIF,IAAM,EAA1B,EAA6BI,IAA7B,CAAP;AACA,KANM,CAAP;AAOA,GATc,CAAhB;AAYAC,EAAAA,MAAM,CAACE,gBAAP,CAAyB,mBAAzB,EAA8CpB,aAA9C,EAtCgE,CAwChE;;AACAA,EAAAA,aAAa;AACbA,EAAAA,aAAa,CAACqB,KAAd;AACA,CA3CD;;AA6CA,eAAexB,0BAAf","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { debounce } from '@wordpress/compose';\nimport { dispatch } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { store } from './store';\n\nconst addDimensionsEventListener = ( breakpoints, operators ) => {\n\t/**\n\t * Callback invoked when media query state should be updated. Is invoked a\n\t * maximum of one time per call stack.\n\t */\n\tconst setIsMatching = debounce(\n\t\t() => {\n\t\t\tconst values = Object.fromEntries(\n\t\t\t\tqueries.map( ( [ key, query ] ) => [ key, query.matches ] )\n\t\t\t);\n\t\t\tdispatch( store ).setIsMatching( values );\n\t\t},\n\t\t0,\n\t\t{ leading: true }\n\t);\n\n\t/**\n\t * Hash of breakpoint names with generated MediaQueryList for corresponding\n\t * media query.\n\t *\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList\n\t *\n\t * @type {Object<string,MediaQueryList>}\n\t */\n\tconst operatorEntries = Object.entries( operators );\n\tconst queries = Object.entries( breakpoints ).flatMap(\n\t\t( [ name, width ] ) => {\n\t\t\treturn operatorEntries.map( ( [ operator, condition ] ) => {\n\t\t\t\tconst list = window.matchMedia(\n\t\t\t\t\t`(${ condition }: ${ width }px)`\n\t\t\t\t);\n\t\t\t\tlist.addEventListener( 'change', setIsMatching );\n\t\t\t\treturn [ `${ operator } ${ name }`, list ];\n\t\t\t} );\n\t\t}\n\t);\n\n\twindow.addEventListener( 'orientationchange', setIsMatching );\n\n\t// Set initial values.\n\tsetIsMatching();\n\tsetIsMatching.flush();\n};\n\nexport default addDimensionsEventListener;\n"]}
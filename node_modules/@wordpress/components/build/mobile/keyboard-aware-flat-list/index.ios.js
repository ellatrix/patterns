"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.KeyboardAwareFlatList = void 0;

var _element = require("@wordpress/element");

var _reactNativeKeyboardAwareScrollView = require("react-native-keyboard-aware-scroll-view");

var _reactNative = require("react-native");

var _es = _interopRequireDefault(require("fast-deep-equal/es6"));

var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */
const List = (0, _element.memo)(_reactNative.FlatList, _es.default);

const AnimatedKeyboardAwareScrollView = _reactNativeReanimated.default.createAnimatedComponent(_reactNativeKeyboardAwareScrollView.KeyboardAwareScrollView);

const KeyboardAwareFlatList = _ref => {
  let {
    extraScrollHeight,
    shouldPreventAutomaticScroll,
    innerRef,
    autoScroll,
    scrollViewStyle,
    inputAccessoryViewHeight,
    onScroll,
    ...listProps
  } = _ref;
  const scrollViewRef = (0, _element.useRef)();
  const keyboardWillShowIndicator = (0, _element.useRef)();
  const latestContentOffsetY = (0, _reactNativeReanimated.useSharedValue)(-1);
  const scrollHandler = (0, _reactNativeReanimated.useAnimatedScrollHandler)({
    onScroll: event => {
      const {
        contentOffset
      } = event;
      latestContentOffsetY.value = contentOffset.y;
      onScroll(event);
    }
  });
  const getRef = (0, _element.useCallback)(ref => {
    scrollViewRef.current = ref;
    innerRef(ref);
  }, [innerRef]);
  const onKeyboardWillHide = (0, _element.useCallback)(() => {
    keyboardWillShowIndicator.current = false;
  }, []);
  const onKeyboardDidHide = (0, _element.useCallback)(() => {
    setTimeout(() => {
      if (!keyboardWillShowIndicator.current && latestContentOffsetY.value !== -1 && !shouldPreventAutomaticScroll()) {
        var _scrollViewRef$curren;

        // Reset the content position if keyboard is still closed.
        (_scrollViewRef$curren = scrollViewRef.current) === null || _scrollViewRef$curren === void 0 ? void 0 : _scrollViewRef$curren.scrollToPosition(0, latestContentOffsetY.value, true);
      }
    }, 50);
  }, [latestContentOffsetY, shouldPreventAutomaticScroll]);
  const onKeyboardWillShow = (0, _element.useCallback)(() => {
    keyboardWillShowIndicator.current = true;
  }, []);
  return (0, _element.createElement)(AnimatedKeyboardAwareScrollView, {
    style: [{
      flex: 1
    }, scrollViewStyle],
    keyboardDismissMode: "none",
    enableResetScrollToCoords: false,
    keyboardShouldPersistTaps: "handled",
    extraScrollHeight: extraScrollHeight,
    extraHeight: 0,
    inputAccessoryViewHeight: inputAccessoryViewHeight,
    enableAutomaticScroll: autoScroll === undefined ? false : autoScroll,
    ref: getRef,
    onKeyboardWillHide: onKeyboardWillHide,
    onKeyboardDidHide: onKeyboardDidHide,
    onKeyboardWillShow: onKeyboardWillShow,
    scrollEnabled: listProps.scrollEnabled,
    onScroll: scrollHandler
  }, (0, _element.createElement)(List, listProps));
};

exports.KeyboardAwareFlatList = KeyboardAwareFlatList;

KeyboardAwareFlatList.handleCaretVerticalPositionChange = (scrollView, targetId, caretY, previousCaretY) => {
  if (previousCaretY) {
    // If this is not the first tap.
    scrollView.refreshScrollForField(targetId);
  }
};

var _default = KeyboardAwareFlatList;
exports.default = _default;
//# sourceMappingURL=index.ios.js.map